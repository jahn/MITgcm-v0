C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/eesupp/src/exch_xy_rx.template,v 1.1.2.3 2001/04/12 10:52:48 cnh Exp $
C $Name:  $

#include "CPP_EEOPTIONS.h"

      SUBROUTINE EXCH_XY_RX( 
     U                       phi, 
     I                       myThid )
C     /==========================================================\
C     | SUBROUTINE EXCH_XY_RX                                    |
C     | o Handle exchanges for _RX   , two-dimensional arrays.   |
C     |==========================================================|
C     | Do true shared-memory data transfers and "messaging"     |
C     | tranfers for blocking case of data transfers.            |
C     | Applications call this routine using                     |
C     |  CALL EXCH..( x, myThid )                                |
C     | where x is a two-dimensional array with overlaps.        |
C     | This routine does true-shared-memory copies for blocks   |
C     | within a thread. It will also do MPI meesaging between   |
C     | different processes.                                     |
C     \==========================================================/
      IMPLICIT NONE

C     === Global data ===
#include "SIZE.h"
#include "EEPARAMS.h"
#include "EESUPPORT.h"

C     === Routine arguments ===
C     phi    - Array with overlap regions are to be exchanged
C     myThid - My thread id.
      _RX phi(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      INTEGER myThid

C     == Local variables ==
C     OL[wens]       - Overlap extents in west, east, north, south.
C     exchWidth[XY]  - Extent of regions that will be exchanged.
      INTEGER OLw, OLe, OLn, OLs, exchWidthX, exchWidthY, myNz

      OLw        = OLx
      OLe        = OLx
      OLn        = OLy
      OLs        = OLy
      exchWidthX = OLx
      exchWidthY = OLy
      myNz       = 1
C     ** NOTE ** The exchange routine we use here does not 
C                require the preceeding and following barriers.
C                However, the slow, simple exchange interface 
C                that is calling it here is meant to ensure 
C                that threads are synchronised before exchanges
C                begine.
      IF (useCubedSphereExchange) THEN
       CALL EXCH_RX_CUBE( phi,
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_UPDATE_CORNERS, myThid )
      ELSE
       CALL EXCH_RX( phi,
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_UPDATE_CORNERS, myThid )
      ENDIF

      RETURN
      END
