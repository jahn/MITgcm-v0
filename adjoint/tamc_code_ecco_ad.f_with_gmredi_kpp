      subroutine mdbldepth( mytime, mythid, kmtj, dvsq, dbloc, ritop, 
     $ustar, bo, bosol, coriol, ikey, hbl, bfsfc, stable, casea, kbl, 
     $rib, sigma )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      double precision minusone
      parameter ( minusone = -1. )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C define common blocks
C==============================================
      common /cadbfsfd/ bfsfch
      double precision bfsfch(1196,15)

      common /cadbfsfe/ bfsfci
      double precision bfsfci(1196,15)

      common /cadbfsff/ bfsfcj
      double precision bfsfcj(1196,15)

      common /cadhbm/ hblh
      double precision hblh(1196,15)

      common /cadhbn/ hbli
      double precision hbli(1196,15)

      common /cadhbo/ hblj
      double precision hblj(1196,15)

      common /cadkbm/ kblh
      integer kblh(1196,15)

      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kpp_bldepth1/ ricr, cekman, cmonob, concv, vtc
      double precision cekman
      double precision cmonob
      double precision concv
      double precision ricr
      double precision vtc

      common /kpp_bldepth2/ hbf
      double precision hbf

      common /kpp_parm_r/ minkpphbl
      double precision minkpphbl

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision bfsfc(imt)
      double precision bo(imt)
      double precision bosol(imt)
      double precision casea(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision dvsq(imt,nr)
      double precision hbl(imt)
      integer ikey
      integer kbl(imt)
      integer kmtj(imt)
      integer mythid
      double precision mytime
      double precision rib(imt,nr)
      double precision ritop(imt,nr)
      double precision sigma(imt)
      double precision stable(imt)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision bvsq
      double precision hekman
      double precision hlimit
      double precision hmonob
      integer i
      integer ip1
      integer kl
      double precision tempvar1
      double precision tempvar2
      double precision vtsq
      double precision wm(imt)
      double precision worka(imt)
      double precision ws(imt)

C**********************************************
C executable statements of routine
C**********************************************
      do i = 1, imt
        rib(i,1) = 0.
        kbl(i) = max(kmtj(i),1)
        hbl(i) = -zgrid(kbl(i))
      end do
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
        do i = 1, imt
          casea(i) = -zgrid(kl)
          bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
          stable(i) = p5+sign(p5,bfsfc(i))
          sigma(i) = stable(i)+(1.-stable(i))*epsilon
        end do
        call wscale( sigma,casea,ustar,bfsfc,wm,ws )
        do i = 1, imt
          bvsq = p5*(dbloc(i,kl-1)/(zgrid(kl-1)-zgrid(kl))+dbloc(i,kl)/
     $(zgrid(kl)-zgrid(kl+1)))
          if (bvsq .eq. 0.) then
            vtsq = 0.
          else
            vtsq = -(zgrid(kl)*ws(i)*sqrt(abs(bvsq))*vtc)
          endif
          tempvar1 = dvsq(i,kl)+vtsq
          tempvar2 = max(tempvar1,phepsi)
          rib(i,kl) = ritop(i,kl)/tempvar2
        end do
      end do
      do kl = 2, nr
        do i = 1, imt
          if (kbl(i) .eq. kmtj(i) .and. rib(i,kl) .gt. ricr) then
            kbl(i) = kl
          endif
        end do
      end do
      do ip1 = 1, 1196
        kblh(ip1,ikey) = kbl(ip1)
      end do
      do i = 1, imt
        kl = kbl(i)
        if (kl .gt. 1 .and. kl .lt. kmtj(i)) then
          tempvar1 = rib(i,kl)-rib(i,kl-1)
          hbl(i) = (-zgrid(kl-1))+(zgrid(kl-1)-zgrid(kl))*(ricr-rib(i,
     $kl-1))/tempvar1
        endif
      end do
      do ip1 = 1, 1196
        hblj(ip1,ikey) = hbl(ip1)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
      end do
      do ip1 = 1, 1196
        bfsfcj(ip1,ikey) = bfsfc(ip1)
      end do
      do i = 1, imt
        stable(i) = p5+sign(p5,bfsfc(i))
        bfsfc(i) = sign(eins,bfsfc(i))*max(phepsi,abs(bfsfc(i)))
      end do
      do ip1 = 1, 1196
        bfsfci(ip1,ikey) = bfsfc(ip1)
      end do
      do i = 1, imt
        if (bfsfc(i) .gt. 0.) then
          hekman = cekman*ustar(i)/max(abs(coriol(i)),phepsi)
          hmonob = cmonob*ustar(i)*ustar(i)*ustar(i)/vonk/bfsfc(i)
          hlimit = stable(i)*min(hekman,hmonob)+(stable(i)-1.)*zgrid(nr)
          hbl(i) = min(hbl(i),hlimit)
        endif
      end do
      do ip1 = 1, 1196
        hbli(ip1,ikey) = hbl(ip1)
      end do
      do i = 1, imt
        hbl(i) = max(hbl(i),minkpphbl)
        kbl(i) = kmtj(i)
      end do
      do ip1 = 1, 1196
        hblh(ip1,ikey) = hbl(ip1)
      end do
      do kl = 2, nr
        do i = 1, imt
          if (kbl(i) .eq. kmtj(i) .and. (-zgrid(kl)) .gt. hbl(i)) then
            kbl(i) = kl
          endif
        end do
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
      end do
      do ip1 = 1, 1196
        bfsfch(ip1,ikey) = bfsfc(ip1)
      end do
      do i = 1, imt
        stable(i) = p5+sign(p5,bfsfc(i))
        bfsfc(i) = sign(eins,bfsfc(i))*max(phepsi,abs(bfsfc(i)))
      end do
      do i = 1, imt
        casea(i) = p5+sign(p5,(-zgrid(kbl(i)))-p5*hwide(kbl(i))-hbl(i))
      end do
      end


      subroutine adbldepth( kmtj, dvsq, dbloc, ritop, ustar, bo, bosol, 
     $coriol, ikey, addvsq, addbloc, adritop, adustar, adbo, adbosol, 
     $adcoriol, adhbl, adbfsfc, adstable, adcasea, adrib, adsigma )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      double precision minusone
      parameter ( minusone = -1. )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C define common blocks
C==============================================
      common /cadbfsfd/ bfsfch
      double precision bfsfch(1196,15)

      common /cadbfsfe/ bfsfci
      double precision bfsfci(1196,15)

      common /cadbfsff/ bfsfcj
      double precision bfsfcj(1196,15)

      common /cadhbm/ hblh
      double precision hblh(1196,15)

      common /cadhbn/ hbli
      double precision hbli(1196,15)

      common /cadhbo/ hblj
      double precision hblj(1196,15)

      common /cadkbm/ kblh
      integer kblh(1196,15)

      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kpp_bldepth1/ ricr, cekman, cmonob, concv, vtc
      double precision cekman
      double precision cmonob
      double precision concv
      double precision ricr
      double precision vtc

      common /kpp_bldepth2/ hbf
      double precision hbf

      common /kpp_parm_r/ minkpphbl
      double precision minkpphbl

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision adbfsfc(imt)
      double precision adbo(imt)
      double precision adbosol(imt)
      double precision adcasea(imt)
      double precision adcoriol(imt)
      double precision addbloc(imt,nr)
      double precision addvsq(imt,nr)
      double precision adhbl(imt)
      double precision adrib(imt,nr)
      double precision adritop(imt,nr)
      double precision adsigma(imt)
      double precision adstable(imt)
      double precision adustar(imt)
      double precision bo(imt)
      double precision bosol(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision dvsq(imt,nr)
      integer ikey
      integer kmtj(imt)
      double precision ritop(imt,nr)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision adbvsq
      double precision adhekman
      double precision adhlimit
      double precision adhmonob
      double precision adtempvar1
      double precision adtempvar2
      double precision advtsq
      double precision adwm(imt)
      double precision adworka(imt)
      double precision adws(imt)
      double precision bfsfc(imt)
      double precision bvsq
      double precision casea(imt)
      double precision hbl(imt)
      double precision hekman
      double precision hekmanh
      double precision hlimit
      double precision hmonob
      integer i
      integer ip1
      integer kbl(imt)
      integer kl
      integer mythid
      double precision mytime
      double precision rib(imt,nr)
      double precision sigma(imt)
      double precision stable(imt)
      double precision tempvar1
      double precision tempvar2
      double precision vtsq
      double precision vtsqh
      double precision wm(imt)
      double precision worka(imt)
      double precision ws(imt)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adbvsq = 0.d0
      adhekman = 0.d0
      adhlimit = 0.d0
      adhmonob = 0.d0
      adtempvar1 = 0.d0
      adtempvar2 = 0.d0
      advtsq = 0.d0
      do ip1 = 1, imt
        adwm(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adworka(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adws(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        rib(i,1) = 0.
      end do
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
        do i = 1, imt
          casea(i) = -zgrid(kl)
          bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
          stable(i) = p5+sign(p5,bfsfc(i))
          sigma(i) = stable(i)+(1.-stable(i))*epsilon
        end do
        call wscale( sigma,casea,ustar,bfsfc,wm,ws )
        do i = 1, imt
          bvsq = p5*(dbloc(i,kl-1)/(zgrid(kl-1)-zgrid(kl))+dbloc(i,kl)/
     $(zgrid(kl)-zgrid(kl+1)))
          if (bvsq .eq. 0.) then
            vtsq = 0.
          else
            vtsq = -(zgrid(kl)*ws(i)*sqrt(abs(bvsq))*vtc)
          endif
          tempvar1 = dvsq(i,kl)+vtsq
          tempvar2 = max(tempvar1,phepsi)
          rib(i,kl) = ritop(i,kl)/tempvar2
        end do
      end do
      do ip1 = 1, imt
        kbl(ip1) = kblh(ip1,ikey)
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = bfsfcj(ip1,ikey)
      end do
      do i = 1, imt
        stable(i) = p5+sign(p5,bfsfc(i))
      end do
      do ip1 = 1, imt
        hbl(ip1) = hblh(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do ip1 = 1, imt
        bfsfc(ip1) = bfsfch(ip1,ikey)
      end do
      do i = 1, imt
        adcasea(i) = 0.d0
      end do
      do i = 1, imt
        adbfsfc(i) = adbfsfc(i)*(1+(0.5-sign(0.5d0,phepsi-abs(bfsfc(i)))
     $)*sign(eins,bfsfc(i))*sign(1.d0,bfsfc(i)))
        adbfsfc(i) = 0.d0
        adstable(i) = 0.d0
      end do
      do i = 1, imt
        adbo(i) = adbo(i)+adbfsfc(i)
        adbosol(i) = adbosol(i)+adbfsfc(i)*(1.-worka(i))
        adworka(i) = adworka(i)-adbfsfc(i)*bosol(i)
        adbfsfc(i) = 0.d0
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call adswfrac( imt,minusone,worka,adworka )
      do i = 1, imt
        adhbl(i) = adhbl(i)+adworka(i)
        adworka(i) = 0.d0
      end do
      do ip1 = 1, imt
        hbl(ip1) = hbli(ip1,ikey)
      end do
      do i = 1, imt
        adhbl(i) = adhbl(i)*(0.5+sign(0.5d0,hbl(i)-minkpphbl))
      end do
      do ip1 = 1, imt
        hbl(ip1) = hblj(ip1,ikey)
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = bfsfci(ip1,ikey)
      end do
      do i = 1, imt
        adhekman = 0.d0
        adhlimit = 0.d0
        adhmonob = 0.d0
        if (bfsfc(i) .gt. 0.) then
          hekman = cekman*ustar(i)/max(abs(coriol(i)),phepsi)
          hmonob = cmonob*ustar(i)*ustar(i)*ustar(i)/vonk/bfsfc(i)
          hlimit = stable(i)*min(hekman,hmonob)+(stable(i)-1.)*zgrid(nr)
          adhlimit = adhlimit+adhbl(i)*(0.5-sign(0.5d0,hlimit-hbl(i)))
          adhbl(i) = adhbl(i)*(0.5+sign(0.5d0,hlimit-hbl(i)))
          adhekman = adhekman+adhlimit*stable(i)*(0.5+sign(0.5d0,hmonob-
     $hekman))
          adhmonob = adhmonob+adhlimit*stable(i)*(0.5-sign(0.5d0,hmonob-
     $hekman))
          adstable(i) = adstable(i)+adhlimit*(zgrid(nr)+min(hekman,
     $hmonob))
          adhlimit = 0.d0
          adbfsfc(i) = adbfsfc(i)-adhmonob*(cmonob*ustar(i)*ustar(i)*
     $ustar(i)/vonk/(bfsfc(i)*bfsfc(i)))
          adustar(i) = adustar(i)+adhmonob*(3*cmonob*ustar(i)*ustar(i)/
     $vonk/bfsfc(i))
          adhmonob = 0.d0
          hekmanh = abs(coriol(i))
          adustar(i) = adustar(i)+adhekman*(cekman/max(hekmanh,phepsi))
          adcoriol(i) = adcoriol(i)-adhekman*(cekman*ustar(i)*(0.5+
     $sign(0.5d0,hekmanh-phepsi))/(max(hekmanh,phepsi)*max(hekmanh,
     $phepsi)))*sign(1.d0,coriol(i))
          adhekman = 0.d0
        endif
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = bfsfcj(ip1,ikey)
      end do
      do i = 1, imt
        adbfsfc(i) = adbfsfc(i)*(1+(0.5-sign(0.5d0,phepsi-abs(bfsfc(i)))
     $)*sign(eins,bfsfc(i))*sign(1.d0,bfsfc(i)))
        adbfsfc(i) = 0.d0
        adstable(i) = 0.d0
      end do
      do ip1 = 1, imt
        hbl(ip1) = hblj(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        adbo(i) = adbo(i)+adbfsfc(i)
        adbosol(i) = adbosol(i)+adbfsfc(i)*(1.-worka(i))
        adworka(i) = adworka(i)-adbfsfc(i)*bosol(i)
        adbfsfc(i) = 0.d0
      end do
      do ip1 = 1, imt
        hbl(ip1) = hblj(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call adswfrac( imt,minusone,worka,adworka )
      do i = 1, imt
        adhbl(i) = adhbl(i)+adworka(i)
        adworka(i) = 0.d0
      end do
      do i = 1, imt
        adtempvar1 = 0.d0
        kl = kbl(i)
        if (kl .gt. 1 .and. kl .lt. kmtj(i)) then
          tempvar1 = rib(i,kl)-rib(i,kl-1)
          adrib(i,kl-1) = adrib(i,kl-1)-adhbl(i)*((zgrid(kl-1)-zgrid(kl)
     $)/tempvar1)
          adtempvar1 = adtempvar1-adhbl(i)*((zgrid(kl-1)-zgrid(kl))*
     $(ricr-rib(i,kl-1))/(tempvar1*tempvar1))
          adhbl(i) = 0.d0
          adrib(i,kl-1) = adrib(i,kl-1)-adtempvar1
          adrib(i,kl) = adrib(i,kl)+adtempvar1
          adtempvar1 = 0.d0
        endif
      end do
      do kl = nr, 2, -1
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
        do i = 1, imt
          casea(i) = -zgrid(kl)
          bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
          stable(i) = p5+sign(p5,bfsfc(i))
          sigma(i) = stable(i)+(1.-stable(i))*epsilon
        end do
        call wscale( sigma,casea,ustar,bfsfc,wm,ws )
        do i = 1, imt
          adbvsq = 0.d0
          adtempvar1 = 0.d0
          adtempvar2 = 0.d0
          advtsq = 0.d0
          bvsq = p5*(dbloc(i,kl-1)/(zgrid(kl-1)-zgrid(kl))+dbloc(i,kl)/
     $(zgrid(kl)-zgrid(kl+1)))
          if (bvsq .eq. 0.) then
            vtsq = 0.
          else
            vtsq = -(zgrid(kl)*ws(i)*sqrt(abs(bvsq))*vtc)
          endif
          tempvar1 = dvsq(i,kl)+vtsq
          tempvar2 = max(tempvar1,phepsi)
          adritop(i,kl) = adritop(i,kl)+adrib(i,kl)/tempvar2
          adtempvar2 = adtempvar2-adrib(i,kl)*(ritop(i,kl)/(tempvar2*
     $tempvar2))
          adrib(i,kl) = 0.d0
          adtempvar1 = adtempvar1+adtempvar2*(0.5+sign(0.5d0,tempvar1-
     $phepsi))
          adtempvar2 = 0.d0
          addvsq(i,kl) = addvsq(i,kl)+adtempvar1
          advtsq = advtsq+adtempvar1
          adtempvar1 = 0.d0
          if (bvsq .eq. 0.) then
            advtsq = 0.d0
          else
            vtsqh = abs(bvsq)
            adws(i) = adws(i)-advtsq*zgrid(kl)*vtc*sqrt(vtsqh)
            adbvsq = adbvsq-advtsq*zgrid(kl)*ws(i)*1./(2.*sqrt(vtsqh))*
     $vtc*sign(1.d0,bvsq)
            advtsq = 0.d0
          endif
          addbloc(i,kl-1) = addbloc(i,kl-1)+adbvsq*(p5/(zgrid(kl-1)-
     $zgrid(kl)))
          addbloc(i,kl) = addbloc(i,kl)+adbvsq*(p5/(zgrid(kl)-zgrid(kl+
     $1)))
          adbvsq = 0.d0
        end do
        call adwscale( sigma,casea,ustar,bfsfc,adsigma,adcasea,adustar,
     $adbfsfc,adwm,adws )
        do i = 1, imt
          adstable(i) = adstable(i)+adsigma(i)*(1-epsilon)
          adsigma(i) = 0.d0
          adstable(i) = 0.d0
          adbo(i) = adbo(i)+adbfsfc(i)
          adbosol(i) = adbosol(i)+adbfsfc(i)*(1.-worka(i))
          adworka(i) = adworka(i)-adbfsfc(i)*bosol(i)
          adbfsfc(i) = 0.d0
        end do
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call adswfrac( imt,hbf,worka,adworka )
      end do

      end


      subroutine mdblmix( ustar, bfsfc, hbl, stable, casea, diffus, kbl,
     $ dkm1, blmc, ghat, sigma, ikey )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p0
      parameter ( p0 = 0. )

C==============================================
C define common blocks
C==============================================
      common /cadwm/ wmh
      double precision wmh(imt,15)

      common /cadws/ wsh
      double precision wsh(imt,15)

      common /kmixcbm/ cstar, cg
      double precision cg
      double precision cstar

      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision bfsfc(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dkm1(imt,mdiff)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer ikey
      integer kbl(imt)
      double precision sigma(imt)
      double precision stable(imt)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision a1
      double precision a2
      double precision a3
      double precision dat1m(imt)
      double precision dat1s(imt)
      double precision dat1t(imt)
      double precision delhat
      double precision difsh
      double precision difsp
      double precision difth
      double precision diftp
      double precision dvdzdn
      double precision dvdzup
      double precision f1
      double precision gat1m(imt)
      double precision gat1s(imt)
      double precision gat1t(imt)
      double precision gm
      double precision gs
      double precision gt
      integer i
      integer ip1
      integer ki
      integer kn
      double precision r
      double precision sig
      double precision tempvar
      double precision visch
      double precision viscp
      double precision wm(imt)
      double precision ws(imt)

C**********************************************
C executable statements of routine
C**********************************************
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        wm(i) = sign(eins,wm(i))*max(phepsi,abs(wm(i)))
        ws(i) = sign(eins,ws(i))*max(phepsi,abs(ws(i)))
      end do
      do ip1 = 1, imt
        wmh(ip1,ikey) = wm(ip1)
      end do
      do ip1 = 1, imt
        wsh(ip1,ikey) = ws(ip1)
      end do
      do i = 1, imt
        kn = int(casea(i)+phepsi)*(kbl(i)-1)+(1-int(casea(i)+phepsi))*
     $kbl(i)
        delhat = 0.5*hwide(kn)-zgrid(kn)-hbl(i)
        r = 1.-delhat/hwide(kn)
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        viscp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        difsp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,3)-diffus(i,kn,3))/hwide(kn)
        dvdzdn = (diffus(i,kn,3)-diffus(i,kn+1,3))/hwide(kn+1)
        diftp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        visch = diffus(i,kn,1)+viscp*delhat
        difsh = diffus(i,kn,2)+difsp*delhat
        difth = diffus(i,kn,3)+diftp*delhat
        f1 = stable(i)*conc1*bfsfc(i)/max(ustar(i)**4,phepsi)
        gat1m(i) = visch/hbl(i)/wm(i)
        dat1m(i) = (-(viscp/wm(i)))+f1*visch
        dat1m(i) = min(dat1m(i),p0)
        gat1s(i) = difsh/hbl(i)/ws(i)
        dat1s(i) = (-(difsp/ws(i)))+f1*difsh
        dat1s(i) = min(dat1s(i),p0)
        gat1t(i) = difth/hbl(i)/ws(i)
        dat1t(i) = (-(diftp/ws(i)))+f1*difth
        dat1t(i) = min(dat1t(i),p0)
      end do
      do ki = 1, nr
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
        end do
        call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          a1 = sig-2.
          a2 = 3.-2.*sig
          a3 = sig-1.
          gm = a1+a2*gat1m(i)+a3*dat1m(i)
          gs = a1+a2*gat1s(i)+a3*dat1s(i)
          gt = a1+a2*gat1t(i)+a3*dat1t(i)
          blmc(i,ki,1) = hbl(i)*wm(i)*sig*(1.+sig*gm)
          blmc(i,ki,2) = hbl(i)*ws(i)*sig*(1.+sig*gs)
          blmc(i,ki,3) = hbl(i)*ws(i)*sig*(1.+sig*gt)
          tempvar = ws(i)*hbl(i)
          ghat(i,ki) = (1.-stable(i))*cg/max(phepsi,tempvar)
        end do
      end do
      do i = 1, imt
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        a1 = sig-2.
        a2 = 3.-2.*sig
        a3 = sig-1.
        gm = a1+a2*gat1m(i)+a3*dat1m(i)
        gs = a1+a2*gat1s(i)+a3*dat1s(i)
        gt = a1+a2*gat1t(i)+a3*dat1t(i)
        dkm1(i,1) = hbl(i)*wm(i)*sig*(1.+sig*gm)
        dkm1(i,2) = hbl(i)*ws(i)*sig*(1.+sig*gs)
        dkm1(i,3) = hbl(i)*ws(i)*sig*(1.+sig*gt)
      end do
      end


      subroutine adblmix( ustar, bfsfc, hbl, stable, casea, diffus, kbl,
     $ ikey, adustar, adbfsfc, adhbl, adstable, adcasea, addiffus, 
     $addkm1, adblmc, adghat, adsigma )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p0
      parameter ( p0 = 0. )

C==============================================
C define common blocks
C==============================================
      common /cadwm/ wmh
      double precision wmh(imt,15)

      common /cadws/ wsh
      double precision wsh(imt,15)

      common /kmixcbm/ cstar, cg
      double precision cg
      double precision cstar

      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision adbfsfc(imt)
      double precision adblmc(imt,nr,mdiff)
      double precision adcasea(imt)
      double precision addiffus(imt,0:nrp1,mdiff)
      double precision addkm1(imt,mdiff)
      double precision adghat(imt,nr)
      double precision adhbl(imt)
      double precision adsigma(imt)
      double precision adstable(imt)
      double precision adustar(imt)
      double precision bfsfc(imt)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision hbl(imt)
      integer ikey
      integer kbl(imt)
      double precision stable(imt)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision a1
      double precision a2
      double precision a3
      double precision ada1
      double precision ada2
      double precision ada3
      double precision addat1m(imt)
      double precision addat1s(imt)
      double precision addat1t(imt)
      double precision addelhat
      double precision addifsh
      double precision addifsp
      double precision addifth
      double precision addiftp
      double precision addvdzdn
      double precision addvdzup
      double precision adf1
      double precision adgat1m(imt)
      double precision adgat1s(imt)
      double precision adgat1t(imt)
      double precision adgm
      double precision adgs
      double precision adgt
      double precision adr
      double precision adsig
      double precision adtempvar
      double precision advisch
      double precision adviscp
      double precision adwm(imt)
      double precision adws(imt)
      double precision dat1m(imt)
      double precision dat1s(imt)
      double precision dat1t(imt)
      double precision delhat
      double precision difsh
      double precision difsp
      double precision difth
      double precision diftp
      double precision dvdzdn
      double precision dvdzup
      double precision f1
      double precision gat1m(imt)
      double precision gat1s(imt)
      double precision gat1t(imt)
      double precision gm
      double precision gs
      double precision gt
      integer i
      integer ip1
      integer ki
      integer kn
      double precision r
      double precision sig
      double precision sigma(imt)
      double precision tempvar
      double precision visch
      double precision viscp
      double precision wm(imt)
      double precision ws(imt)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      ada1 = 0.d0
      ada2 = 0.d0
      ada3 = 0.d0
      do ip1 = 1, imt
        addat1m(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        addat1s(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        addat1t(ip1) = 0.d0
      end do
      addelhat = 0.d0
      addifsh = 0.d0
      addifsp = 0.d0
      addifth = 0.d0
      addiftp = 0.d0
      addvdzdn = 0.d0
      addvdzup = 0.d0
      adf1 = 0.d0
      do ip1 = 1, imt
        adgat1m(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adgat1s(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adgat1t(ip1) = 0.d0
      end do
      adgm = 0.d0
      adgs = 0.d0
      adgt = 0.d0
      adr = 0.d0
      adsig = 0.d0
      adtempvar = 0.d0
      advisch = 0.d0
      adviscp = 0.d0
      do ip1 = 1, imt
        adwm(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adws(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      do ip1 = 1, imt
        wm(ip1) = wmh(ip1,ikey)
      end do
      do ip1 = 1, imt
        ws(ip1) = wsh(ip1,ikey)
      end do
      do i = 1, imt
        kn = int(casea(i)+phepsi)*(kbl(i)-1)+(1-int(casea(i)+phepsi))*
     $kbl(i)
        delhat = 0.5*hwide(kn)-zgrid(kn)-hbl(i)
        r = 1.-delhat/hwide(kn)
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        viscp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        difsp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,3)-diffus(i,kn,3))/hwide(kn)
        dvdzdn = (diffus(i,kn,3)-diffus(i,kn+1,3))/hwide(kn+1)
        diftp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        visch = diffus(i,kn,1)+viscp*delhat
        difsh = diffus(i,kn,2)+difsp*delhat
        difth = diffus(i,kn,3)+diftp*delhat
        f1 = stable(i)*conc1*bfsfc(i)/max(ustar(i)**4,phepsi)
        gat1m(i) = visch/hbl(i)/wm(i)
        dat1m(i) = (-(viscp/wm(i)))+f1*visch
        dat1m(i) = min(dat1m(i),p0)
        gat1s(i) = difsh/hbl(i)/ws(i)
        dat1s(i) = (-(difsp/ws(i)))+f1*difsh
        dat1s(i) = min(dat1s(i),p0)
        gat1t(i) = difth/hbl(i)/ws(i)
        dat1t(i) = (-(diftp/ws(i)))+f1*difth
        dat1t(i) = min(dat1t(i),p0)
      end do
      do ki = 1, nr
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
        end do
      end do
      do i = 1, imt
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        ada1 = 0.d0
        ada2 = 0.d0
        ada3 = 0.d0
        adgm = 0.d0
        adgs = 0.d0
        adgt = 0.d0
        adsig = 0.d0
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        a1 = sig-2.
        a2 = 3.-2.*sig
        a3 = sig-1.
        gm = a1+a2*gat1m(i)+a3*dat1m(i)
        gs = a1+a2*gat1s(i)+a3*dat1s(i)
        gt = a1+a2*gat1t(i)+a3*dat1t(i)
        adgt = adgt+addkm1(i,3)*hbl(i)*ws(i)*sig*sig
        adhbl(i) = adhbl(i)+addkm1(i,3)*ws(i)*sig*(1.+sig*gt)
        adsig = adsig+addkm1(i,3)*hbl(i)*ws(i)*(1.+2*sig*gt)
        adws(i) = adws(i)+addkm1(i,3)*hbl(i)*sig*(1.+sig*gt)
        addkm1(i,3) = 0.d0
        adgs = adgs+addkm1(i,2)*hbl(i)*ws(i)*sig*sig
        adhbl(i) = adhbl(i)+addkm1(i,2)*ws(i)*sig*(1.+sig*gs)
        adsig = adsig+addkm1(i,2)*hbl(i)*ws(i)*(1.+2*sig*gs)
        adws(i) = adws(i)+addkm1(i,2)*hbl(i)*sig*(1.+sig*gs)
        addkm1(i,2) = 0.d0
        adgm = adgm+addkm1(i,1)*hbl(i)*wm(i)*sig*sig
        adhbl(i) = adhbl(i)+addkm1(i,1)*wm(i)*sig*(1.+sig*gm)
        adsig = adsig+addkm1(i,1)*hbl(i)*wm(i)*(1.+2*sig*gm)
        adwm(i) = adwm(i)+addkm1(i,1)*hbl(i)*sig*(1.+sig*gm)
        addkm1(i,1) = 0.d0
        ada1 = ada1+adgt
        ada2 = ada2+adgt*gat1t(i)
        ada3 = ada3+adgt*dat1t(i)
        addat1t(i) = addat1t(i)+adgt*a3
        adgat1t(i) = adgat1t(i)+adgt*a2
        adgt = 0.d0
        ada1 = ada1+adgs
        ada2 = ada2+adgs*gat1s(i)
        ada3 = ada3+adgs*dat1s(i)
        addat1s(i) = addat1s(i)+adgs*a3
        adgat1s(i) = adgat1s(i)+adgs*a2
        adgs = 0.d0
        ada1 = ada1+adgm
        ada2 = ada2+adgm*gat1m(i)
        ada3 = ada3+adgm*dat1m(i)
        addat1m(i) = addat1m(i)+adgm*a3
        adgat1m(i) = adgat1m(i)+adgm*a2
        adgm = 0.d0
        adsig = adsig+ada3
        ada3 = 0.d0
        adsig = adsig-2*ada2
        ada2 = 0.d0
        adsig = adsig+ada1
        ada1 = 0.d0
        adhbl(i) = adhbl(i)+adsig*(zgrid(kbl(i)-1)/(hbl(i)*hbl(i)))
        adsig = 0.d0
      end do
      call adwscale( sigma,hbl,ustar,bfsfc,adsigma,adhbl,adustar,
     $adbfsfc,adwm,adws )
      do i = 1, imt
        adsig = 0.d0
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        adsig = adsig+adsigma(i)*(stable(i)+(1.-stable(i))*(0.5+
     $sign(0.5d0,epsilon-sig)))
        adstable(i) = adstable(i)+adsigma(i)*(sig-min(sig,epsilon))
        adsigma(i) = 0.d0
        adhbl(i) = adhbl(i)+adsig*(zgrid(kbl(i)-1)/(hbl(i)*hbl(i)))
        adsig = 0.d0
      end do
      do ki = nr, 1, -1
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
        end do
        call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
        do i = 1, imt
          ada1 = 0.d0
          ada2 = 0.d0
          ada3 = 0.d0
          adgm = 0.d0
          adgs = 0.d0
          adgt = 0.d0
          adsig = 0.d0
          adtempvar = 0.d0
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          a1 = sig-2.
          a2 = 3.-2.*sig
          a3 = sig-1.
          gm = a1+a2*gat1m(i)+a3*dat1m(i)
          gs = a1+a2*gat1s(i)+a3*dat1s(i)
          gt = a1+a2*gat1t(i)+a3*dat1t(i)
          tempvar = ws(i)*hbl(i)
          adstable(i) = adstable(i)-adghat(i,ki)*(cg/max(phepsi,tempvar)
     $)
          adtempvar = adtempvar-adghat(i,ki)*((1.-stable(i))*cg*(0.5-
     $sign(0.5d0,phepsi-tempvar))/(max(phepsi,tempvar)*max(phepsi,
     $tempvar)))
          adghat(i,ki) = 0.d0
          adhbl(i) = adhbl(i)+adtempvar*ws(i)
          adws(i) = adws(i)+adtempvar*hbl(i)
          adtempvar = 0.d0
          adgt = adgt+adblmc(i,ki,3)*hbl(i)*ws(i)*sig*sig
          adhbl(i) = adhbl(i)+adblmc(i,ki,3)*ws(i)*sig*(1.+sig*gt)
          adsig = adsig+adblmc(i,ki,3)*hbl(i)*ws(i)*(1.+2*sig*gt)
          adws(i) = adws(i)+adblmc(i,ki,3)*hbl(i)*sig*(1.+sig*gt)
          adblmc(i,ki,3) = 0.d0
          adgs = adgs+adblmc(i,ki,2)*hbl(i)*ws(i)*sig*sig
          adhbl(i) = adhbl(i)+adblmc(i,ki,2)*ws(i)*sig*(1.+sig*gs)
          adsig = adsig+adblmc(i,ki,2)*hbl(i)*ws(i)*(1.+2*sig*gs)
          adws(i) = adws(i)+adblmc(i,ki,2)*hbl(i)*sig*(1.+sig*gs)
          adblmc(i,ki,2) = 0.d0
          adgm = adgm+adblmc(i,ki,1)*hbl(i)*wm(i)*sig*sig
          adhbl(i) = adhbl(i)+adblmc(i,ki,1)*wm(i)*sig*(1.+sig*gm)
          adsig = adsig+adblmc(i,ki,1)*hbl(i)*wm(i)*(1.+2*sig*gm)
          adwm(i) = adwm(i)+adblmc(i,ki,1)*hbl(i)*sig*(1.+sig*gm)
          adblmc(i,ki,1) = 0.d0
          ada1 = ada1+adgt
          ada2 = ada2+adgt*gat1t(i)
          ada3 = ada3+adgt*dat1t(i)
          addat1t(i) = addat1t(i)+adgt*a3
          adgat1t(i) = adgat1t(i)+adgt*a2
          adgt = 0.d0
          ada1 = ada1+adgs
          ada2 = ada2+adgs*gat1s(i)
          ada3 = ada3+adgs*dat1s(i)
          addat1s(i) = addat1s(i)+adgs*a3
          adgat1s(i) = adgat1s(i)+adgs*a2
          adgs = 0.d0
          ada1 = ada1+adgm
          ada2 = ada2+adgm*gat1m(i)
          ada3 = ada3+adgm*dat1m(i)
          addat1m(i) = addat1m(i)+adgm*a3
          adgat1m(i) = adgat1m(i)+adgm*a2
          adgm = 0.d0
          adsig = adsig+ada3
          ada3 = 0.d0
          adsig = adsig-2*ada2
          ada2 = 0.d0
          adsig = adsig+ada1
          ada1 = 0.d0
          adhbl(i) = adhbl(i)-adsig*(((-zgrid(ki))+0.5*hwide(ki))/
     $(hbl(i)*hbl(i)))
          adsig = 0.d0
        end do
        call adwscale( sigma,hbl,ustar,bfsfc,adsigma,adhbl,adustar,
     $adbfsfc,adwm,adws )
        do i = 1, imt
          adsig = 0.d0
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          adsig = adsig+adsigma(i)*(stable(i)+(1.-stable(i))*(0.5+
     $sign(0.5d0,epsilon-sig)))
          adstable(i) = adstable(i)+adsigma(i)*(sig-min(sig,epsilon))
          adsigma(i) = 0.d0
          adhbl(i) = adhbl(i)-adsig*(((-zgrid(ki))+0.5*hwide(ki))/
     $(hbl(i)*hbl(i)))
          adsig = 0.d0
        end do
      end do
      do ip1 = 1, imt
        wm(ip1) = wmh(ip1,ikey)
      end do
      do ip1 = 1, imt
        ws(ip1) = wsh(ip1,ikey)
      end do
      do i = 1, imt
        addelhat = 0.d0
        addifsh = 0.d0
        addifsp = 0.d0
        addifth = 0.d0
        addiftp = 0.d0
        addvdzdn = 0.d0
        addvdzup = 0.d0
        adf1 = 0.d0
        adr = 0.d0
        advisch = 0.d0
        adviscp = 0.d0
        kn = int(casea(i)+phepsi)*(kbl(i)-1)+(1-int(casea(i)+phepsi))*
     $kbl(i)
        delhat = 0.5*hwide(kn)-zgrid(kn)-hbl(i)
        r = 1.-delhat/hwide(kn)
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        viscp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        difsp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,3)-diffus(i,kn,3))/hwide(kn)
        dvdzdn = (diffus(i,kn,3)-diffus(i,kn+1,3))/hwide(kn+1)
        diftp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        visch = diffus(i,kn,1)+viscp*delhat
        difsh = diffus(i,kn,2)+difsp*delhat
        difth = diffus(i,kn,3)+diftp*delhat
        f1 = stable(i)*conc1*bfsfc(i)/max(ustar(i)**4,phepsi)
        dat1m(i) = (-(viscp/wm(i)))+f1*visch
        dat1s(i) = (-(difsp/ws(i)))+f1*difsh
        dat1t(i) = (-(diftp/ws(i)))+f1*difth
        addat1t(i) = addat1t(i)*(0.5+sign(0.5d0,p0-dat1t(i)))
        addifth = addifth+addat1t(i)*f1
        addiftp = addiftp-addat1t(i)/ws(i)
        adf1 = adf1+addat1t(i)*difth
        adws(i) = adws(i)+addat1t(i)*(diftp/(ws(i)*ws(i)))
        addat1t(i) = 0.d0
        addifth = addifth+adgat1t(i)*(1/hbl(i)/ws(i))
        adhbl(i) = adhbl(i)-adgat1t(i)*(difth/(hbl(i)*hbl(i))/ws(i))
        adws(i) = adws(i)-adgat1t(i)*(difth/hbl(i)/(ws(i)*ws(i)))
        adgat1t(i) = 0.d0
        addat1s(i) = addat1s(i)*(0.5+sign(0.5d0,p0-dat1s(i)))
        addifsh = addifsh+addat1s(i)*f1
        addifsp = addifsp-addat1s(i)/ws(i)
        adf1 = adf1+addat1s(i)*difsh
        adws(i) = adws(i)+addat1s(i)*(difsp/(ws(i)*ws(i)))
        addat1s(i) = 0.d0
        addifsh = addifsh+adgat1s(i)*(1/hbl(i)/ws(i))
        adhbl(i) = adhbl(i)-adgat1s(i)*(difsh/(hbl(i)*hbl(i))/ws(i))
        adws(i) = adws(i)-adgat1s(i)*(difsh/hbl(i)/(ws(i)*ws(i)))
        adgat1s(i) = 0.d0
        addat1m(i) = addat1m(i)*(0.5+sign(0.5d0,p0-dat1m(i)))
        adf1 = adf1+addat1m(i)*visch
        advisch = advisch+addat1m(i)*f1
        adviscp = adviscp-addat1m(i)/wm(i)
        adwm(i) = adwm(i)+addat1m(i)*(viscp/(wm(i)*wm(i)))
        addat1m(i) = 0.d0
        adhbl(i) = adhbl(i)-adgat1m(i)*(visch/(hbl(i)*hbl(i))/wm(i))
        advisch = advisch+adgat1m(i)*(1/hbl(i)/wm(i))
        adwm(i) = adwm(i)-adgat1m(i)*(visch/hbl(i)/(wm(i)*wm(i)))
        adgat1m(i) = 0.d0
        adbfsfc(i) = adbfsfc(i)+adf1*(stable(i)*conc1/max(ustar(i)**4,
     $phepsi))
        adstable(i) = adstable(i)+adf1*(conc1*bfsfc(i)/max(ustar(i)**4,
     $phepsi))
        adustar(i) = adustar(i)-adf1*(4*stable(i)*conc1*bfsfc(i)*(0.5+
     $sign(0.5d0,ustar(i)**4-phepsi))*ustar(i)**3/(max(ustar(i)**4,
     $phepsi)*max(ustar(i)**4,phepsi)))
        adf1 = 0.d0
        addelhat = addelhat+addifth*diftp
        addiffus(i,kn,3) = addiffus(i,kn,3)+addifth
        addiftp = addiftp+addifth*delhat
        addifth = 0.d0
        addelhat = addelhat+addifsh*difsp
        addiffus(i,kn,2) = addiffus(i,kn,2)+addifsh
        addifsp = addifsp+addifsh*delhat
        addifsh = 0.d0
        addelhat = addelhat+advisch*viscp
        addiffus(i,kn,1) = addiffus(i,kn,1)+advisch
        adviscp = adviscp+advisch*delhat
        advisch = 0.d0
        addvdzdn = addvdzdn+0.5*addiftp*r
        addvdzup = addvdzup+0.5*addiftp*(1.-r)
        adr = adr+0.5*addiftp*((-(dvdzup+abs(dvdzup)))+dvdzdn+
     $abs(dvdzdn))
        addvdzdn = addvdzdn+0.5*addiftp*r*sign(1.d0,dvdzdn)
        addvdzup = addvdzup+0.5*addiftp*(1.-r)*sign(1.d0,dvdzup)
        addiftp = 0.d0
        addiffus(i,kn+1,3) = addiffus(i,kn+1,3)-addvdzdn/hwide(kn+1)
        addiffus(i,kn,3) = addiffus(i,kn,3)+addvdzdn/hwide(kn+1)
        addvdzdn = 0.d0
        addiffus(i,kn-1,3) = addiffus(i,kn-1,3)+addvdzup/hwide(kn)
        addiffus(i,kn,3) = addiffus(i,kn,3)-addvdzup/hwide(kn)
        addvdzup = 0.d0
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        addvdzdn = addvdzdn+0.5*addifsp*r
        addvdzup = addvdzup+0.5*addifsp*(1.-r)
        adr = adr+0.5*addifsp*((-(dvdzup+abs(dvdzup)))+dvdzdn+
     $abs(dvdzdn))
        addvdzdn = addvdzdn+0.5*addifsp*r*sign(1.d0,dvdzdn)
        addvdzup = addvdzup+0.5*addifsp*(1.-r)*sign(1.d0,dvdzup)
        addifsp = 0.d0
        addiffus(i,kn+1,2) = addiffus(i,kn+1,2)-addvdzdn/hwide(kn+1)
        addiffus(i,kn,2) = addiffus(i,kn,2)+addvdzdn/hwide(kn+1)
        addvdzdn = 0.d0
        addiffus(i,kn-1,2) = addiffus(i,kn-1,2)+addvdzup/hwide(kn)
        addiffus(i,kn,2) = addiffus(i,kn,2)-addvdzup/hwide(kn)
        addvdzup = 0.d0
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        addvdzdn = addvdzdn+0.5*adviscp*r
        addvdzup = addvdzup+0.5*adviscp*(1.-r)
        adr = adr+0.5*adviscp*((-(dvdzup+abs(dvdzup)))+dvdzdn+
     $abs(dvdzdn))
        addvdzdn = addvdzdn+0.5*adviscp*r*sign(1.d0,dvdzdn)
        addvdzup = addvdzup+0.5*adviscp*(1.-r)*sign(1.d0,dvdzup)
        adviscp = 0.d0
        addiffus(i,kn+1,1) = addiffus(i,kn+1,1)-addvdzdn/hwide(kn+1)
        addiffus(i,kn,1) = addiffus(i,kn,1)+addvdzdn/hwide(kn+1)
        addvdzdn = 0.d0
        addiffus(i,kn-1,1) = addiffus(i,kn-1,1)+addvdzup/hwide(kn)
        addiffus(i,kn,1) = addiffus(i,kn,1)-addvdzup/hwide(kn)
        addvdzup = 0.d0
        addelhat = addelhat-adr/hwide(kn)
        adr = 0.d0
        adhbl(i) = adhbl(i)-addelhat
        addelhat = 0.d0
      end do
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        adws(i) = adws(i)*(1+(0.5-sign(0.5d0,phepsi-abs(ws(i))))*
     $sign(eins,ws(i))*sign(1.d0,ws(i)))
        adws(i) = 0.d0
        adwm(i) = adwm(i)*(1+(0.5-sign(0.5d0,phepsi-abs(wm(i))))*
     $sign(eins,wm(i))*sign(1.d0,wm(i)))
        adwm(i) = 0.d0
      end do
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      call adwscale( sigma,hbl,ustar,bfsfc,adsigma,adhbl,adustar,
     $adbfsfc,adwm,adws )
      do i = 1, imt
        adstable(i) = adstable(i)+adsigma(i)*(1-epsilon)
        adsigma(i) = 0.d0
      end do

      end


      subroutine adcalc_common_factors( bi, bj, imin, imax, jmin, jmax, 
     $k, adutrans, advtrans, adrtrans )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C define local variables
C==============================================
      integer i
      integer j
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          xa(i,j) = dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
          ya(i,j) = dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adwvel(i,j,k,bi,bj) = adwvel(i,j,k,bi,bj)+adrtrans(i,j)*ra(i,
     $j,bi,bj)
          adrtrans(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advtrans(i,j)*ya(i,
     $j)
          advtrans(i,j) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adutrans(i,j)*xa(i,
     $j)
          adutrans(i,j) = 0.d0
        end do
      end do

      end


      subroutine adcalc_diffusivity( bi, bj, imin, imax, jmin, jmax, k, 
     $maskc, maskup, adkappart, adkappars, adkapparu, adkapparv )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          kapparu(i,j,k) = viscar
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          kapparv(i,j,k) = viscar
        end do
      end do
      if (usekpp) then
        call adkpp_calc_diff( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $kapparu,kapparv,adkappart,adkappars,adkapparu,adkapparv )
      endif
      if (usegmredi) then
        call adgmredi_calc_diff( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $adkappart,adkappars )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adkapparv(i,j,k) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkapparu(i,j,k) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkappars(i,j,k) = adkappars(i,j,k)*maskc(i,j)*maskup(i,j)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkappart(i,j,k) = adkappart(i,j,k)*maskc(i,j)*maskup(i,j)
        end do
      end do

      end


      subroutine adcalc_div_ghat( bi, bj, k, xa, ya, adcg2d_b )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adcg2d_b(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      double precision adpf(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adpf(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1, sny
        do i = 1, snx
          adpf(i,j+1) = adpf(i,j+1)+adcg2d_b(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adcg2d_b(i,j,bi,bj)
        end do
      end do
      if (implicdiv2dflow .eq. 1.) then
        do j = 1, sny+1
          do i = 1, snx
            adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+adpf(i,j)*(ya(i,
     $j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      else
        do j = 1, sny+1
          do i = 1, snx
            adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+adpf(i,j)*
     $(implicdiv2dflow*ya(i,j)/deltatmom)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adpf(i,j)*((1.-
     $implicdiv2dflow)*ya(i,j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      endif
      do j = 1, sny
        do i = 1, snx
          adpf(i+1,j) = adpf(i+1,j)+adcg2d_b(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adcg2d_b(i,j,bi,bj)
        end do
      end do
      if (implicdiv2dflow .eq. 1.) then
        do j = 1, sny
          do i = 1, snx+1
            adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+adpf(i,j)*(xa(i,
     $j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      else
        do j = 1, sny
          do i = 1, snx+1
            adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+adpf(i,j)*
     $(implicdiv2dflow*xa(i,j)/deltatmom)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adpf(i,j)*((1.-
     $implicdiv2dflow)*xa(i,j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine adcalc_grad_phi_surf( bi, bj, imin, imax, jmin, jmax, 
     $adetafld, adphisurfx, adphisurfy )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /solve_barot/ bo_surf, recip_bo
      double precision bo_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_bo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adetafld(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adetafld(i,j-1,bi,bj) = adetafld(i,j-1,bi,bj)-adphisurfy(i,j)*
     $recip_dyc(i,j,bi,bj)*bo_surf(i,j-1,bi,bj)
          adetafld(i,j,bi,bj) = adetafld(i,j,bi,bj)+adphisurfy(i,j)*
     $recip_dyc(i,j,bi,bj)*bo_surf(i,j,bi,bj)
          adphisurfy(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adetafld(i-1,j,bi,bj) = adetafld(i-1,j,bi,bj)-adphisurfx(i,j)*
     $recip_dxc(i,j,bi,bj)*bo_surf(i-1,j,bi,bj)
          adetafld(i,j,bi,bj) = adetafld(i,j,bi,bj)+adphisurfx(i,j)*
     $recip_dxc(i,j,bi,bj)*bo_surf(i,j,bi,bj)
          adphisurfx(i,j) = 0.d0
        end do
      end do

      end


      subroutine adcalc_gs( bi, bj, imin, imax, jmin, jmax, k, km1, kup,
     $ kdown, xa, ya, utrans, vtrans, rtrans, maskup, maskc, kappars, 
     $adutrans, advtrans, adrtrans, adkappars, adfvers )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adfvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      double precision adaf(1-olx:snx+olx,1-oly:sny+oly)
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision addf4(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsdx(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsdy(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision affacs
      double precision dffacs
      integer i
      integer ip1
      integer ip2
      integer j
      logical top_layer

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adaf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addf4(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addsdx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addsdy(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      affacs = 1.d0
      dffacs = 1.d0
      top_layer = k .eq. 1
      call adexternal_forcing_s( imin,imax,jmin,jmax,bi,bj,k,maskc )
      do j = jmin, jmax-1
        do i = imin, imax-1
          adfmer(i,j+1) = adfmer(i,j+1)-adgs(i,j,k,bi,bj)*
     $(recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adfmer(i,j) = adfmer(i,j)+adgs(i,j,k,bi,bj)*(recip_hfacc(i,j,
     $k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adfvers(i,j,kdown) = adfvers(i,j,kdown)+adgs(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*rkfac
          adfvers(i,j,kup) = adfvers(i,j,kup)-adgs(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*rkfac
          adfzon(i+1,j) = adfzon(i+1,j)-adgs(i,j,k,bi,bj)*
     $(recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adfzon(i,j) = adfzon(i,j)+adgs(i,j,k,bi,bj)*(recip_hfacc(i,j,
     $k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adgs(i,j,k,bi,bj) = 0.d0
        end do
      end do
      if (top_layer) then
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfvers(i,j,kup)*affacs*freesurffac
            adfvers(i,j,kup) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfvers(i,j,kup)*affacs*maskup(i,j)
          addf(i,j) = addf(i,j)+adfvers(i,j,kup)*dffacs*maskup(i,j)
          adfvers(i,j,kup) = 0.d0
        end do
      end do
      if (usekpp) then
        call adkpp_transport_s( imin,imax,jmin,jmax,bi,bj,k,km1,maskc,
     $kappars,adkappars,addf )
      endif
      if (usegmredi) then
        call adgmredi_rtransport( imin,imax,jmin,jmax,bi,bj,k,salt,
     $adsalt,addf )
      endif
      if (implicitdiffusion) then
        do j = jmin, jmax
          do i = imin, imax
            addf(i,j) = 0.d0
          end do
        end do
      else
        do j = jmin, jmax
          do i = imin, imax
            adkappars(i,j,k) = adkappars(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $recip_drc(k)*(salt(i,j,km1,bi,bj)-salt(i,j,k,bi,bj))*rkfac
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+addf(i,j)*ra(i,j,
     $bi,bj)*kappars(i,j,k)*recip_drc(k)*rkfac
            adsalt(i,j,km1,bi,bj) = adsalt(i,j,km1,bi,bj)-addf(i,j)*
     $ra(i,j,bi,bj)*kappars(i,j,k)*recip_drc(k)*rkfac
            addf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adrtrans(i,j) = adrtrans(i,j)+0.5d0*adaf(i,j)*(salt(i,j,k,bi,
     $bj)+salt(i,j,km1,bi,bj))
          adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $rtrans(i,j)
          adsalt(i,j,km1,bi,bj) = adsalt(i,j,km1,bi,bj)+0.5d0*adaf(i,j)*
     $rtrans(i,j)
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfmer(i,j)*affacs
          addf(i,j) = addf(i,j)+adfmer(i,j)*dffacs
          adfmer(i,j) = 0.d0
        end do
      end do
      if (diffk4s .ne. 0.) then
        do j = jmin, jmax
          do i = imin, imax
            addf4(i,j-1) = addf4(i,j-1)-addf(i,j)*ya(i,j)*diffk4s*
     $recip_dyc(i,j,bi,bj)
            addf4(i,j) = addf4(i,j)+addf(i,j)*ya(i,j)*diffk4s*
     $recip_dyc(i,j,bi,bj)
          end do
        end do
      endif
      if (usegmredi) then
        call adgmredi_ytransport( imin,imax,jmin,jmax,bi,bj,k,ya,adsalt,
     $addf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          addsdy(i,j) = addsdy(i,j)-addf(i,j)*diffkhs*ya(i,j)
          addf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adsalt(i,j-1,k,bi,bj) = adsalt(i,j-1,k,bi,bj)+0.5d0*adaf(i,j)*
     $vtrans(i,j)
          adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $vtrans(i,j)
          advtrans(i,j) = advtrans(i,j)+0.5d0*adaf(i,j)*(salt(i,j,k,bi,
     $bj)+salt(i,j-1,k,bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfzon(i,j)*affacs
          addf(i,j) = addf(i,j)+adfzon(i,j)*dffacs
          adfzon(i,j) = 0.d0
        end do
      end do
      if (diffk4s .ne. 0.) then
        do j = jmin, jmax
          do i = imin, imax
            addf4(i-1,j) = addf4(i-1,j)-addf(i,j)*xa(i,j)*diffk4s*
     $recip_dxc(i,j,bi,bj)
            addf4(i,j) = addf4(i,j)+addf(i,j)*xa(i,j)*diffk4s*
     $recip_dxc(i,j,bi,bj)
          end do
        end do
      endif
      if (usegmredi) then
        call adgmredi_xtransport( imin,imax,jmin,jmax,bi,bj,k,xa,adsalt,
     $addf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          addsdx(i,j) = addsdx(i,j)-addf(i,j)*diffkhs*xa(i,j)
          addf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adsalt(i-1,j,k,bi,bj) = adsalt(i-1,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $utrans(i,j)
          adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $utrans(i,j)
          adutrans(i,j) = adutrans(i,j)+0.5d0*adaf(i,j)*(salt(i,j,k,bi,
     $bj)+salt(i-1,j,k,bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      if (diffk4s .ne. 0.) then
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            addsdx(i+1,j) = addsdx(i+1,j)+addf4(i,j)*recip_hfacc(i,j,k,
     $bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*xa(i+1,j)
            addsdx(i,j) = addsdx(i,j)-addf4(i,j)*recip_hfacc(i,j,k,bi,
     $bj)*recip_drf(k)/ra(i,j,bi,bj)*xa(i,j)
            addsdy(i,j+1) = addsdy(i,j+1)+addf4(i,j)*recip_hfacc(i,j,k,
     $bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*ya(i,j+1)
            addsdy(i,j) = addsdy(i,j)-addf4(i,j)*recip_hfacc(i,j,k,bi,
     $bj)*recip_drf(k)/ra(i,j,bi,bj)*ya(i,j)
            addf4(i,j) = 0.d0
          end do
        end do
      endif
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adsalt(i,j-1,k,bi,bj) = adsalt(i,j-1,k,bi,bj)-addsdy(i,j)*
     $recip_dyc(i,j,bi,bj)
          adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+addsdy(i,j)*
     $recip_dyc(i,j,bi,bj)
          addsdy(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adsalt(i-1,j,k,bi,bj) = adsalt(i-1,j,k,bi,bj)-addsdx(i,j)*
     $recip_dxc(i,j,bi,bj)
          adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+addsdx(i,j)*
     $recip_dxc(i,j,bi,bj)
          addsdx(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adfvers(i,j,kup) = 0.d0
        end do
      end do

      end


      subroutine adcalc_gt( bi, bj, imin, imax, jmin, jmax, k, km1, kup,
     $ kdown, xa, ya, utrans, vtrans, rtrans, maskup, maskc, kappart, 
     $adutrans, advtrans, adrtrans, adkappart, adfvert )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adfvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      double precision adaf(1-olx:snx+olx,1-oly:sny+oly)
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision addf4(1-olx:snx+olx,1-oly:sny+oly)
      double precision addtdx(1-olx:snx+olx,1-oly:sny+oly)
      double precision addtdy(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision affact
      double precision dffact
      integer i
      integer ip1
      integer ip2
      integer j
      logical top_layer

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adaf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addf4(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addtdx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addtdy(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      affact = 1.d0
      dffact = 1.d0
      top_layer = k .eq. 1
      call adexternal_forcing_t( imin,imax,jmin,jmax,bi,bj,k,maskc )
      do j = jmin, jmax
        do i = imin, imax
          adfmer(i,j+1) = adfmer(i,j+1)-adgt(i,j,k,bi,bj)*
     $(recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adfmer(i,j) = adfmer(i,j)+adgt(i,j,k,bi,bj)*(recip_hfacc(i,j,
     $k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adfvert(i,j,kdown) = adfvert(i,j,kdown)+adgt(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*rkfac
          adfvert(i,j,kup) = adfvert(i,j,kup)-adgt(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*rkfac
          adfzon(i+1,j) = adfzon(i+1,j)-adgt(i,j,k,bi,bj)*
     $(recip_hfacc(i,j,k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adfzon(i,j) = adfzon(i,j)+adgt(i,j,k,bi,bj)*(recip_hfacc(i,j,
     $k,bi,bj)*recip_drf(k)/ra(i,j,bi,bj))
          adgt(i,j,k,bi,bj) = 0.d0
        end do
      end do
      if (top_layer) then
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfvert(i,j,kup)*affact*freesurffac
            adfvert(i,j,kup) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfvert(i,j,kup)*affact*maskup(i,j)
          addf(i,j) = addf(i,j)+adfvert(i,j,kup)*dffact*maskup(i,j)
          adfvert(i,j,kup) = 0.d0
        end do
      end do
      if (usekpp) then
        call adkpp_transport_t( imin,imax,jmin,jmax,bi,bj,k,km1,maskc,
     $kappart,adkappart,addf )
      endif
      if (usegmredi) then
        call adgmredi_rtransport( imin,imax,jmin,jmax,bi,bj,k,theta,
     $adtheta,addf )
      endif
      if (implicitdiffusion) then
        do j = jmin, jmax
          do i = imin, imax
            addf(i,j) = 0.d0
          end do
        end do
      else
        do j = jmin, jmax
          do i = imin, imax
            adkappart(i,j,k) = adkappart(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $recip_drc(k)*(theta(i,j,km1,bi,bj)-theta(i,j,k,bi,bj))*rkfac
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+addf(i,j)*ra(i,
     $j,bi,bj)*kappart(i,j,k)*recip_drc(k)*rkfac
            adtheta(i,j,km1,bi,bj) = adtheta(i,j,km1,bi,bj)-addf(i,j)*
     $ra(i,j,bi,bj)*kappart(i,j,k)*recip_drc(k)*rkfac
            addf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adrtrans(i,j) = adrtrans(i,j)+0.5d0*adaf(i,j)*(theta(i,j,k,bi,
     $bj)+theta(i,j,km1,bi,bj))
          adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $rtrans(i,j)
          adtheta(i,j,km1,bi,bj) = adtheta(i,j,km1,bi,bj)+0.5d0*adaf(i,
     $j)*rtrans(i,j)
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfmer(i,j)*affact
          addf(i,j) = addf(i,j)+adfmer(i,j)*dffact
          adfmer(i,j) = 0.d0
        end do
      end do
      if (diffk4t .ne. 0.) then
        do j = jmin, jmax
          do i = imin, imax
            addf4(i,j-1) = addf4(i,j-1)-addf(i,j)*ya(i,j)*diffk4t*
     $recip_dyc(i,j,bi,bj)
            addf4(i,j) = addf4(i,j)+addf(i,j)*ya(i,j)*diffk4t*
     $recip_dyc(i,j,bi,bj)
          end do
        end do
      endif
      if (usegmredi) then
        call adgmredi_ytransport( imin,imax,jmin,jmax,bi,bj,k,ya,
     $adtheta,addf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          addtdy(i,j) = addtdy(i,j)-addf(i,j)*diffkht*ya(i,j)
          addf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adtheta(i,j-1,k,bi,bj) = adtheta(i,j-1,k,bi,bj)+0.5d0*adaf(i,
     $j)*vtrans(i,j)
          adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $vtrans(i,j)
          advtrans(i,j) = advtrans(i,j)+0.5d0*adaf(i,j)*(theta(i,j,k,bi,
     $bj)+theta(i,j-1,k,bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfzon(i,j)*affact
          addf(i,j) = addf(i,j)+adfzon(i,j)*dffact
          adfzon(i,j) = 0.d0
        end do
      end do
      if (diffk4t .ne. 0.) then
        do j = jmin, jmax
          do i = imin, imax
            addf4(i-1,j) = addf4(i-1,j)-addf(i,j)*xa(i,j)*diffk4t*
     $recip_dxc(i,j,bi,bj)
            addf4(i,j) = addf4(i,j)+addf(i,j)*xa(i,j)*diffk4t*
     $recip_dxc(i,j,bi,bj)
          end do
        end do
      endif
      if (usegmredi) then
        call adgmredi_xtransport( imin,imax,jmin,jmax,bi,bj,k,xa,
     $adtheta,addf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          addtdx(i,j) = addtdx(i,j)-addf(i,j)*diffkht*xa(i,j)
          addf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adtheta(i-1,j,k,bi,bj) = adtheta(i-1,j,k,bi,bj)+0.5d0*adaf(i,
     $j)*utrans(i,j)
          adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+0.5d0*adaf(i,j)*
     $utrans(i,j)
          adutrans(i,j) = adutrans(i,j)+0.5d0*adaf(i,j)*(theta(i,j,k,bi,
     $bj)+theta(i-1,j,k,bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      if (diffk4t .ne. 0.) then
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            addtdx(i+1,j) = addtdx(i+1,j)+addf4(i,j)*recip_hfacc(i,j,k,
     $bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*xa(i+1,j)
            addtdx(i,j) = addtdx(i,j)-addf4(i,j)*recip_hfacc(i,j,k,bi,
     $bj)*recip_drf(k)/ra(i,j,bi,bj)*xa(i,j)
            addtdy(i,j+1) = addtdy(i,j+1)+addf4(i,j)*recip_hfacc(i,j,k,
     $bi,bj)*recip_drf(k)/ra(i,j,bi,bj)*ya(i,j+1)
            addtdy(i,j) = addtdy(i,j)-addf4(i,j)*recip_hfacc(i,j,k,bi,
     $bj)*recip_drf(k)/ra(i,j,bi,bj)*ya(i,j)
            addf4(i,j) = 0.d0
          end do
        end do
      endif
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adtheta(i,j-1,k,bi,bj) = adtheta(i,j-1,k,bi,bj)-addtdy(i,j)*
     $recip_dyc(i,j,bi,bj)
          adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+addtdy(i,j)*
     $recip_dyc(i,j,bi,bj)
          addtdy(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adtheta(i-1,j,k,bi,bj) = adtheta(i-1,j,k,bi,bj)-addtdx(i,j)*
     $recip_dxc(i,j,bi,bj)
          adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+addtdx(i,j)*
     $recip_dxc(i,j,bi,bj)
          addtdx(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adfvert(i,j,kup) = 0.d0
        end do
      end do

      end


      subroutine adcalc_ivdc( bi, bj, imin, imax, jmin, jmax, k, rhokm1,
     $ rhokp1, adrhokm1, adrhokp1, adkappart, adkappars )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokp1(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokp1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C==============================================
C define external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          if (hfacc(i,j,k,bi,bj) .gt. 0. .and. rhokm1(i,j) .gt. 
     $rhokp1(i,j)) then
            adkappars(i,j,k) = 0.d0
            adkappart(i,j,k) = 0.d0
          endif
        end do
      end do

      end


      subroutine adcalc_mom_rhs( bi, bj, imin, imax, jmin, jmax, k, kup,
     $ kdown, kapparu, kapparv, adphihyd, adkapparu, adkapparv, adfveru,
     $ adfverv )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      double precision pi
      parameter ( pi = 3.1415926535898d0 )
      double precision deg2rad
      parameter ( deg2rad = 2.d0*pi/360.d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /solve_barot/ bo_surf, recip_bo
      double precision bo_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_bo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adfveru(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfverv(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kup

C==============================================
C define local variables
C==============================================
      double precision ab05
      double precision ab15
      double precision adaf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision admt(1-olx:snx+olx,1-oly:sny+oly)
      double precision adpf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adv4f(1-olx:snx+olx,1-oly:sny+oly)
      double precision advf(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision ahdudxfac
      double precision ahdudyfac
      double precision ahdvdxfac
      double precision ahdvdyfac
      double precision ardudrfac
      double precision ardvdrfac
      logical bottomdragterms
      double precision cosfacu(1-oly:sny+oly)
      double precision cosfacv(1-oly:sny+oly)
      double precision fufac
      double precision fvfac
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      double precision hfaczclosede
      double precision hfaczclosedn
      double precision hfaczcloseds
      double precision hfaczclosedw
      double precision hfaczopen
      integer i
      integer ip1
      integer ip2
      integer j
      integer jg
      double precision ke(1-olx:snx+olx,1-oly:sny+oly)
      integer kp1
      double precision maskdown
      double precision mtfacu
      double precision mtfacv
      double precision phxfac
      double precision phyfac
      double precision rdrckp1
      double precision rveldudrfac
      double precision rveldvdrfac
      double precision rvelmaskoverride
      double precision ududxfac
      double precision udvdxfac
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vdudyfac
      double precision vdvdyfac
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision wvelbottomoverride
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adaf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adke(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          admt(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adpf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adv4f(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(nr,k+1)
      rvelmaskoverride = 1.
      if (k .eq. 1) then
        rvelmaskoverride = freesurffac
      endif
      wvelbottomoverride = 1.
      if (k .eq. nr) then
        wvelbottomoverride = 0.
      endif
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          ke(i,j) = 0.25*(uvel(i,j,k,bi,bj)*uvel(i,j,k,bi,bj)+uvel(i+1,
     $j,k,bi,bj)*uvel(i+1,j,k,bi,bj)+vvel(i,j,k,bi,bj)*vvel(i,j,k,bi,bj)
     $+vvel(i,j+1,k,bi,bj)*vvel(i,j+1,k,bi,bj))
        end do
      end do
      do j = 1-oly, sny+oly
        jg = myygloballo+(bj-1)*sny+j-1
        jg = min(max(1,jg),ny)
        if (cospower .ne. 0.) then
          cosfacu(j) = cos(yc(1,j,bi,bj)*deg2rad)**cospower
          cosfacv(j) = cos((yc(1,j,bi,bj)-0.5*dely(jg))*deg2rad)**
     $cospower
        else
          cosfacu(j) = 1.
          cosfacv(j) = 1.
        endif
      end do
      ududxfac = affacmom*1.
      ahdudxfac = vffacmom*1.
      vdudyfac = affacmom*1.
      ahdudyfac = vffacmom*1.
      rveldudrfac = affacmom*1.
      ardudrfac = vffacmom*1.
      mtfacu = mtfacmom*1.
      fufac = cffacmom*1.
      phxfac = pffacmom*1.
      udvdxfac = affacmom*1.
      ahdvdxfac = vffacmom*1.
      vdvdyfac = affacmom*1.
      ahdvdyfac = vffacmom*1.
      rveldvdrfac = affacmom*1.
      ardvdrfac = vffacmom*1.
      mtfacv = mtfacmom*1.
      fvfac = cffacmom*1.
      phyfac = pffacmom*1.
      if (no_slip_bottom) then
        bottomdragterms =  .true. 
      else
        bottomdragterms =  .false. 
      endif
      if (staggertimestep) then
        phxfac = 0.
        phyfac = 0.
      endif
      ab15 = 1.5d0+abeps
      ab05 = (-0.5d0)-abeps
      do i = 1-olx, snx+olx
        hfacz(i,1-oly) = 0.
      end do
      do j = 2-oly, sny+oly
        hfacz(1-olx,j) = 0.
        do i = 2-olx, snx+olx
          hfaczopen = min(hfacw(i,j,k,bi,bj),hfacw(i,j-1,k,bi,bj))
          hfaczopen = min(hfacs(i,j,k,bi,bj),hfaczopen)
          hfaczopen = min(hfacs(i-1,j,k,bi,bj),hfaczopen)
          hfacz(i,j) = hfaczopen
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          xa(i,j) = dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
          ya(i,j) = dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          utrans(i,j) = uvel(i,j,k,bi,bj)*xa(i,j)
          vtrans(i,j) = vvel(i,j,k,bi,bj)*ya(i,j)
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advnm1(i,j,k,bi,bj)
          advnm1(i,j,k,bi,bj) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adunm1(i,j,k,bi,bj)
          adunm1(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          aduveld(i,j,k,bi,bj) = aduveld(i,j,k,bi,bj)-0.5d0*adgvcd(i,j,
     $k,bi,bj)*(fcori(i,j,bi,bj)+fcori(i,j-1,bi,bj))*masks(i,j,k,bi,bj)*
     $fvfac
          adgvcd(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adunm1(i+1,j-1,k,bi,bj) = adunm1(i+1,j-1,k,bi,bj)+0.25d0*
     $aduveld(i,j,k,bi,bj)*(1.d0-rcd)*ab05*masks(i,j,k,bi,bj)
          adunm1(i,j-1,k,bi,bj) = adunm1(i,j-1,k,bi,bj)+0.25d0*
     $aduveld(i,j,k,bi,bj)*(1.d0-rcd)*ab05*masks(i,j,k,bi,bj)
          adunm1(i+1,j,k,bi,bj) = adunm1(i+1,j,k,bi,bj)+0.25d0*
     $aduveld(i,j,k,bi,bj)*(1.d0-rcd)*ab05*masks(i,j,k,bi,bj)
          adunm1(i,j,k,bi,bj) = adunm1(i,j,k,bi,bj)+0.25d0*aduveld(i,j,
     $k,bi,bj)*(1.d0-rcd)*ab05*masks(i,j,k,bi,bj)
          aduvel(i+1,j-1,k,bi,bj) = aduvel(i+1,j-1,k,bi,bj)+0.25d0*
     $aduveld(i,j,k,bi,bj)*(1.d0-rcd)*ab15*masks(i,j,k,bi,bj)
          aduvel(i,j-1,k,bi,bj) = aduvel(i,j-1,k,bi,bj)+0.25d0*
     $aduveld(i,j,k,bi,bj)*(1.d0-rcd)*ab15*masks(i,j,k,bi,bj)
          aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)+0.25d0*
     $aduveld(i,j,k,bi,bj)*(1.d0-rcd)*ab15*masks(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.25d0*aduveld(i,j,
     $k,bi,bj)*(1.d0-rcd)*ab15*masks(i,j,k,bi,bj)
          aduveld(i,j,k,bi,bj) = aduveld(i,j,k,bi,bj)*rcd
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advf(i,j) = advf(i,j)+aduveld(i,j,k,bi,bj)*deltatmom*masks(i,
     $j,k,bi,bj)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i+1,j-1) = adaf(i+1,j-1)+0.25d0*advf(i,j)*masks(i,j,k,bi,
     $bj)
          adaf(i,j-1) = adaf(i,j-1)+0.25d0*advf(i,j)*masks(i,j,k,bi,bj)
          adaf(i+1,j) = adaf(i+1,j)+0.25d0*advf(i,j)*masks(i,j,k,bi,bj)
          adaf(i,j) = adaf(i,j)+0.25d0*advf(i,j)*masks(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.5d0*advf(i,j)*
     $(fcori(i,j,bi,bj)+fcori(i,j-1,bi,bj))
          advf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)+adaf(i,j)
          adpf(i-1,j) = adpf(i-1,j)+adaf(i,j)*maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adaf(i,j)*maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advveld(i,j,k,bi,bj) = advveld(i,j,k,bi,bj)+0.5d0*adgucd(i,j,
     $k,bi,bj)*(fcori(i,j,bi,bj)+fcori(i-1,j,bi,bj))*fufac
          adgucd(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advnm1(i-1,j+1,k,bi,bj) = advnm1(i-1,j+1,k,bi,bj)+0.25d0*
     $advveld(i,j,k,bi,bj)*(1.d0-rcd)*ab05*maskw(i,j,k,bi,bj)
          advnm1(i,j+1,k,bi,bj) = advnm1(i,j+1,k,bi,bj)+0.25d0*
     $advveld(i,j,k,bi,bj)*(1.d0-rcd)*ab05*maskw(i,j,k,bi,bj)
          advnm1(i-1,j,k,bi,bj) = advnm1(i-1,j,k,bi,bj)+0.25d0*
     $advveld(i,j,k,bi,bj)*(1.d0-rcd)*ab05*maskw(i,j,k,bi,bj)
          advnm1(i,j,k,bi,bj) = advnm1(i,j,k,bi,bj)+0.25d0*advveld(i,j,
     $k,bi,bj)*(1.d0-rcd)*ab05*maskw(i,j,k,bi,bj)
          advvel(i-1,j+1,k,bi,bj) = advvel(i-1,j+1,k,bi,bj)+0.25d0*
     $advveld(i,j,k,bi,bj)*(1.d0-rcd)*ab15*maskw(i,j,k,bi,bj)
          advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)+0.25d0*
     $advveld(i,j,k,bi,bj)*(1.d0-rcd)*ab15*maskw(i,j,k,bi,bj)
          advvel(i-1,j,k,bi,bj) = advvel(i-1,j,k,bi,bj)+0.25d0*
     $advveld(i,j,k,bi,bj)*(1.d0-rcd)*ab15*maskw(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.25d0*advveld(i,j,
     $k,bi,bj)*(1.d0-rcd)*ab15*maskw(i,j,k,bi,bj)
          advveld(i,j,k,bi,bj) = advveld(i,j,k,bi,bj)*rcd
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advf(i,j) = advf(i,j)+advveld(i,j,k,bi,bj)*deltatmom
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i-1,j+1) = adaf(i-1,j+1)+0.25d0*advf(i,j)*maskw(i,j,k,bi,
     $bj)
          adaf(i,j+1) = adaf(i,j+1)+0.25d0*advf(i,j)*maskw(i,j,k,bi,bj)
          adaf(i-1,j) = adaf(i-1,j)+0.25d0*advf(i,j)*maskw(i,j,k,bi,bj)
          adaf(i,j) = adaf(i,j)+0.25d0*advf(i,j)*maskw(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-0.5d0*advf(i,j)*
     $(fcori(i,j,bi,bj)+fcori(i-1,j,bi,bj))
          advf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)+adaf(i,j)
          adpf(i,j-1) = adpf(i,j-1)+adaf(i,j)*masks(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adaf(i,j)*masks(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)
          adaf(i,j) = 0.d0
        end do
      end do
      if (staggertimestep) then
        do j = jmin, jmax
          do i = imin, imax
            adphihyd(i,j,k) = adphihyd(i,j,k)+adpf(i,j)
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adpf(i,j)*ab15*
     $bo_surf(i,j,bi,bj)
          adetanm1(i,j,bi,bj) = adetanm1(i,j,bi,bj)+adpf(i,j)*ab05*
     $bo_surf(i,j,bi,bj)
          adpf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
        end do
      end do
      if (usingsphericalpolarmterms) then
        do j = jmin, jmax
          do i = imin, imax
            admt(i,j) = admt(i,j)+adgv(i,j,k,bi,bj)*mtfacv
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            aduvel(i+1,j-1,k,bi,bj) = aduvel(i+1,j-1,k,bi,bj)-0.125d0*
     $admt(i,j)*recip_rsphere*(uvel(i,j,k,bi,bj)+uvel(i+1,j,k,bi,bj)+
     $uvel(i,j-1,k,bi,bj)+uvel(i+1,j-1,k,bi,bj))*tanphiatv(i,j,bi,bj)
            aduvel(i,j-1,k,bi,bj) = aduvel(i,j-1,k,bi,bj)-0.125d0*
     $admt(i,j)*recip_rsphere*(uvel(i,j,k,bi,bj)+uvel(i+1,j,k,bi,bj)+
     $uvel(i,j-1,k,bi,bj)+uvel(i+1,j-1,k,bi,bj))*tanphiatv(i,j,bi,bj)
            aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)-0.125d0*
     $admt(i,j)*recip_rsphere*(uvel(i,j,k,bi,bj)+uvel(i+1,j,k,bi,bj)+
     $uvel(i,j-1,k,bi,bj)+uvel(i+1,j-1,k,bi,bj))*tanphiatv(i,j,bi,bj)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-0.125d0*admt(i,j)*
     $recip_rsphere*(uvel(i,j,k,bi,bj)+uvel(i+1,j,k,bi,bj)+uvel(i,j-1,k,
     $bi,bj)+uvel(i+1,j-1,k,bi,bj))*tanphiatv(i,j,bi,bj)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-0.25d0*admt(i,j)*
     $recip_rsphere*(wvelbottomoverride*(wvel(i,j,kp1,bi,bj)+wvel(i,j-1,
     $kp1,bi,bj))+wvel(i,j,k,bi,bj)+wvel(i,j-1,k,bi,bj))*rkfac*
     $recip_horivertratio
            adwvel(i,j-1,k,bi,bj) = adwvel(i,j-1,k,bi,bj)-0.25d0*admt(i,
     $j)*vvel(i,j,k,bi,bj)*recip_rsphere*rkfac*recip_horivertratio
            adwvel(i,j-1,kp1,bi,bj) = adwvel(i,j-1,kp1,bi,bj)-0.25d0*
     $admt(i,j)*vvel(i,j,k,bi,bj)*recip_rsphere*wvelbottomoverride*
     $rkfac*recip_horivertratio
            adwvel(i,j,k,bi,bj) = adwvel(i,j,k,bi,bj)-0.25d0*admt(i,j)*
     $vvel(i,j,k,bi,bj)*recip_rsphere*rkfac*recip_horivertratio
            adwvel(i,j,kp1,bi,bj) = adwvel(i,j,kp1,bi,bj)-0.25d0*admt(i,
     $j)*vvel(i,j,k,bi,bj)*recip_rsphere*wvelbottomoverride*rkfac*
     $recip_horivertratio
            admt(i,j) = 0.d0
          end do
        end do
      endif
      call adexternal_forcing_v( imin,imax,jmin,jmax,bi,bj,k )
      if (bottomdragterms) then
        rdrckp1 = recip_drc(kp1)
        if (k .eq. nr) then
          rdrckp1 = recip_drf(k)
        endif
        do j = jmin, jmax
          do i = imin, imax
            maskdown = masks(i,j,kp1,bi,bj)
            if (k .eq. nr) then
              maskdown = 0.
            endif
            adkapparv(i,j,kp1) = adkapparv(i,j,kp1)-2*adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*rkfac*rdrckp1*(1.-maskdown)*
     $vvel(i,j,k,bi,bj)
            adke(i,j-1) = adke(i,j-1)-adgv(i,j,k,bi,bj)*recip_hfacs(i,j,
     $k,bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+
     $ke(i,j-1)))*(1.-maskdown)*vvel(i,j,k,bi,bj)
            adke(i,j) = adke(i,j)-adgv(i,j,k,bi,bj)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+ke(i,
     $j-1)))*(1.-maskdown)*vvel(i,j,k,bi,bj)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*(2.*kapparv(i,j,kp1)*rkfac*
     $rdrckp1+bottomdraglinear+bottomdragquadratic*sqrt(ke(i,j)+ke(i,j-
     $1)))*(1.-maskdown)
          end do
        end do
      endif
      if (no_slip_sides) then
        do j = jmin, jmax
          do i = imin, imax
            hfaczclosedw = hfacs(i,j,k,bi,bj)-hfacz(i,j)
            hfaczclosede = hfacs(i,j,k,bi,bj)-hfacz(i+1,j)
            adv4f(i,j) = adv4f(i,j)+2.*adgv(i,j,k,bi,bj)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)/ras(i,j,bi,bj)*(hfaczclosedw*dyu(i,j,bi,
     $bj)*recip_dxv(i,j,bi,bj)+hfaczclosede*dyu(i+1,j,bi,bj)*
     $recip_dxv(i+1,j,bi,bj))*rkfac*drf(k)*visca4*cosfacv(j)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-2.*adgv(i,j,k,bi,
     $bj)*recip_hfacs(i,j,k,bi,bj)*recip_drf(k)/ras(i,j,bi,bj)*
     $(hfaczclosedw*dyu(i,j,bi,bj)*recip_dxv(i,j,bi,bj)+hfaczclosede*
     $dyu(i+1,j,bi,bj)*recip_dxv(i+1,j,bi,bj))*rkfac*drf(k)*viscah*
     $cosfacv(j)
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adfmer(i,j-1) = adfmer(i,j-1)+adgv(i,j,k,bi,bj)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adfmer(i,j) = adfmer(i,j)-adgv(i,j,k,bi,bj)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adfverv(i,j,kdown) = adfverv(i,j,kdown)+adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*rkfac
          adfverv(i,j,kup) = adfverv(i,j,kup)-adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*rkfac
          adfzon(i+1,j) = adfzon(i+1,j)-adgv(i,j,k,bi,bj)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adfzon(i,j) = adfzon(i,j)+adgv(i,j,k,bi,bj)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)+adgv(i,j,k,bi,bj)*phyfac
          adgv(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adphihyd(i,j-1,k) = adphihyd(i,j-1,k)+adpf(i,j)*recip_dyc(i,j,
     $bi,bj)
          adphihyd(i,j,k) = adphihyd(i,j,k)-adpf(i,j)*recip_dyc(i,j,bi,
     $bj)
          adpf(i,j) = 0.d0
        end do
      end do
      if (implicitviscosity) then
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfverv(i,j,kdown)*rveldvdrfac
            adfverv(i,j,kdown) = 0.d0
          end do
        end do
      else
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfverv(i,j,kdown)*rveldvdrfac
            advf(i,j) = advf(i,j)+adfverv(i,j,kdown)*ardvdrfac
            adfverv(i,j,kdown) = 0.d0
          end do
        end do
      endif
      if ( .not. implicitviscosity) then
        do j = jmin, jmax
          do i = imin, imax
            adkapparv(i,j,kp1) = adkapparv(i,j,kp1)-advf(i,j)*ras(i,j,
     $bi,bj)*(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))*rkfac*
     $recip_drc(kp1)*masks(i,j,kp1,bi,bj)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-advf(i,j)*
     $kapparv(i,j,kp1)*ras(i,j,bi,bj)*rkfac*recip_drc(kp1)*masks(i,j,
     $kp1,bi,bj)
            advvel(i,j,kp1,bi,bj) = advvel(i,j,kp1,bi,bj)+advf(i,j)*
     $kapparv(i,j,kp1)*ras(i,j,bi,bj)*rkfac*recip_drc(kp1)*masks(i,j,
     $kp1,bi,bj)
            advf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.25d0*adaf(i,j)*
     $wvelbottomoverride*(wvel(i,j,kp1,bi,bj)*ra(i,j,bi,bj)+wvel(i,j-1,
     $kp1,bi,bj)*ra(i,j-1,bi,bj))
          advvel(i,j,kp1,bi,bj) = advvel(i,j,kp1,bi,bj)+0.25d0*adaf(i,j)
     $*wvelbottomoverride*(wvel(i,j,kp1,bi,bj)*ra(i,j,bi,bj)+wvel(i,j-1,
     $kp1,bi,bj)*ra(i,j-1,bi,bj))
          adwvel(i,j-1,kp1,bi,bj) = adwvel(i,j-1,kp1,bi,bj)+0.25d0*
     $adaf(i,j)*wvelbottomoverride*ra(i,j-1,bi,bj)*(vvel(i,j,kp1,bi,bj)+
     $vvel(i,j,k,bi,bj))
          adwvel(i,j,kp1,bi,bj) = adwvel(i,j,kp1,bi,bj)+0.25d0*adaf(i,j)
     $*wvelbottomoverride*ra(i,j,bi,bj)*(vvel(i,j,kp1,bi,bj)+vvel(i,j,k,
     $bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      if (k .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.5*adfverv(i,j,
     $kup)*rvelmaskoverride*(wvel(i,j,k,bi,bj)*ra(i,j,bi,bj)+wvel(i,j-1,
     $k,bi,bj)*ra(i,j-1,bi,bj))
            adwvel(i,j-1,k,bi,bj) = adwvel(i,j-1,k,bi,bj)+0.5*adfverv(i,
     $j,kup)*rvelmaskoverride*ra(i,j-1,bi,bj)*vvel(i,j,k,bi,bj)
            adwvel(i,j,k,bi,bj) = adwvel(i,j,k,bi,bj)+0.5*adfverv(i,j,
     $kup)*rvelmaskoverride*ra(i,j,bi,bj)*vvel(i,j,k,bi,bj)
            adfverv(i,j,kup) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfmer(i,j)*vdvdyfac
          advf(i,j) = advf(i,j)+adfmer(i,j)*ahdvdyfac
          adfmer(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adv4f(i,j+1) = adv4f(i,j+1)+advf(i,j)*dxf(i,j,bi,bj)*drf(k)*
     $hfacc(i,j,k,bi,bj)*visca4*cosfacu(j)*recip_dyf(i,j,bi,bj)
          adv4f(i,j) = adv4f(i,j)-advf(i,j)*dxf(i,j,bi,bj)*drf(k)*
     $hfacc(i,j,k,bi,bj)*visca4*cosfacu(j)*recip_dyf(i,j,bi,bj)
          advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)-advf(i,j)*dxf(i,
     $j,bi,bj)*drf(k)*hfacc(i,j,k,bi,bj)*viscah*cosfacu(j)*recip_dyf(i,
     $j,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advf(i,j)*dxf(i,j,
     $bi,bj)*drf(k)*hfacc(i,j,k,bi,bj)*viscah*cosfacu(j)*recip_dyf(i,j,
     $bi,bj)
          advf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advtrans(i,j+1) = advtrans(i,j+1)+0.25d0*adaf(i,j)*(vvel(i,j,
     $k,bi,bj)+vvel(i,j+1,k,bi,bj))
          advtrans(i,j) = advtrans(i,j)+0.25d0*adaf(i,j)*(vvel(i,j,k,bi,
     $bj)+vvel(i,j+1,k,bi,bj))
          advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)+0.25d0*adaf(i,j)
     $*(vtrans(i,j)+vtrans(i,j+1))
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.25d0*adaf(i,j)*
     $(vtrans(i,j)+vtrans(i,j+1))
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfzon(i,j)*udvdxfac
          advf(i,j) = advf(i,j)+adfzon(i,j)*ahdvdxfac
          adfzon(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adv4f(i-1,j) = adv4f(i-1,j)-advf(i,j)*dyu(i,j,bi,bj)*drf(k)*
     $hfacz(i,j)*visca4*cosfacv(j)*recip_dxv(i,j,bi,bj)
          adv4f(i,j) = adv4f(i,j)+advf(i,j)*dyu(i,j,bi,bj)*drf(k)*
     $hfacz(i,j)*visca4*cosfacv(j)*recip_dxv(i,j,bi,bj)
          advvel(i-1,j,k,bi,bj) = advvel(i-1,j,k,bi,bj)+advf(i,j)*dyu(i,
     $j,bi,bj)*drf(k)*hfacz(i,j)*viscah*cosfacv(j)*recip_dxv(i,j,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-advf(i,j)*dyu(i,j,
     $bi,bj)*drf(k)*hfacz(i,j)*viscah*cosfacv(j)*recip_dxv(i,j,bi,bj)
          advf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adutrans(i,j-1) = adutrans(i,j-1)+0.25d0*adaf(i,j)*(vvel(i,j,
     $k,bi,bj)+vvel(i-1,j,k,bi,bj))
          adutrans(i,j) = adutrans(i,j)+0.25d0*adaf(i,j)*(vvel(i,j,k,bi,
     $bj)+vvel(i-1,j,k,bi,bj))
          advvel(i-1,j,k,bi,bj) = advvel(i-1,j,k,bi,bj)+0.25d0*adaf(i,j)
     $*(utrans(i,j)+utrans(i,j-1))
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.25d0*adaf(i,j)*
     $(utrans(i,j)+utrans(i,j-1))
          adaf(i,j) = 0.d0
        end do
      end do
      if (no_slip_sides) then
        do j = 0, sny+2
          do i = 0, snx+1
            hfaczclosedw = hfacs(i,j,k,bi,bj)-hfacz(i,j)
            hfaczclosede = hfacs(i,j,k,bi,bj)-hfacz(i+1,j)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-2*adv4f(i,j)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*
     $(hfaczclosedw*dyu(i,j,bi,bj)*recip_dxv(i,j,bi,bj)+hfaczclosede*
     $dyu(i+1,j,bi,bj)*recip_dxv(i+1,j,bi,bj))*drf(k)*masks(i,j,k,bi,bj)
          end do
        end do
      endif
      do j = 0, sny+2
        do i = 0, snx+1
          adfmer(i,j-1) = adfmer(i,j-1)-adv4f(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adfmer(i,j) = adfmer(i,j)+adv4f(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adfzon(i+1,j) = adfzon(i+1,j)+adv4f(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adfzon(i,j) = adfzon(i,j)-adv4f(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adv4f(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx
          advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)+adfmer(i,j)*
     $drf(k)*hfacc(i,j,k,bi,bj)*dxf(i,j,bi,bj)*recip_dyf(i,j,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-adfmer(i,j)*drf(k)*
     $hfacc(i,j,k,bi,bj)*dxf(i,j,bi,bj)*recip_dyf(i,j,bi,bj)
          adfmer(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          advvel(i-1,j,k,bi,bj) = advvel(i-1,j,k,bi,bj)-adfzon(i,j)*
     $drf(k)*hfacz(i,j)*dyu(i,j,bi,bj)*recip_dxv(i,j,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adfzon(i,j)*drf(k)*
     $hfacz(i,j)*dyu(i,j,bi,bj)*recip_dxv(i,j,bi,bj)
          adfzon(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
        end do
      end do
      if (usingsphericalpolarmterms) then
        do j = jmin, jmax
          do i = imin, imax
            admt(i,j) = admt(i,j)+adgu(i,j,k,bi,bj)*mtfacu
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.25d0*admt(i,j)*
     $recip_rsphere*(vvel(i,j,k,bi,bj)+vvel(i-1,j,k,bi,bj)+vvel(i,j+1,k,
     $bi,bj)+vvel(i-1,j+1,k,bi,bj))*tanphiatu(i,j,bi,bj)
            advvel(i-1,j+1,k,bi,bj) = advvel(i-1,j+1,k,bi,bj)+0.25d0*
     $admt(i,j)*uvel(i,j,k,bi,bj)*recip_rsphere*tanphiatu(i,j,bi,bj)
            advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)+0.25d0*admt(i,
     $j)*uvel(i,j,k,bi,bj)*recip_rsphere*tanphiatu(i,j,bi,bj)
            advvel(i-1,j,k,bi,bj) = advvel(i-1,j,k,bi,bj)+0.25d0*admt(i,
     $j)*uvel(i,j,k,bi,bj)*recip_rsphere*tanphiatu(i,j,bi,bj)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.25d0*admt(i,j)*
     $uvel(i,j,k,bi,bj)*recip_rsphere*tanphiatu(i,j,bi,bj)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-0.25d0*admt(i,j)*
     $recip_rsphere*(wvelbottomoverride*(wvel(i-1,j,kp1,bi,bj)+wvel(i,j,
     $kp1,bi,bj))+wvel(i-1,j,k,bi,bj)+wvel(i,j,k,bi,bj))*rkfac*
     $recip_horivertratio
            adwvel(i-1,j,k,bi,bj) = adwvel(i-1,j,k,bi,bj)-0.25d0*admt(i,
     $j)*uvel(i,j,k,bi,bj)*recip_rsphere*rkfac*recip_horivertratio
            adwvel(i,j,k,bi,bj) = adwvel(i,j,k,bi,bj)-0.25d0*admt(i,j)*
     $uvel(i,j,k,bi,bj)*recip_rsphere*rkfac*recip_horivertratio
            adwvel(i-1,j,kp1,bi,bj) = adwvel(i-1,j,kp1,bi,bj)-0.25d0*
     $admt(i,j)*uvel(i,j,k,bi,bj)*recip_rsphere*wvelbottomoverride*
     $rkfac*recip_horivertratio
            adwvel(i,j,kp1,bi,bj) = adwvel(i,j,kp1,bi,bj)-0.25d0*admt(i,
     $j)*uvel(i,j,k,bi,bj)*recip_rsphere*wvelbottomoverride*rkfac*
     $recip_horivertratio
            admt(i,j) = 0.d0
          end do
        end do
      endif
      call adexternal_forcing_u( imin,imax,jmin,jmax,bi,bj,k )
      if (bottomdragterms) then
        rdrckp1 = recip_drc(kp1)
        if (k .eq. nr) then
          rdrckp1 = recip_drf(k)
        endif
        do j = jmin, jmax
          do i = imin, imax
            maskdown = maskw(i,j,kp1,bi,bj)
            if (k .eq. nr) then
              maskdown = 0.
            endif
            adkapparu(i,j,kp1) = adkapparu(i,j,kp1)-2*adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*rkfac*rdrckp1*(1.-maskdown)*
     $uvel(i,j,k,bi,bj)
            adke(i-1,j) = adke(i-1,j)-adgu(i,j,k,bi,bj)*recip_hfacw(i,j,
     $k,bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+
     $ke(i-1,j)))*(1.-maskdown)*uvel(i,j,k,bi,bj)
            adke(i,j) = adke(i,j)-adgu(i,j,k,bi,bj)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+ke(i-
     $1,j)))*(1.-maskdown)*uvel(i,j,k,bi,bj)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*(2.*kapparu(i,j,kp1)*rkfac*
     $rdrckp1+bottomdraglinear+bottomdragquadratic*sqrt(ke(i,j)+ke(i-1,
     $j)))*(1.-maskdown)
          end do
        end do
      endif
      if (no_slip_sides) then
        do j = jmin, jmax
          do i = imin, imax
            hfaczcloseds = hfacw(i,j,k,bi,bj)-hfacz(i,j)
            hfaczclosedn = hfacw(i,j,k,bi,bj)-hfacz(i,j+1)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-2.*adgu(i,j,k,bi,
     $bj)*recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*
     $(hfaczcloseds*dxv(i,j,bi,bj)*recip_dyu(i,j,bi,bj)+hfaczclosedn*
     $dxv(i,j+1,bi,bj)*recip_dyu(i,j+1,bi,bj))*drf(k)*viscah*cosfacu(j)
            adv4f(i,j) = adv4f(i,j)+2.*adgu(i,j,k,bi,bj)*recip_hfacw(i,
     $j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*(hfaczcloseds*dxv(i,
     $j,bi,bj)*recip_dyu(i,j,bi,bj)+hfaczclosedn*dxv(i,j+1,bi,bj)*
     $recip_dyu(i,j+1,bi,bj))*drf(k)*visca4*cosfacu(j)
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adfmer(i,j+1) = adfmer(i,j+1)-adgu(i,j,k,bi,bj)*recip_hfacw(i,
     $j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adfmer(i,j) = adfmer(i,j)+adgu(i,j,k,bi,bj)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adfveru(i,j,kdown) = adfveru(i,j,kdown)+adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*rkfac
          adfveru(i,j,kup) = adfveru(i,j,kup)-adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*rkfac
          adfzon(i-1,j) = adfzon(i-1,j)+adgu(i,j,k,bi,bj)*recip_hfacw(i,
     $j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adfzon(i,j) = adfzon(i,j)-adgu(i,j,k,bi,bj)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)+adgu(i,j,k,bi,bj)*phxfac
          adgu(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adphihyd(i-1,j,k) = adphihyd(i-1,j,k)+adpf(i,j)*recip_dxc(i,j,
     $bi,bj)
          adphihyd(i,j,k) = adphihyd(i,j,k)-adpf(i,j)*recip_dxc(i,j,bi,
     $bj)
          adpf(i,j) = 0.d0
        end do
      end do
      if (implicitviscosity) then
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfveru(i,j,kdown)*rveldudrfac
            adfveru(i,j,kdown) = 0.d0
          end do
        end do
      else
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfveru(i,j,kdown)*rveldudrfac
            advf(i,j) = advf(i,j)+adfveru(i,j,kdown)*ardudrfac
            adfveru(i,j,kdown) = 0.d0
          end do
        end do
      endif
      if ( .not. implicitviscosity) then
        do j = jmin, jmax
          do i = imin, imax
            adkapparu(i,j,kp1) = adkapparu(i,j,kp1)-advf(i,j)*raw(i,j,
     $bi,bj)*(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))*rkfac*
     $recip_drc(kp1)*maskw(i,j,kp1,bi,bj)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-advf(i,j)*
     $kapparu(i,j,kp1)*raw(i,j,bi,bj)*rkfac*recip_drc(kp1)*maskw(i,j,
     $kp1,bi,bj)
            aduvel(i,j,kp1,bi,bj) = aduvel(i,j,kp1,bi,bj)+advf(i,j)*
     $kapparu(i,j,kp1)*raw(i,j,bi,bj)*rkfac*recip_drc(kp1)*maskw(i,j,
     $kp1,bi,bj)
            advf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.25d0*adaf(i,j)*
     $wvelbottomoverride*(wvel(i,j,kp1,bi,bj)*ra(i,j,bi,bj)+wvel(i-1,j,
     $kp1,bi,bj)*ra(i-1,j,bi,bj))
          aduvel(i,j,kp1,bi,bj) = aduvel(i,j,kp1,bi,bj)+0.25d0*adaf(i,j)
     $*wvelbottomoverride*(wvel(i,j,kp1,bi,bj)*ra(i,j,bi,bj)+wvel(i-1,j,
     $kp1,bi,bj)*ra(i-1,j,bi,bj))
          adwvel(i-1,j,kp1,bi,bj) = adwvel(i-1,j,kp1,bi,bj)+0.25d0*
     $adaf(i,j)*wvelbottomoverride*ra(i-1,j,bi,bj)*(uvel(i,j,kp1,bi,bj)+
     $uvel(i,j,k,bi,bj))
          adwvel(i,j,kp1,bi,bj) = adwvel(i,j,kp1,bi,bj)+0.25d0*adaf(i,j)
     $*wvelbottomoverride*ra(i,j,bi,bj)*(uvel(i,j,kp1,bi,bj)+uvel(i,j,k,
     $bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      if (k .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.5*adfveru(i,j,
     $kup)*rvelmaskoverride*(wvel(i,j,k,bi,bj)*ra(i,j,bi,bj)+wvel(i-1,j,
     $k,bi,bj)*ra(i-1,j,bi,bj))
            adwvel(i-1,j,k,bi,bj) = adwvel(i-1,j,k,bi,bj)+0.5*adfveru(i,
     $j,kup)*rvelmaskoverride*ra(i-1,j,bi,bj)*uvel(i,j,k,bi,bj)
            adwvel(i,j,k,bi,bj) = adwvel(i,j,k,bi,bj)+0.5*adfveru(i,j,
     $kup)*rvelmaskoverride*ra(i,j,bi,bj)*uvel(i,j,k,bi,bj)
            adfveru(i,j,kup) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfmer(i,j)*vdudyfac
          advf(i,j) = advf(i,j)+adfmer(i,j)*ahdudyfac
          adfmer(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          aduvel(i,j-1,k,bi,bj) = aduvel(i,j-1,k,bi,bj)+advf(i,j)*dxv(i,
     $j,bi,bj)*drf(k)*hfacz(i,j)*viscah*cosfacv(j)*recip_dyu(i,j,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-advf(i,j)*dxv(i,j,
     $bi,bj)*drf(k)*hfacz(i,j)*viscah*cosfacv(j)*recip_dyu(i,j,bi,bj)
          adv4f(i,j-1) = adv4f(i,j-1)-advf(i,j)*dxv(i,j,bi,bj)*drf(k)*
     $hfacz(i,j)*visca4*cosfacv(j)*recip_dyu(i,j,bi,bj)
          adv4f(i,j) = adv4f(i,j)+advf(i,j)*dxv(i,j,bi,bj)*drf(k)*
     $hfacz(i,j)*visca4*cosfacv(j)*recip_dyu(i,j,bi,bj)
          advf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          aduvel(i,j-1,k,bi,bj) = aduvel(i,j-1,k,bi,bj)+0.25d0*adaf(i,j)
     $*(vtrans(i,j)+vtrans(i-1,j))
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.25d0*adaf(i,j)*
     $(vtrans(i,j)+vtrans(i-1,j))
          advtrans(i-1,j) = advtrans(i-1,j)+0.25d0*adaf(i,j)*(uvel(i,j,
     $k,bi,bj)+uvel(i,j-1,k,bi,bj))
          advtrans(i,j) = advtrans(i,j)+0.25d0*adaf(i,j)*(uvel(i,j,k,bi,
     $bj)+uvel(i,j-1,k,bi,bj))
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfzon(i,j)*ududxfac
          advf(i,j) = advf(i,j)+adfzon(i,j)*ahdudxfac
          adfzon(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)-advf(i,j)*dyf(i,
     $j,bi,bj)*drf(k)*hfacc(i,j,k,bi,bj)*viscah*cosfacu(j)*recip_dxf(i,
     $j,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+advf(i,j)*dyf(i,j,
     $bi,bj)*drf(k)*hfacc(i,j,k,bi,bj)*viscah*cosfacu(j)*recip_dxf(i,j,
     $bi,bj)
          adv4f(i+1,j) = adv4f(i+1,j)+advf(i,j)*dyf(i,j,bi,bj)*drf(k)*
     $hfacc(i,j,k,bi,bj)*visca4*cosfacu(j)*recip_dxf(i,j,bi,bj)
          adv4f(i,j) = adv4f(i,j)-advf(i,j)*dyf(i,j,bi,bj)*drf(k)*
     $hfacc(i,j,k,bi,bj)*visca4*cosfacu(j)*recip_dxf(i,j,bi,bj)
          advf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adutrans(i+1,j) = adutrans(i+1,j)+0.25d0*adaf(i,j)*(uvel(i,j,
     $k,bi,bj)+uvel(i+1,j,k,bi,bj))
          adutrans(i,j) = adutrans(i,j)+0.25d0*adaf(i,j)*(uvel(i,j,k,bi,
     $bj)+uvel(i+1,j,k,bi,bj))
          aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)+0.25d0*adaf(i,j)
     $*(utrans(i,j)+utrans(i+1,j))
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.25d0*adaf(i,j)*
     $(utrans(i,j)+utrans(i+1,j))
          adaf(i,j) = 0.d0
        end do
      end do
      if (no_slip_sides) then
        do j = 0, sny+1
          do i = 0, snx+2
            hfaczcloseds = hfacw(i,j,k,bi,bj)-hfacz(i,j)
            hfaczclosedn = hfacw(i,j,k,bi,bj)-hfacz(i,j+1)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-2*adv4f(i,j)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*
     $(hfaczcloseds*dxv(i,j,bi,bj)*recip_dyu(i,j,bi,bj)+hfaczclosedn*
     $dxv(i,j+1,bi,bj)*recip_dyu(i,j+1,bi,bj))*drf(k)*maskw(i,j,k,bi,bj)
          end do
        end do
      endif
      do j = 0, sny+1
        do i = 0, snx+2
          adfmer(i,j+1) = adfmer(i,j+1)+adv4f(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adfmer(i,j) = adfmer(i,j)-adv4f(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adfzon(i-1,j) = adfzon(i-1,j)-adv4f(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adfzon(i,j) = adfzon(i,j)+adv4f(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adv4f(i,j) = 0.d0
        end do
      end do
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          aduvel(i,j-1,k,bi,bj) = aduvel(i,j-1,k,bi,bj)-adfmer(i,j)*
     $drf(k)*hfacz(i,j)*dxv(i,j,bi,bj)*recip_dyu(i,j,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adfmer(i,j)*drf(k)*
     $hfacz(i,j)*dxv(i,j,bi,bj)*recip_dyu(i,j,bi,bj)
          adfmer(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx-1
          aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)+adfzon(i,j)*
     $drf(k)*hfacc(i,j,k,bi,bj)*dyf(i,j,bi,bj)*recip_dxf(i,j,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-adfzon(i,j)*drf(k)*
     $hfacc(i,j,k,bi,bj)*dyf(i,j,bi,bj)*recip_dxf(i,j,bi,bj)
          adfzon(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advtrans(i,j)*ya(i,
     $j)
          advtrans(i,j) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adutrans(i,j)*xa(i,
     $j)
          adutrans(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)+0.5*adke(i,j)*
     $uvel(i+1,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.5*adke(i,j)*
     $uvel(i,j,k,bi,bj)
          advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)+0.5*adke(i,j)*
     $vvel(i,j+1,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.5*adke(i,j)*
     $vvel(i,j,k,bi,bj)
          adke(i,j) = 0.d0
        end do
      end do

      end


      subroutine adcalc_phi_hyd( bi, bj, imin, imax, jmin, jmax, k, 
     $theta, salt, adtheta, adsalt, adphihyd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer maxnochkptlev
      parameter ( maxnochkptlev = 2 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_c/ checkptsuff, bathyfile, hydrogthetafile, 
     $hydrogsaltfile, zonalwindfile, meridwindfile, thetaclimfile, 
     $saltclimfile, buoyancyrelation, empmrfile, surfqfile, surfqswfile,
     $ uvelinitfile, vvelinitfile, psurfinitfile, dqdtfile
      character*(max_len_fnam) bathyfile
      character*(max_len_fnam) buoyancyrelation
      character*(5) checkptsuff(maxnochkptlev)
      character*(max_len_fnam) dqdtfile
      character*(max_len_fnam) empmrfile
      character*(max_len_fnam) hydrogsaltfile
      character*(max_len_fnam) hydrogthetafile
      character*(max_len_fnam) meridwindfile
      character*(max_len_fnam) psurfinitfile
      character*(max_len_fnam) saltclimfile
      character*(max_len_fnam) surfqfile
      character*(max_len_fnam) surfqswfile
      character*(max_len_fnam) thetaclimfile
      character*(max_len_fnam) uvelinitfile
      character*(max_len_fnam) vvelinitfile
      character*(max_len_fnam) zonalwindfile

      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C define local variables
C==============================================
      double precision adalpharho(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphihydh
      double precision atm_cp
      double precision atm_kappa
      double precision atm_po
      double precision ddrm
      double precision ddrm1
      double precision ddrp
      double precision ddrp1
      double precision drloc
      double precision drlockp1
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adalpharho(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (buoyancyrelation .eq. 'OCEANIC') then
        drloc = drc(k)
        if (k .eq. 1) then
          drloc = drf(1)
        endif
        if (k .eq. nr) then
          drlockp1 = 0.
        else
          drlockp1 = drc(k+1)
        endif
        do j = jmin, jmax
          do i = imin, imax
            if (k .lt. nr) then
              adalpharho(i,j) = adalpharho(i,j)+0.5*adphihyd(i,j,k+1)*
     $drlockp1*gravity*recip_rhoconst
              adphihyd(i,j,k) = adphihyd(i,j,k)+adphihyd(i,j,k+1)
              adphihyd(i,j,k+1) = 0.d0
            endif
            adphihydh = adphihyd(i,j,k)
            adphihyd(i,j,k) = 0.d0
            adalpharho(i,j) = adalpharho(i,j)+0.5*adphihydh*drloc*
     $gravity*recip_rhoconst
            adphihyd(i,j,k) = adphihyd(i,j,k)+adphihydh
          end do
        end do
        call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,theta,
     $salt,adtheta,adsalt,adalpharho )
        if (k .eq. 1) then
          do j = jmin, jmax
            do i = imin, imax
              adphihyd(i,j,k) = 0.d0
            end do
          end do
        endif
      else if (buoyancyrelation .eq. 'ATMOSPHERIC') then
        atm_cp = 1004.d0
        atm_kappa = 2.d0/7.d0
        atm_po = 1.d+5
        if (k .eq. 1) then
          ddrp1 = atm_cp*((rc(k)/atm_po)**atm_kappa-(rf(k)/atm_po)**
     $atm_kappa)
          do j = jmin, jmax
            do i = imin, imax
              ddrp = ddrp1
              if (hfacc(i,j,k,bi,bj) .eq. 0.) then
                ddrp = 0.
              endif
              adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)-adphihyd(i,j,
     $k)*ddrp
              adphihyd(i,j,k) = 0.d0
            end do
          end do
        else
          ddrp1 = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(k-1)/atm_po)**
     $atm_kappa)*0.5
          ddrm1 = ddrp1
          do j = jmin, jmax
            do i = imin, imax
              ddrp = ddrp1
              ddrm = ddrm1
              if (hfacc(i,j,k,bi,bj) .eq. 0.) then
                ddrp = 0.
              endif
              if (hfacc(i,j,k-1,bi,bj) .eq. 0.) then
                ddrm = 0.
              endif
              adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)-
     $adphihyd(i,j,k)*ddrm
              adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)-adphihyd(i,j,
     $k)*ddrp
              adphihyd(i,j,k-1) = adphihyd(i,j,k-1)+adphihyd(i,j,k)
              adphihyd(i,j,k) = 0.d0
            end do
          end do
        endif
      endif

      end


      subroutine adconvect( bi, bj, imin, imax, jmin, jmax, k, rhokm1, 
     $rhokp1, mytime, adrhokm1, adrhokp1 )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokp1(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision mytime
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokp1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      double precision adsmix(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtmix(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsum(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j

C==============================================
C define external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adsmix(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adtmix(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        do j = jmin, jmax
          do i = imin, imax
            dsum(i,j) = hfacc(i,j,k-1,bi,bj)*drf(k-1)+hfacc(i,j,k,bi,bj)
     $*drf(k)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            if (hfacc(i,j,k,bi,bj) .gt. 0. .and. rhokm1(i,j) .gt. 
     $rhokp1(i,j)) then
              adsmix(i,j) = adsmix(i,j)+adsalt(i,j,k,bi,bj)/dsum(i,j)
              adsalt(i,j,k,bi,bj) = 0.d0
              adsmix(i,j) = adsmix(i,j)+adsalt(i,j,k-1,bi,bj)/dsum(i,j)
              adsalt(i,j,k-1,bi,bj) = 0.d0
              adtmix(i,j) = adtmix(i,j)+adtheta(i,j,k,bi,bj)/dsum(i,j)
              adtheta(i,j,k,bi,bj) = 0.d0
              adtmix(i,j) = adtmix(i,j)+adtheta(i,j,k-1,bi,bj)/dsum(i,j)
              adtheta(i,j,k-1,bi,bj) = 0.d0
            endif
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            adsalt(i,j,k-1,bi,bj) = adsalt(i,j,k-1,bi,bj)+adsmix(i,j)*
     $hfacc(i,j,k-1,bi,bj)*drf(k-1)
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsmix(i,j)*
     $hfacc(i,j,k,bi,bj)*drf(k)
            adsmix(i,j) = 0.d0
            adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)+adtmix(i,j)*
     $hfacc(i,j,k-1,bi,bj)*drf(k-1)
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtmix(i,j)*
     $hfacc(i,j,k,bi,bj)*drf(k)
            adtmix(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine mdconvective_adjustment( bi, bj, imin, imax, jmin, 
     $jmax, mytime, myiter, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /cadrhok/ rhokh
      real*4 rhokh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadrhokm1/ rhokm1h
      real*4 rhokm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadsalt/ salth
      real*4 salth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadsalu/ salti
      real*4 salti(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadtheta/ thetah
      real*4 thetah(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadthetb/ thetai
      real*4 thetai(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily
      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily

      common /tamckeys/ key, ikey, idkey
      integer idkey
      integer ikey
      integer key

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision convectcount(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer help_h
      integer help_i
      integer help_j
      integer ip1
      integer ip2
      integer k
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C**********************************************
C executable statements of routine
C**********************************************
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        k = nr
        act1 = bi-mybxlo(mythid)
        max1 = mybxhi(mythid)-mybxlo(mythid)+1
        act2 = bj-mybylo(mythid)
        max2 = mybyhi(mythid)-mybylo(mythid)+1
        act3 = mythid-1
        max3 = ntx*nty
        act4 = ikey_dynamics-1
        ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
        if ( .not. usekpp) then
          do k = 2, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                thetai(ip1,ip2,ikey) = theta(ip1-1+1-olx,ip2-1+1-oly,k-
     $1,bi,bj)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salti(ip1,ip2,ikey) = salt(ip1-1+1-olx,ip2-1+1-oly,k-1,
     $bi,bj)
              end do
            end do
            help_h = k-1
            help_i = k-1
            call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,help_i,
     $eostype,theta,salt,rhokm1,mythid )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                thetah(ip1,ip2,ikey) = theta(ip1-1+1-olx,ip2-1+1-oly,k,
     $bi,bj)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salth(ip1,ip2,ikey) = salt(ip1-1+1-olx,ip2-1+1-oly,k,bi,
     $bj)
              end do
            end do
            help_j = k-1
            call find_rho( bi,bj,imin,imax,jmin,jmax,k,help_j,eostype,
     $theta,salt,rhok,mythid )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokm1h(ip1,ip2,ikey) = rhokm1(ip1-1+1-olx,ip2-1+1-oly)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokh(ip1,ip2,ikey) = rhok(ip1-1+1-olx,ip2-1+1-oly)
              end do
            end do
            call convect( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $convectcount,mytime,myiter,mythid )
          end do
        endif
      endif
      end


      subroutine adconvective_adjustment( bi, bj, imin, imax, jmin, 
     $jmax, mytime, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /cadrhok/ rhokh
      real*4 rhokh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadrhokm1/ rhokm1h
      real*4 rhokm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadsalt/ salth
      real*4 salth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadsalu/ salti
      real*4 salti(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadtheta/ thetah
      real*4 thetah(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadthetb/ thetai
      real*4 thetai(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily
      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily

      common /tamckeys/ key, ikey, idkey
      integer idkey
      integer ikey
      integer key

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      integer help_h
      integer help_i
      integer help_j
      integer ip1
      integer ip2
      integer k
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        act1 = bi-mybxlo(mythid)
        max1 = mybxhi(mythid)-mybxlo(mythid)+1
        act2 = bj-mybylo(mythid)
        max2 = mybyhi(mythid)-mybylo(mythid)+1
        act3 = mythid-1
        max3 = ntx*nty
        act4 = ikey_dynamics-1
        ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
        if ( .not. usekpp) then
          do k = nr, 2, -1
            help_h = k-1
            help_i = k-1
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = thetah(ip1,ip2,
     $ikey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = salth(ip1,ip2,
     $ikey)
              end do
            end do
            help_j = k-1
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokm1(ip1-1+1-olx,ip2-1+1-oly) = rhokm1h(ip1,ip2,ikey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhok(ip1-1+1-olx,ip2-1+1-oly) = rhokh(ip1,ip2,ikey)
              end do
            end do
            call adconvect( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $mytime,adrhokm1,adrhok )
            call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,help_j,eostype,
     $theta,salt,adtheta,adsalt,adrhok )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,k-1,bi,bj) = thetai(ip1,
     $ip2,ikey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,k-1,bi,bj) = salti(ip1,ip2,
     $ikey)
              end do
            end do
            call adfind_rho( bi,bj,imin,imax,jmin,jmax,help_h,help_i,
     $eostype,theta,salt,adtheta,adsalt,adrhokm1 )
          end do
        endif
      endif

      end


      subroutine adcorrection_step( bi, bj, imin, imax, jmin, jmax, k, 
     $adphisurfx, adphisurfy )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C define local variables
C==============================================
      double precision hxfac
      double precision hyfac
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      hxfac = pffacmom
      hyfac = pffacmom
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)+adgvnm1(i,j,k,bi,bj)
          adgvnm1(i,j,k,bi,bj) = 0.d0
          adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+advvel(i,j,k,bi,
     $bj)*masks(i,j,k,bi,bj)
          adphisurfy(i,j) = adphisurfy(i,j)-advvel(i,j,k,bi,bj)*
     $deltatmom*hyfac*implicsurfpress*masks(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)+adgunm1(i,j,k,bi,bj)
          adgunm1(i,j,k,bi,bj) = 0.d0
          adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+aduvel(i,j,k,bi,
     $bj)*maskw(i,j,k,bi,bj)
          adphisurfx(i,j) = adphisurfx(i,j)-aduvel(i,j,k,bi,bj)*
     $deltatmom*hxfac*implicsurfpress*maskw(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine adcost_final( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C define common blocks
C==============================================
      common /adcost_r/ adfc, adobjf_test
      double precision adfc
      double precision adobjf_test(nsx,nsy)

      common /cost_aux_r/ mult_hq, mult_hs, mult_tauu, mult_tauv, 
     $mult_hmean, mult_h, mult_temp, mult_salt, mult_sst, mult_atl, 
     $mult_ctdt, mult_ctds, mult_test
      double precision mult_atl
      double precision mult_ctds
      double precision mult_ctdt
      double precision mult_h
      double precision mult_hmean
      double precision mult_hq
      double precision mult_hs
      double precision mult_salt
      double precision mult_sst
      double precision mult_tauu
      double precision mult_tauv
      double precision mult_temp
      double precision mult_test

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      integer bi
      integer bj
      integer ithi
      integer itlo
      integer jthi
      integer jtlo

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      call global_adsum_r8( mythid,adfc )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          adobjf_test(bi,bj) = adobjf_test(bi,bj)+adfc*mult_test
        end do
      end do

      end


      subroutine adcost_test( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adcost_r/ adfc, adobjf_test
      double precision adfc
      double precision adobjf_test(nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /cost_test_i/ ilocout, jlocout, klocout
      integer ilocout
      integer jlocout
      integer klocout

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer ig
      integer ithi
      integer itlo
      integer j
      integer jg
      integer jthi
      integer jtlo

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      ilocout = 6
      jlocout = 35
      klocout = 1
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = 1, sny
            jg = myygloballo-1+(bj-1)*sny+j
            do i = 1, snx
              ig = myxgloballo-1+(bi-1)*snx+i
              if (ig .eq. ilocout .and. jg .eq. jlocout) then
                adtheta(i,j,klocout,bi,bj) = adtheta(i,j,klocout,bi,bj)+
     $adobjf_test(bi,bj)
                adobjf_test(bi,bj) = 0.d0
              endif
            end do
          end do
        end do
      end do

      end


      subroutine adctrl_map_forcing( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer optimcycle
      parameter ( optimcycle = 0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adffields/ adfu, adfv, adqnet, adempmr, adsst, adsss
      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /controlfiles_c/ xx_theta_file, xx_salt_file, xx_tauu_file,
     $ xx_tauv_file, xx_sflux_file, xx_hflux_file, xx_sss_file, 
     $xx_sst_file, xx_diffkr_file, xx_kapgm_file
      character*(max_len_fnam) xx_diffkr_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_kapgm_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_sss_file
      character*(max_len_fnam) xx_sst_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnamehflux
      character*(80) fnamesflux
      character*(80) fnamesss
      character*(80) fnamesst
      character*(80) fnametauu
      character*(80) fnametauv
      integer i
      integer il
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      logical ladinit

C==============================================
C define external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      il = ilnblnk(xx_tauu_file)
      write(fnametauu(1:80),'(2a,i10.10)') xx_tauu_file(1:il),'.',
     $optimcycle
      il = ilnblnk(xx_tauv_file)
      write(fnametauv(1:80),'(2a,i10.10)') xx_tauv_file(1:il),'.',
     $optimcycle
      il = ilnblnk(xx_sflux_file)
      write(fnamesflux(1:80),'(2a,i10.10)') xx_sflux_file(1:il),'.',
     $optimcycle
      il = ilnblnk(xx_hflux_file)
      write(fnamehflux(1:80),'(2a,i10.10)') xx_hflux_file(1:il),'.',
     $optimcycle
      il = ilnblnk(xx_sss_file)
      write(fnamesss(1:80),'(2a,i10.10)') xx_sss_file(1:il),'.',
     $optimcycle
      il = ilnblnk(xx_sst_file)
      write(fnamesst(1:80),'(2a,i10.10)') xx_sst_file(1:il),'.',
     $optimcycle
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adsst(i,j,
     $bi,bj)
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnamesst,1,doglobalread,ladinit,optimcycle,
     $mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adsss(i,j,
     $bi,bj)
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnamesss,1,doglobalread,ladinit,optimcycle,
     $mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adqnet(i,j,
     $bi,bj)
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnamehflux,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adempmr(i,j,
     $bi,bj)
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnamesflux,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adfv(i,j,bi,
     $bj)
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnametauv,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adfu(i,j,bi,
     $bj)
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnametauu,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )

      end


      subroutine adctrl_map_ini( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer optimcycle
      parameter ( optimcycle = 0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /controlfiles_c/ xx_theta_file, xx_salt_file, xx_tauu_file,
     $ xx_tauv_file, xx_sflux_file, xx_hflux_file, xx_sss_file, 
     $xx_sst_file, xx_diffkr_file, xx_kapgm_file
      character*(max_len_fnam) xx_diffkr_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_kapgm_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_sss_file
      character*(max_len_fnam) xx_sst_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      integer bi
      integer bj
      logical doglobalread
      logical equal
      double precision fac
      character*(80) fnamesalt
      character*(80) fnametheta
      integer i
      integer il
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit

C==============================================
C define external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      equal =  .true. 
      if (equal) then
        fac = 1.d0
      else
        fac = 0.d0
      endif
      il = ilnblnk(xx_theta_file)
      write(fnametheta(1:80),'(2a,i10.10)') xx_theta_file(1:il),'.',
     $optimcycle
      il = ilnblnk(xx_salt_file)
      write(fnamesalt(1:80),'(2a,i10.10)') xx_salt_file(1:il),'.',
     $optimcycle
      call adexch_xyz_r8( mythid,adgsnm1 )
      call adexch_xyz_r8( mythid,adsalt )
      call adexch_xyz_r8( mythid,adgtnm1 )
      call adexch_xyz_r8( mythid,adtheta )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do k = 1, nr
            do j = jmin, jmax
              do i = imin, imax
                adtmpfld3d(i,j,k,bi,bj) = adtmpfld3d(i,j,k,bi,bj)+
     $adgsnm1(i,j,k,bi,bj)*fac
                adtmpfld3d(i,j,k,bi,bj) = adtmpfld3d(i,j,k,bi,bj)+
     $adsalt(i,j,k,bi,bj)*fac
              end do
            end do
          end do
        end do
      end do
      call adactive_read_xyz( fnamesalt,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld3d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do k = 1, nr
            do j = jmin, jmax
              do i = imin, imax
                adtmpfld3d(i,j,k,bi,bj) = adtmpfld3d(i,j,k,bi,bj)+
     $adgtnm1(i,j,k,bi,bj)*fac
                adtmpfld3d(i,j,k,bi,bj) = adtmpfld3d(i,j,k,bi,bj)+
     $adtheta(i,j,k,bi,bj)*fac
              end do
            end do
          end do
        end do
      end do
      call adactive_read_xyz( fnametheta,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld3d )

      end


      subroutine adcycle_tracer( bi, bj, imin, imax, jmin, jmax, k, 
     $adtracer, adgtracer, adgtrnm1 )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
C==============================================
C define arguments
C==============================================
      double precision adgtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtrnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adgtracer(i,j,k,bi,bj) = adgtracer(i,j,k,bi,bj)+adgtrnm1(i,j,
     $k,bi,bj)
          adgtrnm1(i,j,k,bi,bj) = 0.d0
          adgtrnm1(i,j,k,bi,bj) = adgtrnm1(i,j,k,bi,bj)+adtracer(i,j,k,
     $bi,bj)
          adtracer(i,j,k,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine addo_fields_blocking_exchanges( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer mythid

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call adexch_xyz_r8( mythid,advveld )
      call adexch_xyz_r8( mythid,aduveld )
      call adexch_xyz_r8( mythid,adsalt )
      call adexch_xyz_r8( mythid,adtheta )
      call adexch_xyz_r8( mythid,advvel )
      call adexch_xyz_r8( mythid,aduvel )

      end


      subroutine mddynamics( mytime, myiter, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /cadgsnm1/ gsnm1h
      real*4 gsnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadgtnm1/ gtnm1h
      real*4 gtnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadgtnm2/ gtnm1i
      real*4 gtnm1i(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadgunm1/ gunm1h
      real*4 gunm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadgvnm1/ gvnm1h
      real*4 gvnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkappars/ kapparsh
      real*4 kapparsh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadkappart/ kapparth
      real*4 kapparth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadkapparu/ kapparsi
      real*4 kapparsi(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkapparv/ kapparti
      real*4 kapparti(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppdiffkzs/ kppdiffkzsh
      real*4 kppdiffkzsh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppdiffkzt/ kppdiffkzth
      real*4 kppdiffkzth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppfrac/ kppfrach
      real*4 kppfrach(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadkppghat/ kppghath
      real*4 kppghath(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppviscaz/ kppviscazh
      real*4 kppviscazh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadrhokm2/ rhokm1h
      real*4 rhokm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadrhol/ rhokh
      real*4 rhokh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadsalv/ salth
      real*4 salth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadsalw/ salti
      real*4 salti(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadthetc/ thetah
      real*4 thetah(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadthetd/ thetai
      real*4 thetai(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /caduvel/ uvelh
      real*4 uvelh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /caduveld/ uveldh
      real*4 uveldh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /caduvem/ uveli
      real*4 uveli(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadvvel/ vvelh
      real*4 vvelh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadvveld/ vveldh
      real*4 vveldh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadvvem/ vveli
      real*4 vveli(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /dynvars_cd/ uveld, vveld, etanm1, unm1, vnm1, gucd, gvcd
      double precision etanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision unm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /kpp_short/ kppfrac
      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily
      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily

      common /tamckeys/ key, ikey, idkey
      integer idkey
      integer ikey
      integer key

C==============================================
C define arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer bi
      integer bj
      double precision convectcount(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision fvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision fvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision fveru(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision fverv(1-olx:snx+olx,1-oly:sny+oly,2)
      integer help_h
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kkey
      integer km1
      integer kup
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer max1
      integer max2
      integer max3
      double precision phihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision phisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision phisurfy(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision sigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          do k = 1, nr
            phihyd(i,j,k) = 0.d0
            sigmax(i,j,k) = 0.d0
            sigmay(i,j,k) = 0.d0
            sigmar(i,j,k) = 0.d0
          end do
          rhokm1(i,j) = 0.d0
          rhok(i,j) = 0.d0
          phisurfx(i,j) = 0.d0
          phisurfy(i,j) = 0.d0
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              fvert(i,j,1) = 0.d0
              fvert(i,j,2) = 0.d0
              fvers(i,j,1) = 0.d0
              fvers(i,j,2) = 0.d0
              fveru(i,j,1) = 0.d0
              fveru(i,j,2) = 0.d0
              fverv(i,j,1) = 0.d0
              fverv(i,j,2) = 0.d0
            end do
          end do
          do k = 1, nr
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                kappart(i,j,k) = 0.d0
                kappars(i,j,k) = 0.d0
              end do
            end do
          end do
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                thetai(ip1,ip2,ip3,ikey) = theta(ip1-1+1-olx,ip2-1+1-
     $oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salti(ip1,ip2,ip3,ikey) = salt(ip1-1+1-olx,ip2-1+1-oly,
     $ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uveli(ip1,ip2,ip3,ikey) = uvel(ip1-1+1-olx,ip2-1+1-oly,
     $ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vveli(ip1,ip2,ip3,ikey) = vvel(ip1-1+1-olx,ip2-1+1-oly,
     $ip3,bi,bj)
              end do
            end do
          end do
          do k = nr, 1, -1
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokm1h(ip1,ip2,kkey) = rhokm1(ip1-1+1-olx,ip2-1+1-oly)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokh(ip1,ip2,kkey) = rhok(ip1-1+1-olx,ip2-1+1-oly)
              end do
            end do
            call integrate_for_w( bi,bj,k,uvel,vvel,wvel,mythid )
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call find_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,rhok,mythid )
              if (k .gt. 1) then
                help_h = k-1
                call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,rhokm1,mythid )
              endif
              call grad_sigma( bi,bj,imin,imax,jmin,jmax,k,rhok,rhokm1,
     $rhok,sigmax,sigmay,sigmar,mythid )
            endif
            if (k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call calc_ivdc( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $convectcount,kappart,kappars,mytime,myiter,mythid )
            endif
          end do
          call external_forcing_surf( bi,bj,imin,imax,jmin,jmax,mythid )
          if (usegmredi) then
            do k = 1, nr
              call gmredi_calc_tensor( bi,bj,imin,imax,jmin,jmax,k,
     $sigmax,sigmay,sigmar,mythid )
            end do
          else
            do k = 1, nr
              call gmredi_calc_tensor_dummy( bi,bj,imin,imax,jmin,jmax,
     $k,sigmax,sigmay,sigmar,mythid )
            end do
          endif
          if (usekpp) then
            call mdkpp_calc( bi,bj,mytime,mythid )
          else
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                kpphbl(i,j,bi,bj) = 1.
                kppfrac(i,j,bi,bj) = 0.
                do k = 1, nr
                  kppghat(i,j,k,bi,bj) = 0.
                  kppviscaz(i,j,k,bi,bj) = viscaz
                  kppdiffkzt(i,j,k,bi,bj) = diffkzt
                  kppdiffkzs(i,j,k,bi,bj) = diffkzs
                end do
              end do
            end do
          endif
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppghath(ip1,ip2,ip3,ikey) = kppghat(ip1-1+1-olx,ip2-1+
     $1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppviscazh(ip1,ip2,ip3,ikey) = kppviscaz(ip1-1+1-olx,
     $ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppdiffkzth(ip1,ip2,ip3,ikey) = kppdiffkzt(ip1-1+1-olx,
     $ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppdiffkzsh(ip1,ip2,ip3,ikey) = kppdiffkzs(ip1-1+1-olx,
     $ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              kppfrach(ip1,ip2,ikey) = kppfrac(ip1-1+1-olx,ip2-1+1-oly,
     $bi,bj)
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kapparti(ip1,ip2,ip3,ikey) = kappart(ip1-1+1-olx,ip2-1+
     $1-oly,ip3)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kapparsi(ip1,ip2,ip3,ikey) = kappars(ip1-1+1-olx,ip2-1+
     $1-oly,ip3)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                thetah(ip1,ip2,ip3,ikey) = theta(ip1-1+1-olx,ip2-1+1-
     $oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salth(ip1,ip2,ip3,ikey) = salt(ip1-1+1-olx,ip2-1+1-oly,
     $ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvelh(ip1,ip2,ip3,ikey) = uvel(ip1-1+1-olx,ip2-1+1-oly,
     $ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvelh(ip1,ip2,ip3,ikey) = vvel(ip1-1+1-olx,ip2-1+1-oly,
     $ip3,bi,bj)
              end do
            end do
          end do
          do k = nr, 1, -1
            km1 = max(1,k-1)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kapparth(ip1,ip2,kkey) = kappart(ip1-1+1-olx,ip2-1+1-
     $oly,k)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kapparsh(ip1,ip2,kkey) = kappars(ip1-1+1-olx,ip2-1+1-
     $oly,k)
              end do
            end do
            call calc_common_factors( bi,bj,imin,imax,jmin,jmax,k,km1,
     $kup,kdown,xa,ya,utrans,vtrans,rtrans,maskc,maskup,mythid )
            call calc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskc,
     $maskup,kappart,kappars,kapparu,kapparv,mythid )
            if (tempstepping) then
              call calc_gt( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,maskc,kappart,fvert,mytime,
     $mythid )
              call timestep_tracer( bi,bj,imin,imax,jmin,jmax,k,theta,
     $gt,gtnm1,myiter,mythid )
            endif
            if (saltstepping) then
              call calc_gs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,maskc,kappars,fvers,mytime,
     $mythid )
              call timestep_tracer( bi,bj,imin,imax,jmin,jmax,k,salt,gs,
     $gsnm1,myiter,mythid )
            endif
            if (allowfreezing) then
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gtnm1i(ip1,ip2,kkey) = gtnm1(ip1-1+1-olx,ip2-1+1-oly,
     $k,bi,bj)
                end do
              end do
              call freeze( bi,bj,imin,imax,jmin,jmax,k,mythid )
            endif
          end do
          if (implicitdiffusion) then
            if (tempstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    gtnm1h(ip1,ip2,ip3,ikey) = gtnm1(ip1-1+1-olx,ip2-1+
     $1-oly,ip3,bi,bj)
                  end do
                end do
              end do
              call impldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappart,recip_hfacc,gtnm1,mythid )
            endif
            if (saltstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    gsnm1h(ip1,ip2,ip3,ikey) = gsnm1(ip1-1+1-olx,ip2-1+
     $1-oly,ip3,bi,bj)
                  end do
                end do
              end do
              call impldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappars,recip_hfacc,gsnm1,mythid )
            endif
          endif
          imin = 1-olx+2
          imax = snx+olx-1
          jmin = 1-oly+2
          jmax = sny+oly-1
          if (implicsurfpress .ne. 1.) then
            call calc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,etan,
     $phisurfx,phisurfy,mythid )
          endif
          do k = 1, nr
            km1 = max(1,k-1)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            if (staggertimestep) then
              call calc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,gtnm1,
     $gsnm1,phihyd,mythid )
            else
              call calc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,theta,salt,
     $phihyd,mythid )
            endif
            if (momstepping) then
              call calc_mom_rhs( bi,bj,imin,imax,jmin,jmax,k,kup,kdown,
     $phihyd,kapparu,kapparv,fveru,fverv,mytime,mythid )
              call timestep( bi,bj,imin,imax,jmin,jmax,k,phihyd,
     $phisurfx,phisurfy,myiter,mythid )
            else
              do j = 1-oly, sny+oly
                do i = 1-olx, snx+olx
                  gucd(i,j,k,bi,bj) = 0.
                  gvcd(i,j,k,bi,bj) = 0.
                end do
              end do
            endif
          end do
          if (implicitviscosity .and. momstepping) then
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gunm1h(ip1,ip2,ip3,ikey) = gunm1(ip1-1+1-olx,ip2-1+1-
     $oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparu,
     $recip_hfacw,gunm1,mythid )
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gvnm1h(ip1,ip2,ip3,ikey) = gvnm1(ip1-1+1-olx,ip2-1+1-
     $oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparv,
     $recip_hfacs,gvnm1,mythid )
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  vveldh(ip1,ip2,ip3,ikey) = vveld(ip1-1+1-olx,ip2-1+1-
     $oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparu,
     $recip_hfacw,vveld,mythid )
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  uveldh(ip1,ip2,ip3,ikey) = uveld(ip1-1+1-olx,ip2-1+1-
     $oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparv,
     $recip_hfacs,uveld,mythid )
          endif
        end do
      end do
      end


      subroutine addynamics( mytime, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adkpp_short/ adkppfrac
      double precision adkppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /cadgsnm1/ gsnm1h
      real*4 gsnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadgtnm1/ gtnm1h
      real*4 gtnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadgtnm2/ gtnm1i
      real*4 gtnm1i(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadgunm1/ gunm1h
      real*4 gunm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadgvnm1/ gvnm1h
      real*4 gvnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkappars/ kapparsh
      real*4 kapparsh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadkappart/ kapparth
      real*4 kapparth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadkapparu/ kapparsi
      real*4 kapparsi(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkapparv/ kapparti
      real*4 kapparti(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppdiffkzs/ kppdiffkzsh
      real*4 kppdiffkzsh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppdiffkzt/ kppdiffkzth
      real*4 kppdiffkzth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppfrac/ kppfrach
      real*4 kppfrach(1+snx+olx-(1-olx),1+sny+oly-(1-oly),15)

      common /cadkppghat/ kppghath
      real*4 kppghath(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadkppviscaz/ kppviscazh
      real*4 kppviscazh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadrhokm2/ rhokm1h
      real*4 rhokm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadrhol/ rhokh
      real*4 rhokh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),225)

      common /cadsalv/ salth
      real*4 salth(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadsalw/ salti
      real*4 salti(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadthetc/ thetah
      real*4 thetah(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadthetd/ thetai
      real*4 thetai(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /caduvel/ uvelh
      real*4 uvelh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /caduveld/ uveldh
      real*4 uveldh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /caduvem/ uveli
      real*4 uveli(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadvvel/ vvelh
      real*4 vvelh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadvveld/ vveldh
      real*4 vveldh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /cadvvem/ vveli
      real*4 vveli(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,15)

      common /dynvars_cd/ uveld, vveld, etanm1, unm1, vnm1, gucd, gvcd
      double precision etanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision unm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /kpp_short/ kppfrac
      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily
      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily

      common /tamckeys/ key, ikey, idkey
      integer idkey
      integer ikey
      integer key

C==============================================
C define arguments
C==============================================
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adfvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfveru(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfverv(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision fvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision fvert(1-olx:snx+olx,1-oly:sny+oly,2)
      integer help_h
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kkey
      integer km1
      integer kup
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer max1
      integer max2
      integer max3
      integer myiter
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision sigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = 1, 2
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adfvers(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adfvert(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adfveru(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adfverv(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkappars(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkappart(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkapparu(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkapparv(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adphihyd(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfy(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrtrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adsigmar(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adsigmax(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adsigmay(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          do k = 1, nr
            sigmax(i,j,k) = 0.d0
            sigmay(i,j,k) = 0.d0
            sigmar(i,j,k) = 0.d0
          end do
          rhokm1(i,j) = 0.d0
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do ip3 = 1, 2
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adfvers(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip3 = 1, 2
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adfvert(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkappars(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkappart(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkapparu(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkapparv(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adphihyd(ip1,ip2,ip3) = 0.d0
              end do
            end do
          end do
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adrtrans(ip1,ip2) = 0.d0
            end do
          end do
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adutrans(ip1,ip2) = 0.d0
            end do
          end do
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              advtrans(ip1,ip2) = 0.d0
            end do
          end do
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              fvert(i,j,1) = 0.d0
              fvert(i,j,2) = 0.d0
              fvers(i,j,1) = 0.d0
              fvers(i,j,2) = 0.d0
            end do
          end do
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = thetai(ip1,
     $ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = salti(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = uveli(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = vveli(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do k = nr, 1, -1
            call integrate_for_w( bi,bj,k,uvel,vvel,wvel,mythid )
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call find_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,rhok,mythid )
              if (k .gt. 1) then
                help_h = k-1
                call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,rhokm1,mythid )
              endif
              call grad_sigma( bi,bj,imin,imax,jmin,jmax,k,rhok,rhokm1,
     $rhok,sigmax,sigmay,sigmar,mythid )
            endif
          end do
          call external_forcing_surf( bi,bj,imin,imax,jmin,jmax,mythid )
          if (usegmredi) then
            do k = 1, nr
              call gmredi_calc_tensor( bi,bj,imin,imax,jmin,jmax,k,
     $sigmax,sigmay,sigmar,mythid )
            end do
          else
            do k = 1, nr
              call gmredi_calc_tensor_dummy( bi,bj,imin,imax,jmin,jmax,
     $k,sigmax,sigmay,sigmar,mythid )
            end do
          endif
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppghat(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $kppghath(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppviscaz(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $kppviscazh(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppdiffkzt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $kppdiffkzth(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppdiffkzs(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $kppdiffkzsh(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              kppfrac(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = kppfrach(ip1,ip2,
     $ikey)
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappart(ip1-1+1-olx,ip2-1+1-oly,ip3) = kapparti(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappars(ip1-1+1-olx,ip2-1+1-oly,ip3) = kapparsi(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = thetah(ip1,
     $ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = salth(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = uvelh(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = vvelh(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do k = nr, 1, -1
            km1 = max(1,k-1)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
            call calc_common_factors( bi,bj,imin,imax,jmin,jmax,k,km1,
     $kup,kdown,xa,ya,utrans,vtrans,rtrans,maskc,maskup,mythid )
            call calc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskc,
     $maskup,kappart,kappars,kapparu,kapparv,mythid )
            if (tempstepping) then
              call calc_gt( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,maskc,kappart,fvert,mytime,
     $mythid )
              call timestep_tracer( bi,bj,imin,imax,jmin,jmax,k,theta,
     $gt,gtnm1,myiter,mythid )
            endif
            if (saltstepping) then
              call calc_gs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,maskc,kappars,fvers,mytime,
     $mythid )
              call timestep_tracer( bi,bj,imin,imax,jmin,jmax,k,salt,gs,
     $gsnm1,myiter,mythid )
            endif
            if (allowfreezing) then
              call freeze( bi,bj,imin,imax,jmin,jmax,k,mythid )
            endif
          end do
          if (implicitdiffusion) then
            if (tempstepping) then
              call impldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappart,recip_hfacc,gtnm1,mythid )
            endif
            if (saltstepping) then
              call impldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappars,recip_hfacc,gsnm1,mythid )
            endif
          endif
          imin = 1-olx+2
          imax = snx+olx-1
          jmin = 1-oly+2
          jmax = sny+oly-1
          if (implicitviscosity .and. momstepping) then
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gunm1(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = gunm1h(ip1,
     $ip2,ip3,ikey)
                end do
              end do
            end do
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gvnm1(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = gvnm1h(ip1,
     $ip2,ip3,ikey)
                end do
              end do
            end do
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  vveld(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = vveldh(ip1,
     $ip2,ip3,ikey)
                end do
              end do
            end do
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  uveld(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = uveldh(ip1,
     $ip2,ip3,ikey)
                end do
              end do
            end do
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparv,recip_hfacs,uveld,adkapparv,aduveld )
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparu,recip_hfacw,vveld,adkapparu,advveld )
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparv,recip_hfacs,gvnm1,adkapparv,adgvnm1 )
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparu,recip_hfacw,gunm1,adkapparu,adgunm1 )
          endif
          do k = nr, 1, -1
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            if (momstepping) then
              call adtimestep( bi,bj,imin,imax,jmin,jmax,k,adphihyd,
     $adphisurfx,adphisurfy )
              call adcalc_mom_rhs( bi,bj,imin,imax,jmin,jmax,k,kup,
     $kdown,kapparu,kapparv,adphihyd,adkapparu,adkapparv,adfveru,
     $adfverv )
            endif
            if (staggertimestep) then
              call adcalc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,gtnm1,
     $gsnm1,adgtnm1,adgsnm1,adphihyd )
            else
              call adcalc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,theta,
     $salt,adtheta,adsalt,adphihyd )
            endif
          end do
          if (implicsurfpress .ne. 1.) then
            call adcalc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,adetan,
     $adphisurfx,adphisurfy )
          endif
          do k = nr, 1, -1
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
          end do
          if (implicitdiffusion) then
            if (saltstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    gsnm1(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $gsnm1h(ip1,ip2,ip3,ikey)
                  end do
                end do
              end do
              call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappars,recip_hfacc,gsnm1,adkappars,adgsnm1 )
            endif
            if (tempstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    gtnm1(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $gtnm1h(ip1,ip2,ip3,ikey)
                  end do
                end do
              end do
              call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappart,recip_hfacc,gtnm1,adkappart,adgtnm1 )
            endif
          endif
          do k = 1, nr
            km1 = max(1,k-1)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappart(ip1-1+1-olx,ip2-1+1-oly,k) = kapparth(ip1,ip2,
     $kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappars(ip1-1+1-olx,ip2-1+1-oly,k) = kapparsh(ip1,ip2,
     $kkey)
              end do
            end do
            call calc_common_factors( bi,bj,imin,imax,jmin,jmax,k,km1,
     $kup,kdown,xa,ya,utrans,vtrans,rtrans,maskc,maskup,mythid )
            call calc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskc,
     $maskup,kappart,kappars,kapparu,kapparv,mythid )
            if (allowfreezing) then
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gtnm1(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = gtnm1i(ip1,
     $ip2,kkey)
                end do
              end do
              call adfreeze( bi,bj,imin,imax,jmin,jmax,k )
            endif
            if (saltstepping) then
              call adtimestep_tracer( bi,bj,imin,imax,jmin,jmax,k,
     $adsalt,adgs,adgsnm1 )
              call adcalc_gs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,maskc,kappars,adutrans,advtrans,
     $adrtrans,adkappars,adfvers )
            endif
            if (tempstepping) then
              call adtimestep_tracer( bi,bj,imin,imax,jmin,jmax,k,
     $adtheta,adgt,adgtnm1 )
              call adcalc_gt( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,maskc,kappart,adutrans,advtrans,
     $adrtrans,adkappart,adfvert )
            endif
            call adcalc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskc,
     $maskup,adkappart,adkappars,adkapparu,adkapparv )
            call adcalc_common_factors( bi,bj,imin,imax,jmin,jmax,k,
     $adutrans,advtrans,adrtrans )
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = thetai(ip1,
     $ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = salti(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = uveli(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = vveli(ip1,ip2,
     $ip3,ikey)
              end do
            end do
          end do
          if (usekpp) then
            call adkpp_calc( bi,bj,mytime )
          else
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                do k = 1, nr
                  adkppdiffkzs(i,j,k,bi,bj) = 0.d0
                  adkppdiffkzt(i,j,k,bi,bj) = 0.d0
                  adkppviscaz(i,j,k,bi,bj) = 0.d0
                  adkppghat(i,j,k,bi,bj) = 0.d0
                end do
                adkppfrac(i,j,bi,bj) = 0.d0
              end do
            end do
          endif
          if (usegmredi) then
            do k = nr, 1, -1
              call adgmredi_calc_tensor( bi,bj,k,sigmax,sigmay,sigmar,
     $adsigmax,adsigmay,adsigmar )
            end do
          else
            do k = nr, 1, -1
              call adgmredi_calc_tensor_dummy( bi,bj,k )
            end do
          endif
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          call adexternal_forcing_surf( bi,bj,imin,imax,jmin,jmax )
          do k = 1, nr
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokm1(ip1-1+1-olx,ip2-1+1-oly) = rhokm1h(ip1,ip2,kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhok(ip1-1+1-olx,ip2-1+1-oly) = rhokh(ip1,ip2,kkey)
              end do
            end do
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call find_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,rhok,mythid )
              if (k .gt. 1) then
                help_h = k-1
                call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,rhokm1,mythid )
              endif
            endif
            if (k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call adcalc_ivdc( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $adrhokm1,adrhok,adkappart,adkappars )
            endif
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call adgrad_sigma( bi,bj,k,adrhok,adrhokm1,adrhok,
     $adsigmax,adsigmay,adsigmar )
              if (k .gt. 1) then
                call adfind_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,adtheta,adsalt,adrhokm1 )
              endif
              call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,adtheta,adsalt,adrhok )
            endif
            call adintegrate_for_w( bi,bj,k,aduvel,advvel,adwvel )
          end do
          do k = 1, nr
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                adkappars(i,j,k) = 0.d0
                adkappart(i,j,k) = 0.d0
              end do
            end do
          end do
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adfvers(i,j,2) = 0.d0
              adfvers(i,j,1) = 0.d0
              adfvert(i,j,2) = 0.d0
              adfvert(i,j,1) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adenhance( dkm1, hbl, kbl, diffus, casea, ghat, blmc, 
     $addkm1, adhbl, addiffus, adcasea, adghat, adblmc )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C define common blocks
C==============================================
      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision adblmc(imt,nr,mdiff)
      double precision adcasea(imt)
      double precision addiffus(imt,0:nrp1,mdiff)
      double precision addkm1(imt,mdiff)
      double precision adghat(imt,nr)
      double precision adhbl(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dkm1(imt,mdiff)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer kbl(imt)

C==============================================
C define local variables
C==============================================
      double precision addelta
      double precision addkmp5
      double precision addstar
      double precision delta
      double precision dkmp5
      double precision dstar
      integer i
      integer ki
      integer md

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addelta = 0.d0
      addkmp5 = 0.d0
      addstar = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        addelta = 0.d0
        addkmp5 = 0.d0
        addstar = 0.d0
        ki = kbl(i)-1
        if (ki .ge. 1 .and. ki .lt. nr) then
          delta = (hbl(i)+zgrid(ki))/(zgrid(ki)-zgrid(ki+1))
          adcasea(i) = adcasea(i)-adghat(i,ki)*ghat(i,ki)
          adghat(i,ki) = adghat(i,ki)*(1.-casea(i))
          do md = 1, mdiff
            addkmp5 = 0.d0
            addstar = 0.d0
            dkmp5 = casea(i)*diffus(i,ki,md)+(1.-casea(i))*blmc(i,ki,md)
            dstar = (1.-delta)**2*dkm1(i,md)+delta**2*dkmp5
            addelta = addelta+adblmc(i,ki,md)*((-diffus(i,ki,md))+dstar)
            addiffus(i,ki,md) = addiffus(i,ki,md)+adblmc(i,ki,md)*(1.-
     $delta)
            addstar = addstar+adblmc(i,ki,md)*delta
            adblmc(i,ki,md) = 0.d0
            addelta = addelta+addstar*((-2)*(1.-delta)*dkm1(i,md)+2*
     $delta*dkmp5)
            addkm1(i,md) = addkm1(i,md)+addstar*(1.-delta)**2
            addkmp5 = addkmp5+addstar*delta**2
            addstar = 0.d0
            adblmc(i,ki,md) = adblmc(i,ki,md)+addkmp5*(1.-casea(i))
            adcasea(i) = adcasea(i)+addkmp5*(diffus(i,ki,md)-blmc(i,ki,
     $md))
            addiffus(i,ki,md) = addiffus(i,ki,md)+addkmp5*casea(i)
            addkmp5 = 0.d0
          end do
          adhbl(i) = adhbl(i)+addelta/(zgrid(ki)-zgrid(ki+1))
          addelta = 0.d0
        endif
      end do

      end


      subroutine adexternal_forcing_s( imin, imax, jmin, jmax, bi, bj, 
     $klev, maskc )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,
     $bj)+adgs(i,j,klev,bi,bj)*maskc(i,j)
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_surf( bi, bj, imin, imax, jmin, 
     $jmax )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adffields/ adfu, adfv, adqnet, adempmr, adsst, adsss
      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta
      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adempmr(i,j,bi,bj) = adempmr(i,j,bi,bj)+35.*
     $adsurfacetendencys(i,j,bi,bj)*recip_drf(1)
          adsalt(i,j,1,bi,bj) = adsalt(i,j,1,bi,bj)-
     $adsurfacetendencys(i,j,bi,bj)*lambdasaltclimrelax
          adsss(i,j,bi,bj) = adsss(i,j,bi,bj)+adsurfacetendencys(i,j,bi,
     $bj)*lambdasaltclimrelax
          adsurfacetendencys(i,j,bi,bj) = 0.d0
          adqnet(i,j,bi,bj) = adqnet(i,j,bi,bj)-adsurfacetendencyt(i,j,
     $bi,bj)*recip_cp*recip_rhonil*recip_drf(1)
          adsst(i,j,bi,bj) = adsst(i,j,bi,bj)+adsurfacetendencyt(i,j,bi,
     $bj)*lambdathetaclimrelax
          adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)-
     $adsurfacetendencyt(i,j,bi,bj)*lambdathetaclimrelax
          adsurfacetendencyt(i,j,bi,bj) = 0.d0
          adfv(i,j,bi,bj) = adfv(i,j,bi,bj)+adsurfacetendencyv(i,j,bi,
     $bj)*horivertratio*recip_rhonil*recip_drf(1)
          adsurfacetendencyv(i,j,bi,bj) = 0.d0
          adfu(i,j,bi,bj) = adfu(i,j,bi,bj)+adsurfacetendencyu(i,j,bi,
     $bj)*horivertratio*recip_rhonil*recip_drf(1)
          adsurfacetendencyu(i,j,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine adexternal_forcing_t( imin, imax, jmin, jmax, bi, bj, 
     $klev, maskc )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)+adgt(i,j,klev,bi,bj)*maskc(i,j)
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_u( imin, imax, jmin, jmax, bi, bj, 
     $klev )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencyu(i,j,bi,bj) = adsurfacetendencyu(i,j,bi,
     $bj)+adgu(i,j,klev,bi,bj)*fofacmom*maskw(i,j,klev,bi,bj)
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_v( imin, imax, jmin, jmax, bi, bj, 
     $klev )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencyv(i,j,bi,bj) = adsurfacetendencyv(i,j,bi,
     $bj)+adgv(i,j,klev,bi,bj)*fofacmom*masks(i,j,klev,bi,bj)
          end do
        end do
      endif

      end


      subroutine adfind_alpha( bi, bj, imin, imax, jmin, jmax, k, kref, 
     $eqn, adalphaloc )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_eos_nl/ eosc, eossig0, eosreft, eosrefs
      double precision eosc(9,nr+1)
      double precision eosrefs(nr+1)
      double precision eosreft(nr+1)
      double precision eossig0(nr+1)

C==============================================
C define arguments
C==============================================
      double precision adalphaloc(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      character*(*) eqn
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer kref

C==============================================
C define local variables
C==============================================
      double precision adsp
      double precision adtp
      integer i
      integer j
      double precision refsalt
      double precision reftemp
      double precision sp
      double precision tp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adsp = 0.d0
      adtp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (eqn .eq. 'LINEAR') then
        do j = jmin, jmax
          do i = imin, imax
            adalphaloc(i,j) = 0.d0
          end do
        end do
      else if (eqn .eq. 'POLY3') then
        reftemp = eosreft(kref)
        refsalt = eosrefs(kref)
        do j = jmin, jmax
          adsp = 0.d0
          adtp = 0.d0
          do i = imin, imax
            adsp = 0.d0
            adtp = 0.d0
            tp = theta(i,j,k,bi,bj)-reftemp
            sp = salt(i,j,k,bi,bj)-refsalt
            adsp = adsp+adalphaloc(i,j)*(2.*eosc(7,kref)*tp+eosc(8,kref)
     $*sp+eosc(4,kref)+eosc(8,kref)*sp)
            adtp = adtp+adalphaloc(i,j)*(3.*eosc(6,kref)*tp+2.*(eosc(7,
     $kref)*sp+eosc(3,kref))+3.*eosc(6,kref)*tp)
            adalphaloc(i,j) = 0.d0
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsp
            adsp = 0.d0
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtp
            adtp = 0.d0
          end do
        end do
      endif

      end


      subroutine adfind_beta( bi, bj, imin, imax, jmin, jmax, k, kref, 
     $eqn, adbetaloc )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_eos_nl/ eosc, eossig0, eosreft, eosrefs
      double precision eosc(9,nr+1)
      double precision eosrefs(nr+1)
      double precision eosreft(nr+1)
      double precision eossig0(nr+1)

C==============================================
C define arguments
C==============================================
      double precision adbetaloc(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      character*(*) eqn
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer kref

C==============================================
C define local variables
C==============================================
      double precision adsp
      double precision adtp
      integer i
      integer j
      double precision refsalt
      double precision reftemp
      double precision sp
      double precision tp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adsp = 0.d0
      adtp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (eqn .eq. 'LINEAR') then
        do j = jmin, jmax
          do i = imin, imax
            adbetaloc(i,j) = 0.d0
          end do
        end do
      else if (eqn .eq. 'POLY3') then
        reftemp = eosreft(kref)
        refsalt = eosrefs(kref)
        do j = jmin, jmax
          adsp = 0.d0
          adtp = 0.d0
          do i = imin, imax
            adsp = 0.d0
            adtp = 0.d0
            tp = theta(i,j,k,bi,bj)-reftemp
            sp = salt(i,j,k,bi,bj)-refsalt
            adsp = adsp+adbetaloc(i,j)*(3.*eosc(9,kref)*sp+2.*eosc(5,
     $kref)+3.*eosc(9,kref)*sp+2.*eosc(8,kref)*tp)
            adtp = adtp+adbetaloc(i,j)*(eosc(7,kref)*tp+2.*eosc(8,kref)*
     $sp+eosc(4,kref)+eosc(7,kref)*tp)
            adbetaloc(i,j) = 0.d0
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsp
            adsp = 0.d0
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtp
            adtp = 0.d0
          end do
        end do
      endif

      end


      subroutine adfind_rho( bi, bj, imin, imax, jmin, jmax, k, kref, 
     $eqn, tfld, sfld, adtfld, adsfld, adrholoc )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_eos_nl/ eosc, eossig0, eosreft, eosrefs
      double precision eosc(9,nr+1)
      double precision eosrefs(nr+1)
      double precision eosreft(nr+1)
      double precision eossig0(nr+1)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adrholoc(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      character*(*) eqn
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer kref
      double precision sfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C define local variables
C==============================================
      double precision addeltasig
      double precision adsp
      double precision adtp
      integer i
      integer j
      double precision refsalt
      double precision reftemp
      double precision sp
      double precision tp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addeltasig = 0.d0
      adsp = 0.d0
      adtp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (eqn .eq. 'LINEAR') then
        do j = jmin, jmax
          do i = imin, imax
            adsfld(i,j,k,bi,bj) = adsfld(i,j,k,bi,bj)+adrholoc(i,j)*
     $rhonil*sbeta
            adtfld(i,j,k,bi,bj) = adtfld(i,j,k,bi,bj)-adrholoc(i,j)*
     $rhonil*talpha
            adrholoc(i,j) = 0.d0
          end do
        end do
      else if (eqn .eq. 'POLY3') then
        reftemp = eosreft(kref)
        refsalt = eosrefs(kref)
        do j = jmin, jmax
          addeltasig = 0.d0
          adsp = 0.d0
          adtp = 0.d0
          do i = imin, imax
            addeltasig = 0.d0
            adsp = 0.d0
            adtp = 0.d0
            tp = tfld(i,j,k,bi,bj)-reftemp
            sp = sfld(i,j,k,bi,bj)-refsalt
            addeltasig = addeltasig+adrholoc(i,j)
            adrholoc(i,j) = 0.d0
            adsp = adsp+addeltasig*((eosc(9,kref)*sp+eosc(5,kref))*sp+
     $eosc(2,kref)+(eosc(9,kref)*sp+eosc(5,kref)+eosc(9,kref)*sp)*sp+
     $(eosc(7,kref)*tp+eosc(8,kref)*sp+eosc(4,kref)+eosc(8,kref)*sp)*tp)
            adtp = adtp+addeltasig*((eosc(6,kref)*tp+eosc(7,kref)*sp+
     $eosc(3,kref))*tp+(eosc(8,kref)*sp+eosc(4,kref))*sp+eosc(1,kref)+
     $(eosc(6,kref)*tp+eosc(7,kref)*sp+eosc(3,kref)+eosc(6,kref)*tp)*tp)
            addeltasig = 0.d0
            adsfld(i,j,k,bi,bj) = adsfld(i,j,k,bi,bj)+adsp
            adsp = 0.d0
            adtfld(i,j,k,bi,bj) = adtfld(i,j,k,bi,bj)+adtp
            adtp = 0.d0
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adrholoc(i,j) = 0.d0
        end do
      end do

      end


      subroutine adfreeze( bi, bj, imin, imax, jmin, jmax, k )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C define local variables
C==============================================
      integer i
      integer j
      double precision tfreezing

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      tfreezing = -1.9
      do j = jmin, jmax
        do i = imin, imax
          if (gtnm1(i,j,k,bi,bj) .lt. tfreezing) then
            adgtnm1(i,j,k,bi,bj) = 0.d0
          endif
        end do
      end do

      end


      subroutine adgmredi_calc_diff( bi, bj, imin, imax, jmin, jmax, k, 
     $maskup, adkappart, adkappars )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adgm_wtensor/ adkwx, adkwy, adkwz
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /gm_params/ gm_background_k, gm_maxslope, gm_visbeck_alpha,
     $ gm_visbeck_length, gm_visbeck_depth, gm_visbeck_maxval_k, 
     $gm_taper_scheme, gm_scrit, gm_sd
      double precision gm_background_k
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k

C==============================================
C define arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkwz(i,j,k,bi,bj) = adkwz(i,j,k,bi,bj)+adkappars(i,j,k)*
     $maskup(i,j)*gm_background_k
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkwz(i,j,k,bi,bj) = adkwz(i,j,k,bi,bj)+adkappart(i,j,k)*
     $maskup(i,j)*gm_background_k
        end do
      end do

      end


      subroutine adgmredi_calc_tensor( bi, bj, k, sigmax, sigmay, 
     $sigmar, adsigmax, adsigmay, adsigmar )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adgm_wtensor/ adkwx, adkwy, adkwz
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer k
      double precision sigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmay(1-olx:snx+olx,1-oly:sny+oly,nr)

C==============================================
C define local variables
C==============================================
      double precision addrdsigmaltd(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision adssq
      double precision drdsigmaltd(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j
      integer km1
      integer mythid
      double precision slopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopey(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addrdsigmaltd(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addsigmadrreal(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adslopex(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adslopey(ip1,ip2) = 0.d0
        end do
      end do
      adssq = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      km1 = max(1,k-1)
      do j = 1-oly+1, sny+oly-1
        do i = 1-olx+1, snx+olx-1
          slopex(i,j) = 0.25*(sigmax(i+1,j,km1)+sigmax(i,j,km1)+
     $sigmax(i+1,j,k)+sigmax(i,j,k))
          slopey(i,j) = 0.25*(sigmay(i,j+1,km1)+sigmay(i,j,km1)+
     $sigmay(i,j+1,k)+sigmay(i,j,k))
          dsigmadrreal(i,j) = sigmar(i,j,k)
          if (hfacc(i,j,k,bi,bj) .eq. 0.) then
            slopex(i,j) = 0.
            slopey(i,j) = 0.
          endif
        end do
      end do
      call gmredi_slope_limit( dsigmadrreal,rf(k),slopex,slopey,
     $drdsigmaltd,bi,bj,mythid )
      do j = 1-oly+1, sny+oly-1
        adssq = 0.d0
        do i = 1-olx+1, snx+olx-1
          adssq = 0.d0
          if (hfacc(i,j,k,bi,bj) .eq. 0.) then
            slopex(i,j) = 0.
            slopey(i,j) = 0.
          endif
          adssq = adssq+adkwz(i,j,k,bi,bj)
          adkwz(i,j,k,bi,bj) = 0.d0
          adslopey(i,j) = adslopey(i,j)+2*adkwy(i,j,k,bi,bj)
          adkwy(i,j,k,bi,bj) = 0.d0
          adslopex(i,j) = adslopex(i,j)+2*adkwx(i,j,k,bi,bj)
          adkwx(i,j,k,bi,bj) = 0.d0
          adslopex(i,j) = adslopex(i,j)+2*adssq*slopex(i,j)
          adslopey(i,j) = adslopey(i,j)+2*adssq*slopey(i,j)
          adssq = 0.d0
          if (hfacc(i,j,k,bi,bj) .eq. 0.) then
            adslopey(i,j) = 0.d0
            adslopex(i,j) = 0.d0
          endif
        end do
      end do
      do j = 1-oly+1, sny+oly-1
        do i = 1-olx+1, snx+olx-1
          slopex(i,j) = 0.25*(sigmax(i+1,j,km1)+sigmax(i,j,km1)+
     $sigmax(i+1,j,k)+sigmax(i,j,k))
          slopey(i,j) = 0.25*(sigmay(i,j+1,km1)+sigmay(i,j,km1)+
     $sigmay(i,j+1,k)+sigmay(i,j,k))
          if (hfacc(i,j,k,bi,bj) .eq. 0.) then
            slopex(i,j) = 0.
            slopey(i,j) = 0.
          endif
        end do
      end do
      call adgmredi_slope_limit( dsigmadrreal,slopex,slopey,
     $addsigmadrreal,adslopex,adslopey,addrdsigmaltd )
      do j = 1-oly+1, sny+oly-1
        do i = 1-olx+1, snx+olx-1
          if (hfacc(i,j,k,bi,bj) .eq. 0.) then
            adslopey(i,j) = 0.d0
            adslopex(i,j) = 0.d0
          endif
          adsigmar(i,j,k) = adsigmar(i,j,k)+addsigmadrreal(i,j)
          addsigmadrreal(i,j) = 0.d0
          adsigmay(i,j+1,k) = adsigmay(i,j+1,k)+0.25*adslopey(i,j)
          adsigmay(i,j+1,km1) = adsigmay(i,j+1,km1)+0.25*adslopey(i,j)
          adsigmay(i,j,k) = adsigmay(i,j,k)+0.25*adslopey(i,j)
          adsigmay(i,j,km1) = adsigmay(i,j,km1)+0.25*adslopey(i,j)
          adslopey(i,j) = 0.d0
          adsigmax(i+1,j,k) = adsigmax(i+1,j,k)+0.25*adslopex(i,j)
          adsigmax(i,j,k) = adsigmax(i,j,k)+0.25*adslopex(i,j)
          adsigmax(i+1,j,km1) = adsigmax(i+1,j,km1)+0.25*adslopex(i,j)
          adsigmax(i,j,km1) = adsigmax(i,j,km1)+0.25*adslopex(i,j)
          adslopex(i,j) = 0.d0
        end do
      end do

      end


      subroutine adgmredi_calc_tensor_dummy( bi, bj, k )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adgm_wtensor/ adkwx, adkwy, adkwz
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer k

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly-1
        do i = 1-olx+1, snx+olx-1
          adkwz(i,j,k,bi,bj) = 0.d0
          adkwy(i,j,k,bi,bj) = 0.d0
          adkwx(i,j,k,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine adgmredi_rtransport( imin, imax, jmin, jmax, bi, bj, k,
     $ tracer, adtracer, addf )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adgm_wtensor/ adkwx, adkwy, adkwz
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /gm_params/ gm_background_k, gm_maxslope, gm_visbeck_alpha,
     $ gm_visbeck_length, gm_visbeck_depth, gm_visbeck_maxval_k, 
     $gm_taper_scheme, gm_scrit, gm_sd
      double precision gm_background_k
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k

      common /gm_wtensor/ kwx, kwy, kwz
      double precision kwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

C==============================================
C define arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C define local variables
C==============================================
      double precision addtdx
      double precision addtdy
      double precision dtdx
      double precision dtdy
      integer i
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addtdx = 0.d0
      addtdy = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usegmredi .and. k .gt. 1) then
        do j = jmin, jmax
          addtdx = 0.d0
          addtdy = 0.d0
          do i = imin, imax
            addtdx = 0.d0
            addtdy = 0.d0
            dtdx = 0.5*(0.5*(maskw(i+1,j,k,bi,bj)*recip_dxc(i+1,j,bi,bj)
     $*(tracer(i+1,j,k,bi,bj)-tracer(i,j,k,bi,bj))+maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)*(tracer(i,j,k,bi,bj)-tracer(i-1,j,k,bi,bj)))+
     $0.5*(maskw(i+1,j,k-1,bi,bj)*recip_dxc(i+1,j,bi,bj)*(tracer(i+1,j,
     $k-1,bi,bj)-tracer(i,j,k-1,bi,bj))+maskw(i,j,k-1,bi,bj)*
     $recip_dxc(i,j,bi,bj)*(tracer(i,j,k-1,bi,bj)-tracer(i-1,j,k-1,bi,
     $bj))))
            dtdy = 0.5*(0.5*(masks(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)*
     $(tracer(i,j,k,bi,bj)-tracer(i,j-1,k,bi,bj))+masks(i,j+1,k,bi,bj)*
     $recip_dyc(i,j+1,bi,bj)*(tracer(i,j+1,k,bi,bj)-tracer(i,j,k,bi,bj))
     $)+0.5*(masks(i,j,k-1,bi,bj)*recip_dyc(i,j,bi,bj)*(tracer(i,j,k-1,
     $bi,bj)-tracer(i,j-1,k-1,bi,bj))+masks(i,j+1,k-1,bi,bj)*
     $recip_dyc(i,j+1,bi,bj)*(tracer(i,j+1,k-1,bi,bj)-tracer(i,j,k-1,bi,
     $bj))))
            addtdx = addtdx-addf(i,j)*ra(i,j,bi,bj)*gm_background_k*
     $kwx(i,j,k,bi,bj)
            addtdy = addtdy-addf(i,j)*ra(i,j,bi,bj)*gm_background_k*
     $kwy(i,j,k,bi,bj)
            adkwx(i,j,k,bi,bj) = adkwx(i,j,k,bi,bj)-addf(i,j)*ra(i,j,bi,
     $bj)*gm_background_k*dtdx
            adkwy(i,j,k,bi,bj) = adkwy(i,j,k,bi,bj)-addf(i,j)*ra(i,j,bi,
     $bj)*gm_background_k*dtdy
            adtracer(i,j-1,k-1,bi,bj) = adtracer(i,j-1,k-1,bi,bj)-0.25*
     $addtdy*masks(i,j,k-1,bi,bj)*recip_dyc(i,j,bi,bj)
            adtracer(i,j-1,k,bi,bj) = adtracer(i,j-1,k,bi,bj)-0.25*
     $addtdy*masks(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)
            adtracer(i,j+1,k-1,bi,bj) = adtracer(i,j+1,k-1,bi,bj)+0.25*
     $addtdy*masks(i,j+1,k-1,bi,bj)*recip_dyc(i,j+1,bi,bj)
            adtracer(i,j+1,k,bi,bj) = adtracer(i,j+1,k,bi,bj)+0.25*
     $addtdy*masks(i,j+1,k,bi,bj)*recip_dyc(i,j+1,bi,bj)
            adtracer(i,j,k-1,bi,bj) = adtracer(i,j,k-1,bi,bj)+0.25*
     $addtdy*(masks(i,j,k-1,bi,bj)*recip_dyc(i,j,bi,bj)-masks(i,j+1,k-1,
     $bi,bj)*recip_dyc(i,j+1,bi,bj))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.25*addtdy*
     $(masks(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)-masks(i,j+1,k,bi,bj)*
     $recip_dyc(i,j+1,bi,bj))
            addtdy = 0.d0
            adtracer(i-1,j,k-1,bi,bj) = adtracer(i-1,j,k-1,bi,bj)-0.25*
     $addtdx*maskw(i,j,k-1,bi,bj)*recip_dxc(i,j,bi,bj)
            adtracer(i+1,j,k-1,bi,bj) = adtracer(i+1,j,k-1,bi,bj)+0.25*
     $addtdx*maskw(i+1,j,k-1,bi,bj)*recip_dxc(i+1,j,bi,bj)
            adtracer(i,j,k-1,bi,bj) = adtracer(i,j,k-1,bi,bj)+0.25*
     $addtdx*((-(maskw(i+1,j,k-1,bi,bj)*recip_dxc(i+1,j,bi,bj)))+
     $maskw(i,j,k-1,bi,bj)*recip_dxc(i,j,bi,bj))
            adtracer(i-1,j,k,bi,bj) = adtracer(i-1,j,k,bi,bj)-0.25*
     $addtdx*maskw(i,j,k,bi,bj)*recip_dxc(i,j,bi,bj)
            adtracer(i+1,j,k,bi,bj) = adtracer(i+1,j,k,bi,bj)+0.25*
     $addtdx*maskw(i+1,j,k,bi,bj)*recip_dxc(i+1,j,bi,bj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.25*addtdx*
     $((-(maskw(i+1,j,k,bi,bj)*recip_dxc(i+1,j,bi,bj)))+maskw(i,j,k,bi,
     $bj)*recip_dxc(i,j,bi,bj))
            addtdx = 0.d0
          end do
        end do
      endif

      end


      subroutine adgmredi_slope_limit( dsigmadrreal, slopex, slopey, 
     $addsigmadrreal, adslopex, adslopey, addrdsigmaltd )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      double precision small_number
      parameter ( small_number = 1.e-12 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /gm_params/ gm_background_k, gm_maxslope, gm_visbeck_alpha,
     $ gm_visbeck_length, gm_visbeck_depth, gm_visbeck_maxval_k, 
     $gm_taper_scheme, gm_scrit, gm_sd
      double precision gm_background_k
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k

      common /gm_params2/ gm_rmaxslope
      double precision gm_rmaxslope

C==============================================
C define arguments
C==============================================
      double precision addrdsigmaltd(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopey(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      double precision addsigmadrltd
      double precision adf1
      double precision adgradsmod
      double precision adsmod
      double precision adstratlimit
      double precision adsx
      double precision adsy
      double precision drdsigmaltd(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadrltd
      double precision f1
      double precision gradsmod
      integer i
      integer j
      double precision smod
      double precision stratlimit
      double precision sx
      double precision sy

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addsigmadrltd = 0.d0
      adf1 = 0.d0
      adgradsmod = 0.d0
      adsmod = 0.d0
      adstratlimit = 0.d0
      adsx = 0.d0
      adsy = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (gm_taper_scheme .eq. 'orig') then
        do j = 1-oly+1, sny+oly-1
          addsigmadrltd = 0.d0
          adgradsmod = 0.d0
          adstratlimit = 0.d0
          do i = 1-olx+1, snx+olx-1
            addsigmadrltd = 0.d0
            adgradsmod = 0.d0
            adstratlimit = 0.d0
            gradsmod = slopex(i,j)*slopex(i,j)+slopey(i,j)*slopey(i,j)
            if (gradsmod .ne. 0.) then
              gradsmod = sqrt(gradsmod)
            endif
            stratlimit = (-small_number)-gradsmod*gm_rmaxslope
            if (dsigmadrreal(i,j) .lt. stratlimit) then
              dsigmadrltd = dsigmadrreal(i,j)
            else
              dsigmadrltd = stratlimit
            endif
            drdsigmaltd(i,j) = 1./dsigmadrltd
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopey(i,j)*
     $slopey(i,j)
            adslopey(i,j) = -(adslopey(i,j)*drdsigmaltd(i,j))
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopex(i,j)*
     $slopex(i,j)
            adslopex(i,j) = -(adslopex(i,j)*drdsigmaltd(i,j))
            addsigmadrltd = addsigmadrltd-addrdsigmaltd(i,j)/
     $(dsigmadrltd*dsigmadrltd)
            addrdsigmaltd(i,j) = 0.d0
            if (dsigmadrreal(i,j) .lt. stratlimit) then
              addsigmadrreal(i,j) = addsigmadrreal(i,j)+addsigmadrltd
              addsigmadrltd = 0.d0
            else
              adstratlimit = adstratlimit+addsigmadrltd
              addsigmadrltd = 0.d0
            endif
            adgradsmod = adgradsmod-adstratlimit*gm_rmaxslope
            adstratlimit = 0.d0
            gradsmod = slopex(i,j)*slopex(i,j)+slopey(i,j)*slopey(i,j)
            if (gradsmod .ne. 0.) then
              adgradsmod = adgradsmod*(1./(2.*sqrt(gradsmod)))
            endif
            adslopex(i,j) = adslopex(i,j)+2*adgradsmod*slopex(i,j)
            adslopey(i,j) = adslopey(i,j)+2*adgradsmod*slopey(i,j)
            adgradsmod = 0.d0
          end do
        end do
      else if (gm_taper_scheme .eq. 'clipping') then
        do j = 1-oly+1, sny+oly-1
          addsigmadrltd = 0.d0
          adgradsmod = 0.d0
          do i = 1-olx+1, snx+olx-1
            addsigmadrltd = 0.d0
            adgradsmod = 0.d0
            gradsmod = slopex(i,j)*slopex(i,j)+slopey(i,j)*slopey(i,j)
            if (gradsmod .ne. 0.) then
              gradsmod = sqrt(gradsmod)
            endif
            dsigmadrltd = -(small_number+gradsmod*gm_rmaxslope)
            if (dsigmadrreal(i,j) .lt. dsigmadrltd) then
              dsigmadrltd = dsigmadrreal(i,j)
            endif
            drdsigmaltd(i,j) = 1./dsigmadrltd
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopey(i,j)*
     $slopey(i,j)
            adslopey(i,j) = -(adslopey(i,j)*drdsigmaltd(i,j))
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopex(i,j)*
     $slopex(i,j)
            adslopex(i,j) = -(adslopex(i,j)*drdsigmaltd(i,j))
            addsigmadrltd = addsigmadrltd-addrdsigmaltd(i,j)/
     $(dsigmadrltd*dsigmadrltd)
            addrdsigmaltd(i,j) = 0.d0
            dsigmadrltd = -(small_number+gradsmod*gm_rmaxslope)
            if (dsigmadrreal(i,j) .lt. dsigmadrltd) then
              addsigmadrreal(i,j) = addsigmadrreal(i,j)+addsigmadrltd
              addsigmadrltd = 0.d0
            endif
            adgradsmod = adgradsmod-addsigmadrltd*gm_rmaxslope
            addsigmadrltd = 0.d0
            gradsmod = slopex(i,j)*slopex(i,j)+slopey(i,j)*slopey(i,j)
            if (gradsmod .ne. 0.) then
              adgradsmod = adgradsmod*(1./(2.*sqrt(gradsmod)))
            endif
            adslopex(i,j) = adslopex(i,j)+2*adgradsmod*slopex(i,j)
            adslopey(i,j) = adslopey(i,j)+2*adgradsmod*slopey(i,j)
            adgradsmod = 0.d0
          end do
        end do
      else if (gm_taper_scheme .eq. 'gkw91') then
        do j = 1-oly+1, sny+oly-1
          addsigmadrltd = 0.d0
          adgradsmod = 0.d0
          do i = 1-olx+1, snx+olx-1
            addsigmadrltd = 0.d0
            adgradsmod = 0.d0
            gradsmod = slopex(i,j)*slopex(i,j)+slopey(i,j)*slopey(i,j)
            if (gradsmod .ne. 0.) then
              gradsmod = sqrt(gradsmod)
            endif
            dsigmadrltd = dsigmadrreal(i,j)
            if (dsigmadrltd .ne. 0.) then
              drdsigmaltd(i,j) = 1./dsigmadrltd
            else
              drdsigmaltd(i,j) = 0.
            endif
            if (gradsmod .le. gm_maxslope*abs(dsigmadrreal(i,j))) then
              addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopey(i,j)*
     $slopey(i,j)
              adslopey(i,j) = -(adslopey(i,j)*drdsigmaltd(i,j))
              addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopex(i,j)*
     $slopex(i,j)
              adslopex(i,j) = -(adslopex(i,j)*drdsigmaltd(i,j))
            else
              addsigmadrltd = addsigmadrltd-adslopey(i,j)*slopey(i,j)*
     $(gm_maxslope/gradsmod)**2
              adgradsmod = adgradsmod+2*adslopey(i,j)*slopey(i,j)*
     $dsigmadrltd*gm_maxslope/(gradsmod*gradsmod)*(gm_maxslope/gradsmod)
              adslopey(i,j) = -(adslopey(i,j)*dsigmadrltd*(gm_maxslope/
     $gradsmod)**2)
              addsigmadrltd = addsigmadrltd-adslopex(i,j)*slopex(i,j)*
     $(gm_maxslope/gradsmod)**2
              adgradsmod = adgradsmod+2*adslopex(i,j)*slopex(i,j)*
     $dsigmadrltd*gm_maxslope/(gradsmod*gradsmod)*(gm_maxslope/gradsmod)
              adslopex(i,j) = -(adslopex(i,j)*dsigmadrltd*(gm_maxslope/
     $gradsmod)**2)
            endif
            if (dsigmadrltd .ne. 0.) then
              addsigmadrltd = addsigmadrltd-addrdsigmaltd(i,j)/
     $(dsigmadrltd*dsigmadrltd)
              addrdsigmaltd(i,j) = 0.d0
            else
              addrdsigmaltd(i,j) = 0.d0
            endif
            addsigmadrreal(i,j) = addsigmadrreal(i,j)+addsigmadrltd
            addsigmadrltd = 0.d0
            gradsmod = slopex(i,j)*slopex(i,j)+slopey(i,j)*slopey(i,j)
            if (gradsmod .ne. 0.) then
              adgradsmod = adgradsmod*(1./(2.*sqrt(gradsmod)))
            endif
            adslopex(i,j) = adslopex(i,j)+2*adgradsmod*slopex(i,j)
            adslopey(i,j) = adslopey(i,j)+2*adgradsmod*slopey(i,j)
            adgradsmod = 0.d0
          end do
        end do
      else if (gm_taper_scheme .eq. 'dm95') then
        do j = 1-oly+1, sny+oly-1
          addsigmadrltd = 0.d0
          adf1 = 0.d0
          adsmod = 0.d0
          adsx = 0.d0
          adsy = 0.d0
          do i = 1-olx+1, snx+olx-1
            addsigmadrltd = 0.d0
            adf1 = 0.d0
            adsmod = 0.d0
            adsx = 0.d0
            adsy = 0.d0
            dsigmadrltd = dsigmadrreal(i,j)
            if (dsigmadrltd .ne. 0.) then
              drdsigmaltd(i,j) = 1./dsigmadrltd
            else
              drdsigmaltd(i,j) = 0.
            endif
            sx = -(slopex(i,j)*drdsigmaltd(i,j))
            sy = -(slopey(i,j)*drdsigmaltd(i,j))
            smod = sx*sx+sy*sy
            if (smod .ne. 0.) then
              smod = sqrt(smod)
            endif
            f1 = 0.5*(1.+tanh((gm_scrit-smod)/gm_sd))
            adf1 = adf1+adslopey(i,j)*sy
            adsy = adsy+adslopey(i,j)*f1
            adslopey(i,j) = 0.d0
            adf1 = adf1+adslopex(i,j)*sx
            adsx = adsx+adslopex(i,j)*f1
            adslopex(i,j) = 0.d0
            adsmod = adsmod-0.5*adf1*(1./cosh((gm_scrit-smod)/gm_sd)**2/
     $gm_sd)
            adf1 = 0.d0
            smod = sx*sx+sy*sy
            if (smod .ne. 0.) then
              adsmod = adsmod*(1./(2.*sqrt(smod)))
            endif
            adsx = adsx+2*adsmod*sx
            adsy = adsy+2*adsmod*sy
            adsmod = 0.d0
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adsy*slopey(i,j)
            adslopey(i,j) = adslopey(i,j)-adsy*drdsigmaltd(i,j)
            adsy = 0.d0
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adsx*slopex(i,j)
            adslopex(i,j) = adslopex(i,j)-adsx*drdsigmaltd(i,j)
            adsx = 0.d0
            if (dsigmadrltd .ne. 0.) then
              addsigmadrltd = addsigmadrltd-addrdsigmaltd(i,j)/
     $(dsigmadrltd*dsigmadrltd)
              addrdsigmaltd(i,j) = 0.d0
            else
              addrdsigmaltd(i,j) = 0.d0
            endif
            addsigmadrreal(i,j) = addsigmadrreal(i,j)+addsigmadrltd
            addsigmadrltd = 0.d0
          end do
        end do
      else if (gm_taper_scheme .eq. 'ldd97') then
        do j = 1-oly+1, sny+oly-1
          addsigmadrltd = 0.d0
          adf1 = 0.d0
          adsmod = 0.d0
          adsx = 0.d0
          do i = 1-olx+1, snx+olx-1
            addsigmadrltd = 0.d0
            adf1 = 0.d0
            adsmod = 0.d0
            adsx = 0.d0
            dsigmadrltd = dsigmadrreal(i,j)
            if (dsigmadrltd .ne. 0.) then
              drdsigmaltd(i,j) = 1./dsigmadrltd
            else
              drdsigmaltd(i,j) = 0.
            endif
            sx = -(slopey(i,j)*drdsigmaltd(i,j))
            smod = sx*sx+sy*sy
            if (smod .ne. 0.) then
              smod = sqrt(smod)
            endif
            f1 = 0.5*(1.+tanh((gm_scrit-smod)/gm_sd))
            adf1 = adf1+adslopey(i,j)*sy
            adsy = adsy+adslopey(i,j)*f1
            adslopey(i,j) = 0.d0
            adf1 = adf1+adslopex(i,j)*sx
            adsx = adsx+adslopex(i,j)*f1
            adslopex(i,j) = 0.d0
            adsmod = adsmod-0.5*adf1*(1./cosh((gm_scrit-smod)/gm_sd)**2/
     $gm_sd)
            adf1 = 0.d0
            smod = sx*sx+sy*sy
            if (smod .ne. 0.) then
              adsmod = adsmod*(1./(2.*sqrt(smod)))
            endif
            adsx = adsx+2*adsmod*sx
            adsy = adsy+2*adsmod*sy
            adsmod = 0.d0
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adsx*slopey(i,j)
            adslopey(i,j) = adslopey(i,j)-adsx*drdsigmaltd(i,j)
            adsx = 0.d0
            if (dsigmadrltd .ne. 0.) then
              addsigmadrltd = addsigmadrltd-addrdsigmaltd(i,j)/
     $(dsigmadrltd*dsigmadrltd)
              addrdsigmaltd(i,j) = 0.d0
            else
              addrdsigmaltd(i,j) = 0.d0
            endif
            addsigmadrreal(i,j) = addsigmadrreal(i,j)+addsigmadrltd
            addsigmadrltd = 0.d0
          end do
        end do
      else if (gm_taper_scheme .eq. ' ') then
        do j = 1-oly+1, sny+oly-1
          addsigmadrltd = 0.d0
          do i = 1-olx+1, snx+olx-1
            addsigmadrltd = 0.d0
            dsigmadrltd = dsigmadrreal(i,j)
            if (dsigmadrltd .ne. 0.) then
              drdsigmaltd(i,j) = 1./dsigmadrltd
            else
              drdsigmaltd(i,j) = 0.
            endif
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopey(i,j)*
     $slopey(i,j)
            adslopey(i,j) = -(adslopey(i,j)*drdsigmaltd(i,j))
            addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopex(i,j)*
     $slopex(i,j)
            adslopex(i,j) = -(adslopex(i,j)*drdsigmaltd(i,j))
            if (dsigmadrltd .ne. 0.) then
              addsigmadrltd = addsigmadrltd-addrdsigmaltd(i,j)/
     $(dsigmadrltd*dsigmadrltd)
              addrdsigmaltd(i,j) = 0.d0
            else
              addrdsigmaltd(i,j) = 0.d0
            endif
            addsigmadrreal(i,j) = addsigmadrreal(i,j)+addsigmadrltd
            addsigmadrltd = 0.d0
          end do
        end do
      endif

      end


      subroutine adgmredi_xtransport( imin, imax, jmin, jmax, bi, bj, k,
     $ xa, adtracer, addf )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /gm_params/ gm_background_k, gm_maxslope, gm_visbeck_alpha,
     $ gm_visbeck_length, gm_visbeck_depth, gm_visbeck_maxval_k, 
     $gm_taper_scheme, gm_scrit, gm_sd
      double precision gm_background_k
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

C==============================================
C define arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usegmredi) then
        do j = jmin, jmax
          do i = imin, imax
            adtracer(i-1,j,k,bi,bj) = adtracer(i-1,j,k,bi,bj)+addf(i,j)*
     $xa(i,j)*gm_background_k*recip_dxc(i,j,bi,bj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-addf(i,j)*
     $xa(i,j)*gm_background_k*recip_dxc(i,j,bi,bj)
          end do
        end do
      endif

      end


      subroutine adgmredi_ytransport( imin, imax, jmin, jmax, bi, bj, k,
     $ ya, adtracer, addf )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /gm_params/ gm_background_k, gm_maxslope, gm_visbeck_alpha,
     $ gm_visbeck_length, gm_visbeck_depth, gm_visbeck_maxval_k, 
     $gm_taper_scheme, gm_scrit, gm_sd
      double precision gm_background_k
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, useecco
      logical useaim
      logical useecco
      logical usegmredi
      logical usekpp
      logical useobcs

C==============================================
C define arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usegmredi) then
        do j = jmin, jmax
          do i = imin, imax
            adtracer(i,j-1,k,bi,bj) = adtracer(i,j-1,k,bi,bj)+addf(i,j)*
     $ya(i,j)*gm_background_k*recip_dyc(i,j,bi,bj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-addf(i,j)*
     $ya(i,j)*gm_background_k*recip_dyc(i,j,bi,bj)
          end do
        end do
      endif

      end


      subroutine adgrad_sigma( bi, bj, k, adrhok, adsigkm1, adsigkp1, 
     $adsigmax, adsigmay, adsigmar )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigkm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigkp1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer k

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          if (k .ne. 1 .and. hfacc(i,j,k,bi,bj) .ne. 0.) then
            adsigkm1(i,j) = adsigkm1(i,j)+adsigmar(i,j,k)*recip_drc(k)*
     $rkfac
            adsigkp1(i,j) = adsigkp1(i,j)-adsigmar(i,j,k)*recip_drc(k)*
     $rkfac
            adsigmar(i,j,k) = 0.d0
          else
            adsigmar(i,j,k) = 0.d0
          endif
        end do
      end do
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adrhok(i,j-1) = adrhok(i,j-1)-adsigmay(i,j,k)*masks(i,j,k,bi,
     $bj)*recip_dyc(i,j,bi,bj)
          adrhok(i,j) = adrhok(i,j)+adsigmay(i,j,k)*masks(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)
          adsigmay(i,j,k) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adrhok(i-1,j) = adrhok(i-1,j)-adsigmax(i,j,k)*maskw(i,j,k,bi,
     $bj)*recip_dxc(i,j,bi,bj)
          adrhok(i,j) = adrhok(i,j)+adsigmax(i,j,k)*maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)
          adsigmax(i,j,k) = 0.d0
        end do
      end do

      end


      subroutine adimpldiff( bi, bj, imin, imax, jmin, jmax, deltatx, 
     $kapparx, recip_hfac, gxnm1, adkapparx, adgxnm1 )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision adgxnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkapparx(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      double precision deltatx
      double precision gxnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer imax
      integer imin
      integer jmax
      integer jmin
      double precision kapparx(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision recip_hfac(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

C==============================================
C define local variables
C==============================================
      double precision a(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision ada(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adb(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adbet(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adc(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adgam(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adgynm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision b(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision bet(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision c(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision gam(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision gynm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer k

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            ada(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adb(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adbet(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adc(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adgam(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgynm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          a(i,j,1) = 0.d0
        end do
      end do
      do k = 2, nr
        do j = jmin, jmax
          do i = imin, imax
            a(i,j,k) = -(deltatx*recip_hfac(i,j,k,bi,bj)*recip_drf(k)*
     $kapparx(i,j,k)*recip_drc(k))
          end do
        end do
      end do
      do k = 1, nr-1
        do j = jmin, jmax
          do i = imin, imax
            c(i,j,k) = -(deltatx*recip_hfac(i,j,k,bi,bj)*recip_drf(k)*
     $kapparx(i,j,k+1)*recip_drc(k+1))
            if (recip_hfac(i,j,k+1,bi,bj) .eq. 0.) then
              c(i,j,k) = 0.
            endif
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          c(i,j,nr) = 0.d0
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            b(i,j,k) = 1.d0-c(i,j,k)-a(i,j,k)
          end do
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            bet(i,j,k) = 0.d0
            gam(i,j,k) = 0.d0
          end do
        end do
      end do
      if (nr .gt. 1) then
        do j = jmin, jmax
          do i = imin, imax
            if (b(i,j,1) .ne. 0.) then
              bet(i,j,1) = 1.d0/b(i,j,1)
            endif
          end do
        end do
      endif
      if (nr .gt. 2) then
        do k = 2, nr
          do j = jmin, jmax
            do i = imin, imax
              gam(i,j,k) = c(i,j,k-1)*bet(i,j,k-1)
              if (b(i,j,k)-a(i,j,k)*gam(i,j,k) .ne. 0.) then
                bet(i,j,k) = 1.d0/(b(i,j,k)-a(i,j,k)*gam(i,j,k))
              endif
            end do
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          gynm1(i,j,1,bi,bj) = gxnm1(i,j,1,bi,bj)*bet(i,j,1)
        end do
      end do
      do k = 2, nr
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = bet(i,j,k)*(gxnm1(i,j,k,bi,bj)-a(i,j,k)
     $*gynm1(i,j,k-1,bi,bj))
          end do
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            adgynm1(i,j,k,bi,bj) = adgynm1(i,j,k,bi,bj)+adgxnm1(i,j,k,
     $bi,bj)
            adgxnm1(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do
      do k = nr-1, 2, -1
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = gynm1(i,j,k,bi,bj)-gam(i,j,k+1)*
     $gynm1(i,j,k+1,bi,bj)
          end do
        end do
      end do
      do k = 1, nr-1
        do j = jmin, jmax
          do i = imin, imax
            adgam(i,j,k+1) = adgam(i,j,k+1)-adgynm1(i,j,k,bi,bj)*
     $gynm1(i,j,k+1,bi,bj)
            adgynm1(i,j,k+1,bi,bj) = adgynm1(i,j,k+1,bi,bj)-adgynm1(i,j,
     $k,bi,bj)*gam(i,j,k+1)
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          gynm1(i,j,1,bi,bj) = gxnm1(i,j,1,bi,bj)*bet(i,j,1)
        end do
      end do
      do k = 2, nr-1
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = bet(i,j,k)*(gxnm1(i,j,k,bi,bj)-a(i,j,k)
     $*gynm1(i,j,k-1,bi,bj))
          end do
        end do
      end do
      do k = nr, 2, -1
        do j = jmin, jmax
          do i = imin, imax
            ada(i,j,k) = ada(i,j,k)-adgynm1(i,j,k,bi,bj)*bet(i,j,k)*
     $gynm1(i,j,k-1,bi,bj)
            adbet(i,j,k) = adbet(i,j,k)+adgynm1(i,j,k,bi,bj)*(gxnm1(i,j,
     $k,bi,bj)-a(i,j,k)*gynm1(i,j,k-1,bi,bj))
            adgxnm1(i,j,k,bi,bj) = adgxnm1(i,j,k,bi,bj)+adgynm1(i,j,k,
     $bi,bj)*bet(i,j,k)
            adgynm1(i,j,k-1,bi,bj) = adgynm1(i,j,k-1,bi,bj)-adgynm1(i,j,
     $k,bi,bj)*bet(i,j,k)*a(i,j,k)
            adgynm1(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adbet(i,j,1) = adbet(i,j,1)+adgynm1(i,j,1,bi,bj)*gxnm1(i,j,1,
     $bi,bj)
          adgxnm1(i,j,1,bi,bj) = adgxnm1(i,j,1,bi,bj)+adgynm1(i,j,1,bi,
     $bj)*bet(i,j,1)
          adgynm1(i,j,1,bi,bj) = 0.d0
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            bet(i,j,k) = 0.d0
            gam(i,j,k) = 0.d0
          end do
        end do
      end do
      if (nr .gt. 1) then
        do j = jmin, jmax
          do i = imin, imax
            if (b(i,j,1) .ne. 0.) then
              bet(i,j,1) = 1.d0/b(i,j,1)
            endif
          end do
        end do
      endif
      if (nr .gt. 2) then
        do k = 2, nr-1
          do j = jmin, jmax
            do i = imin, imax
              gam(i,j,k) = c(i,j,k-1)*bet(i,j,k-1)
              if (b(i,j,k)-a(i,j,k)*gam(i,j,k) .ne. 0.) then
                bet(i,j,k) = 1.d0/(b(i,j,k)-a(i,j,k)*gam(i,j,k))
              endif
            end do
          end do
        end do
        do k = nr, 2, -1
          do j = jmin, jmax
            do i = imin, imax
              gam(i,j,k) = c(i,j,k-1)*bet(i,j,k-1)
              if (b(i,j,k)-a(i,j,k)*gam(i,j,k) .ne. 0.) then
                ada(i,j,k) = ada(i,j,k)+adbet(i,j,k)*(1.d0*gam(i,j,k)/
     $((b(i,j,k)-a(i,j,k)*gam(i,j,k))*(b(i,j,k)-a(i,j,k)*gam(i,j,k))))
                adb(i,j,k) = adb(i,j,k)-adbet(i,j,k)/((b(i,j,k)-a(i,j,k)
     $*gam(i,j,k))*(b(i,j,k)-a(i,j,k)*gam(i,j,k)))
                adgam(i,j,k) = adgam(i,j,k)+adbet(i,j,k)*(1.d0*a(i,j,k)/
     $((b(i,j,k)-a(i,j,k)*gam(i,j,k))*(b(i,j,k)-a(i,j,k)*gam(i,j,k))))
                adbet(i,j,k) = 0.d0
              endif
              adbet(i,j,k-1) = adbet(i,j,k-1)+adgam(i,j,k)*c(i,j,k-1)
              adc(i,j,k-1) = adc(i,j,k-1)+adgam(i,j,k)*bet(i,j,k-1)
              adgam(i,j,k) = 0.d0
            end do
          end do
        end do
      endif
      if (nr .gt. 1) then
        do j = jmin, jmax
          do i = imin, imax
            if (b(i,j,1) .ne. 0.) then
              adb(i,j,1) = adb(i,j,1)-adbet(i,j,1)/(b(i,j,1)*b(i,j,1))
              adbet(i,j,1) = 0.d0
            endif
          end do
        end do
      endif
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            ada(i,j,k) = ada(i,j,k)-adb(i,j,k)
            adc(i,j,k) = adc(i,j,k)-adb(i,j,k)
            adb(i,j,k) = 0.d0
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adc(i,j,nr) = 0.d0
        end do
      end do
      do k = 1, nr-1
        do j = jmin, jmax
          do i = imin, imax
            if (recip_hfac(i,j,k+1,bi,bj) .eq. 0.) then
              adc(i,j,k) = 0.d0
            endif
            adkapparx(i,j,k+1) = adkapparx(i,j,k+1)-adc(i,j,k)*deltatx*
     $recip_hfac(i,j,k,bi,bj)*recip_drf(k)*recip_drc(k+1)
            adc(i,j,k) = 0.d0
          end do
        end do
      end do
      do k = 2, nr
        do j = jmin, jmax
          do i = imin, imax
            adkapparx(i,j,k) = adkapparx(i,j,k)-ada(i,j,k)*deltatx*
     $recip_hfac(i,j,k,bi,bj)*recip_drf(k)*recip_drc(k)
            ada(i,j,k) = 0.d0
          end do
        end do
      end do

      end


      subroutine adinitialise_varia( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_cd/ addynvars_cd1, addynvars_cd2, addynvars_cd3,
     $ addynvars_cd4, addynvars_cd5, addynvars_cd6, addynvars_cd7
      double precision addynvars_cd1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_cd2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_cd3(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision addynvars_cd4(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_cd5(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_cd6(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_cd7(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /addynvars_r/ addynvars_r1, addynvars_r2, addynvars_r3, 
     $addynvars_r4, addynvars_r5, addynvars_r6, addynvars_r7, 
     $addynvars_r8, addynvars_r9, addynvars_r10, addynvars_r11, 
     $addynvars_r12, addynvars_r13, addynvars_r14
      double precision addynvars_r1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision addynvars_r10(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r11(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r12(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r13(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r14(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r3(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r4(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r5(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r6(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r7(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r8(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision addynvars_r9(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call barrier( mythid )
      call barrier( mythid )
      call adpackages_init_variables( mythid )
      call barrier( mythid )
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_cd1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_cd2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              addynvars_cd3(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_cd4(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_cd5(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              addynvars_r1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r11(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r12(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r13(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r14(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r3(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r4(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r5(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                addynvars_r6(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      call barrier( mythid )

      end


      subroutine adintegrate_for_w( bi, bj, k, adufld, advfld, adwfld )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

C==============================================
C define arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k

C==============================================
C define local variables
C==============================================
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (k .eq. 1 .and. rigidlid) then
        do j = 1-oly, sny+oly-1
          do i = 1-olx, snx+olx-1
            adwfld(i,j,k,bi,bj) = 0.d0
          end do
        end do
      else if (k .eq. nr) then
        do j = 1-oly, sny+oly-1
          do i = 1-olx, snx+olx-1
            adutrans(i+1,j) = adutrans(i+1,j)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            adutrans(i,j) = adutrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            advtrans(i,j+1) = advtrans(i,j+1)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            advtrans(i,j) = advtrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            adwfld(i,j,k,bi,bj) = 0.d0
          end do
        end do
      else
        do j = 1-oly, sny+oly-1
          do i = 1-olx, snx+olx-1
            adutrans(i+1,j) = adutrans(i+1,j)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            adutrans(i,j) = adutrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            advtrans(i,j+1) = advtrans(i,j+1)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            advtrans(i,j) = advtrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)
            adwfld(i,j,k+1,bi,bj) = adwfld(i,j,k+1,bi,bj)+adwfld(i,j,k,
     $bi,bj)
            adwfld(i,j,k,bi,bj) = 0.d0
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+advtrans(i,j)*dxg(i,
     $j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
          advtrans(i,j) = 0.d0
          adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+adutrans(i,j)*dyg(i,
     $j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
          adutrans(i,j) = 0.d0
        end do
      end do

      end


      subroutine mdkpp_calc( bi, bj, mytime, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer imax
      parameter ( imax = snx+3 )
      integer imin
      parameter ( imin = -2 )
      integer itop
      parameter ( itop = snx+olx )
      integer oly
      parameter ( oly = 3 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 40 )
      integer jmax
      parameter ( jmax = sny+3 )
      integer jmin
      parameter ( jmin = -2 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer mdiff
      parameter ( mdiff = 3 )
      double precision minusone
      parameter ( minusone = -1. )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nrm1
      parameter ( nrm1 = nr-1 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )
      double precision p0
      parameter ( p0 = 0. )
      double precision p125
      parameter ( p125 = 0.125 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C define common blocks
C==============================================
      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /ffields/ fu, fv, qnet, empmr, sst, sss, qsw
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /kpp_i/ nzmax
      integer nzmax(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

      common /kpp_r2/ kpp_freq, kpp_dumpfreq, kpp_tavefreq
      double precision kpp_dumpfreq
      double precision kpp_freq
      double precision kpp_tavefreq

      common /kpp_short/ kppfrac
      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta
      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamckeys/ key, ikey, idkey
      integer idkey
      integer ikey
      integer key

      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw
      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      double precision bo(ibot:itop,jbot:jtop)
      double precision bosol(ibot:itop,jbot:jtop)
      double precision dbloc(ibot:itop,jbot:jtop,nr)
      double precision dvsq(ibot:itop,jbot:jtop,nr)
      double precision ghat(ibot:itop,jbot:jtop,nr)
      double precision hbl(ibot:itop,jbot:jtop)
      integer help_h
      integer help_i
      integer i
      integer im1
      integer ip1
      integer j
      integer jm1
      integer jp1
      integer k
      integer kp1
      double precision ritop(ibot:itop,jbot:jtop,nr)
      double precision shsq(ibot:itop,jbot:jtop,nr)
      double precision tempvar1
      double precision tempvar2
      double precision ustar(ibot:itop,jbot:jtop)
      double precision vddiff(ibot:itop,jbot:jtop,0:nrp1,mdiff)
      integer work1(ibot:itop,jbot:jtop)
      double precision work2(ibot:itop,jbot:jtop)
      double precision worka(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C**********************************************
C executable statements of routine
C**********************************************
      if (different_multiple(kpp_freq,mytime,mytime-deltatclock) .or. 
     $mytime .eq. starttime) then
        call statekpp( bi,bj,mythid,work2,dbloc,ritop,vddiff(ibot,jbot,
     $1,1),vddiff(ibot,jbot,1,2) )
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              ghat(i,j,k) = dbloc(i,j,k)
            end do
          end do
        end do
        do k = 1, nr-1
          help_h = k+1
          call kpp_smooth_horiz( help_h,bi,bj,ghat(ibot,jbot,k) )
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              dbloc(i,j,k) = dbloc(i,j,k)*pmask(i,j,k,bi,bj)
              ghat(i,j,k) = ghat(i,j,k)*pmask(i,j,k,bi,bj)
              ritop(i,j,k) = ritop(i,j,k)*pmask(i,j,k,bi,bj)
              if (k .eq. nzmax(i,j,bi,bj)) then
                dbloc(i,j,k) = p0
                ghat(i,j,k) = p0
                ritop(i,j,k) = p0
              endif
              ritop(i,j,k) = (zgrid(1)-zgrid(k))*ritop(i,j,k)
            end do
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            ustar(i,j) = p0
            bo(i,j) = p0
            bosol(i,j) = p0
          end do
        end do
        do j = jmin, jmax
          jp1 = j+1
          do i = imin, imax
            ip1 = i+1
            tempvar1 = (surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))+(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))*(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))
            if (tempvar1 .lt. phepsi*phepsi) then
              ustar(i,j) = sqrt(phepsi*p5*delz(1))
            else
              tempvar2 = sqrt(tempvar1)*p5*delz(1)
              ustar(i,j) = sqrt(tempvar2)
            endif
            bo(i,j) = -(gravity*(vddiff(i,j,1,1)*surfacetendencyt(i,j,
     $bi,bj)+vddiff(i,j,1,2)*surfacetendencys(i,j,bi,bj))*delz(1)/
     $work2(i,j))
            bosol(i,j) = gravity*vddiff(i,j,1,1)*qsw(i,j,bi,bj)*
     $recip_cp*recip_rhonil*recip_drf(1)*delz(1)/work2(i,j)
          end do
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              shsq(i,j,k) = p0
              dvsq(i,j,k) = p0
            end do
          end do
        end do
        do k = 1, nr
          do j = jmin, jmax
            jp1 = j+1
            do i = imin, imax
              ip1 = i+1
              dvsq(i,j,k) = p5*((uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))*
     $(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))+(uvel(ip1,j,1,bi,bj)-
     $uvel(ip1,j,k,bi,bj))*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))+
     $(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))*(vvel(i,j,1,bi,bj)-vvel(i,j,
     $k,bi,bj))+(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))*(vvel(i,jp1,1,
     $bi,bj)-vvel(i,jp1,k,bi,bj)))
            end do
          end do
        end do
        do k = 1, nrm1
          kp1 = k+1
          do j = jmin, jmax
            jm1 = j-1
            jp1 = j+1
            do i = imin, imax
              im1 = i-1
              ip1 = i+1
              shsq(i,j,k) = p5*((uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))*
     $(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))+(uvel(ip1,j,k,bi,bj)-
     $uvel(ip1,j,kp1,bi,bj))*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
     $+(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))*(vvel(i,j,k,bi,bj)-
     $vvel(i,j,kp1,bi,bj))+(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))*
     $(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj)))
              shsq(i,j,k) = p5*shsq(i,j,k)+p125*((uvel(i,jm1,k,bi,bj)-
     $uvel(i,jm1,kp1,bi,bj))*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
     $+(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))*(uvel(ip1,jm1,k,
     $bi,bj)-uvel(ip1,jm1,kp1,bi,bj))+(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,
     $kp1,bi,bj))*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))+(uvel(ip1,
     $jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))*(uvel(ip1,jp1,k,bi,bj)-
     $uvel(ip1,jp1,kp1,bi,bj))+(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,
     $bj))*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))+(vvel(im1,jp1,k,
     $bi,bj)-vvel(im1,jp1,kp1,bi,bj))*(vvel(im1,jp1,k,bi,bj)-vvel(im1,
     $jp1,kp1,bi,bj))+(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))*
     $(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))+(vvel(ip1,jp1,k,bi,bj)
     $-vvel(ip1,jp1,kp1,bi,bj))*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,
     $bi,bj)))
            end do
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            work1(i,j) = nzmax(i,j,bi,bj)
            work2(i,j) = fcori(i,j,bi,bj)
          end do
        end do
        call mdkppmix( mytime,mythid,work1,shsq,dvsq,ustar,bo,bosol,
     $dbloc,ritop,work2,ikey,vddiff,ghat,hbl )
        do j = jmin, jmax
          do i = imin, imax
            do k = 1, nr
              kppviscaz(i,j,k,bi,bj) = vddiff(i,j,k-1,1)*pmask(i,j,k,bi,
     $bj)
              kppdiffkzs(i,j,k,bi,bj) = vddiff(i,j,k-1,2)*pmask(i,j,k,
     $bi,bj)
              kppdiffkzt(i,j,k,bi,bj) = vddiff(i,j,k-1,3)*pmask(i,j,k,
     $bi,bj)
              kppghat(i,j,k,bi,bj) = ghat(i,j,k)*pmask(i,j,k,bi,bj)
            end do
            kpphbl(i,j,bi,bj) = hbl(i,j)*pmask(i,j,1,bi,bj)
          end do
        end do
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            worka(i,j) = kpphbl(i,j,bi,bj)
          end do
        end do
        help_i = (snx+2*olx)*(sny+2*oly)
        call swfrac( help_i,minusone,mytime,mythid,worka )
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            kppfrac(i,j,bi,bj) = worka(i,j)
          end do
        end do
      endif
      end


      subroutine adkpp_calc( bi, bj, mytime )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer imax
      parameter ( imax = snx+3 )
      integer imin
      parameter ( imin = -2 )
      integer itop
      parameter ( itop = snx+olx )
      integer oly
      parameter ( oly = 3 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 40 )
      integer jmax
      parameter ( jmax = sny+3 )
      integer jmin
      parameter ( jmin = -2 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer mdiff
      parameter ( mdiff = 3 )
      double precision minusone
      parameter ( minusone = -1. )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nrm1
      parameter ( nrm1 = nr-1 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )
      double precision p0
      parameter ( p0 = 0. )
      double precision p125
      parameter ( p125 = 0.125 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adkpp_short/ adkppfrac
      double precision adkppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /ffields/ fu, fv, qnet, empmr, sst, sss, qsw
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /kpp_i/ nzmax
      integer nzmax(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

      common /kpp_r2/ kpp_freq, kpp_dumpfreq, kpp_tavefreq
      double precision kpp_dumpfreq
      double precision kpp_freq
      double precision kpp_tavefreq

      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta
      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamckeys/ key, ikey, idkey
      integer idkey
      integer ikey
      integer key

      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw
      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer bi
      integer bj
      double precision mytime

C==============================================
C define local variables
C==============================================
      double precision adbo(ibot:itop,jbot:jtop)
      double precision adbosol(ibot:itop,jbot:jtop)
      double precision addbloc(ibot:itop,jbot:jtop,nr)
      double precision addvsq(ibot:itop,jbot:jtop,nr)
      double precision adghat(ibot:itop,jbot:jtop,nr)
      double precision adhbl(ibot:itop,jbot:jtop)
      double precision adritop(ibot:itop,jbot:jtop,nr)
      double precision adshsq(ibot:itop,jbot:jtop,nr)
      double precision adtempvar1
      double precision adtempvar2
      double precision adustar(ibot:itop,jbot:jtop)
      double precision advddiff(ibot:itop,jbot:jtop,0:nrp1,mdiff)
      double precision adwork2(ibot:itop,jbot:jtop)
      double precision adworka(1-olx:snx+olx,1-oly:sny+oly)
      double precision bo(ibot:itop,jbot:jtop)
      double precision bosol(ibot:itop,jbot:jtop)
      double precision dbloc(ibot:itop,jbot:jtop,nr)
      double precision dvsq(ibot:itop,jbot:jtop,nr)
      double precision ghat(ibot:itop,jbot:jtop,nr)
      double precision hbl(ibot:itop,jbot:jtop)
      integer help_h
      integer help_i
      integer i
      integer im1
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer jm1
      integer jp1
      integer k
      integer kp1
      integer mythid
      double precision ritop(ibot:itop,jbot:jtop,nr)
      double precision shsq(ibot:itop,jbot:jtop,nr)
      double precision tempvar1
      double precision tempvar2
      double precision ustar(ibot:itop,jbot:jtop)
      double precision vddiff(ibot:itop,jbot:jtop,0:nrp1,mdiff)
      integer work1(ibot:itop,jbot:jtop)
      double precision work2(ibot:itop,jbot:jtop)
      double precision worka(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adbo(ip2,ip3) = 0.d0
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adbosol(ip2,ip3) = 0.d0
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            addbloc(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            addvsq(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            adghat(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adhbl(ip2,ip3) = 0.d0
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            adritop(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            adshsq(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      adtempvar1 = 0.d0
      adtempvar2 = 0.d0
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adustar(ip2,ip3) = 0.d0
        end do
      end do
      do ip5 = 1, mdiff
        do ip4 = 0, nrp1
          do ip3 = jbot, jtop
            do ip2 = ibot, itop
              advddiff(ip2,ip3,ip4,ip5) = 0.d0
            end do
          end do
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adwork2(ip2,ip3) = 0.d0
        end do
      end do
      do ip3 = 1-oly, sny+oly
        do ip2 = 1-olx, snx+olx
          adworka(ip2,ip3) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(kpp_freq,mytime,mytime-deltatclock) .or. 
     $mytime .eq. starttime) then
        call statekpp( bi,bj,mythid,work2,dbloc,ritop,vddiff(ibot,jbot,
     $1,1),vddiff(ibot,jbot,1,2) )
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              ghat(i,j,k) = dbloc(i,j,k)
            end do
          end do
        end do
        do k = 1, nr-1
          help_h = k+1
          call kpp_smooth_horiz( help_h,bi,bj,ghat(ibot,jbot,k) )
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              dbloc(i,j,k) = dbloc(i,j,k)*pmask(i,j,k,bi,bj)
              ghat(i,j,k) = ghat(i,j,k)*pmask(i,j,k,bi,bj)
              ritop(i,j,k) = ritop(i,j,k)*pmask(i,j,k,bi,bj)
              if (k .eq. nzmax(i,j,bi,bj)) then
                dbloc(i,j,k) = p0
                ghat(i,j,k) = p0
                ritop(i,j,k) = p0
              endif
              ritop(i,j,k) = (zgrid(1)-zgrid(k))*ritop(i,j,k)
            end do
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            ustar(i,j) = p0
            bo(i,j) = p0
            bosol(i,j) = p0
          end do
        end do
        do j = jmin, jmax
          jp1 = j+1
          do i = imin, imax
            ip1 = i+1
            tempvar1 = (surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))+(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))*(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))
            if (tempvar1 .lt. phepsi*phepsi) then
              ustar(i,j) = sqrt(phepsi*p5*delz(1))
            else
              tempvar2 = sqrt(tempvar1)*p5*delz(1)
              ustar(i,j) = sqrt(tempvar2)
            endif
            bo(i,j) = -(gravity*(vddiff(i,j,1,1)*surfacetendencyt(i,j,
     $bi,bj)+vddiff(i,j,1,2)*surfacetendencys(i,j,bi,bj))*delz(1)/
     $work2(i,j))
            bosol(i,j) = gravity*vddiff(i,j,1,1)*qsw(i,j,bi,bj)*
     $recip_cp*recip_rhonil*recip_drf(1)*delz(1)/work2(i,j)
          end do
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              shsq(i,j,k) = p0
              dvsq(i,j,k) = p0
            end do
          end do
        end do
        do k = 1, nr
          do j = jmin, jmax
            jp1 = j+1
            do i = imin, imax
              ip1 = i+1
              dvsq(i,j,k) = p5*((uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))*
     $(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))+(uvel(ip1,j,1,bi,bj)-
     $uvel(ip1,j,k,bi,bj))*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))+
     $(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))*(vvel(i,j,1,bi,bj)-vvel(i,j,
     $k,bi,bj))+(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))*(vvel(i,jp1,1,
     $bi,bj)-vvel(i,jp1,k,bi,bj)))
            end do
          end do
        end do
        do k = 1, nrm1
          kp1 = k+1
          do j = jmin, jmax
            jm1 = j-1
            jp1 = j+1
            do i = imin, imax
              im1 = i-1
              ip1 = i+1
              shsq(i,j,k) = p5*((uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))*
     $(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))+(uvel(ip1,j,k,bi,bj)-
     $uvel(ip1,j,kp1,bi,bj))*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
     $+(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))*(vvel(i,j,k,bi,bj)-
     $vvel(i,j,kp1,bi,bj))+(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))*
     $(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj)))
              shsq(i,j,k) = p5*shsq(i,j,k)+p125*((uvel(i,jm1,k,bi,bj)-
     $uvel(i,jm1,kp1,bi,bj))*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
     $+(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))*(uvel(ip1,jm1,k,
     $bi,bj)-uvel(ip1,jm1,kp1,bi,bj))+(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,
     $kp1,bi,bj))*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))+(uvel(ip1,
     $jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))*(uvel(ip1,jp1,k,bi,bj)-
     $uvel(ip1,jp1,kp1,bi,bj))+(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,
     $bj))*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))+(vvel(im1,jp1,k,
     $bi,bj)-vvel(im1,jp1,kp1,bi,bj))*(vvel(im1,jp1,k,bi,bj)-vvel(im1,
     $jp1,kp1,bi,bj))+(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))*
     $(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))+(vvel(ip1,jp1,k,bi,bj)
     $-vvel(ip1,jp1,kp1,bi,bj))*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,
     $bi,bj)))
            end do
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            work1(i,j) = nzmax(i,j,bi,bj)
            work2(i,j) = fcori(i,j,bi,bj)
          end do
        end do
        call kppmix( mytime,mythid,work1,shsq,dvsq,ustar,bo,bosol,dbloc,
     $ritop,work2,ikey,vddiff,ghat,hbl )
        do j = jmin, jmax
          do i = imin, imax
            kpphbl(i,j,bi,bj) = hbl(i,j)*pmask(i,j,1,bi,bj)
          end do
        end do
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            worka(i,j) = kpphbl(i,j,bi,bj)
          end do
        end do
        help_i = (snx+2*olx)*(sny+2*oly)
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adworka(i,j) = adworka(i,j)+adkppfrac(i,j,bi,bj)
            adkppfrac(i,j,bi,bj) = 0.d0
          end do
        end do
        call adswfrac( help_i,minusone,worka,adworka )
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adkpphbl(i,j,bi,bj) = adkpphbl(i,j,bi,bj)+adworka(i,j)
            adworka(i,j) = 0.d0
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            adhbl(i,j) = adhbl(i,j)+adkpphbl(i,j,bi,bj)*pmask(i,j,1,bi,
     $bj)
            adkpphbl(i,j,bi,bj) = 0.d0
            do k = 1, nr
              adghat(i,j,k) = adghat(i,j,k)+adkppghat(i,j,k,bi,bj)*
     $pmask(i,j,k,bi,bj)
              adkppghat(i,j,k,bi,bj) = 0.d0
              advddiff(i,j,k-1,3) = advddiff(i,j,k-1,3)+adkppdiffkzt(i,
     $j,k,bi,bj)*pmask(i,j,k,bi,bj)
              adkppdiffkzt(i,j,k,bi,bj) = 0.d0
              advddiff(i,j,k-1,2) = advddiff(i,j,k-1,2)+adkppdiffkzs(i,
     $j,k,bi,bj)*pmask(i,j,k,bi,bj)
              adkppdiffkzs(i,j,k,bi,bj) = 0.d0
              advddiff(i,j,k-1,1) = advddiff(i,j,k-1,1)+adkppviscaz(i,j,
     $k,bi,bj)*pmask(i,j,k,bi,bj)
              adkppviscaz(i,j,k,bi,bj) = 0.d0
            end do
          end do
        end do
        call adkppmix( work1,shsq,dvsq,ustar,bo,bosol,dbloc,ritop,work2,
     $ikey,adshsq,addvsq,adustar,adbo,adbosol,addbloc,adritop,adwork2,
     $advddiff,adghat,adhbl )
        do j = jbot, jtop
          do i = ibot, itop
            adwork2(i,j) = 0.d0
          end do
        end do
        do k = 1, nrm1
          kp1 = k+1
          do j = jmin, jmax
            jm1 = j-1
            jp1 = j+1
            do i = imin, imax
              im1 = i-1
              ip1 = i+1
              aduvel(i,jm1,k,bi,bj) = aduvel(i,jm1,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
              aduvel(ip1,jm1,k,bi,bj) = aduvel(ip1,jm1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))
              aduvel(i,jm1,kp1,bi,bj) = aduvel(i,jm1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
              aduvel(ip1,jm1,kp1,bi,bj) = aduvel(ip1,jm1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))
              aduvel(i,jp1,k,bi,bj) = aduvel(i,jp1,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))
              aduvel(ip1,jp1,k,bi,bj) = aduvel(ip1,jp1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))
              aduvel(i,jp1,kp1,bi,bj) = aduvel(i,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))
              aduvel(ip1,jp1,kp1,bi,bj) = aduvel(ip1,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))
              advvel(im1,j,k,bi,bj) = advvel(im1,j,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))
              advvel(ip1,j,k,bi,bj) = advvel(ip1,j,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))
              advvel(im1,j,kp1,bi,bj) = advvel(im1,j,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))
              advvel(ip1,j,kp1,bi,bj) = advvel(ip1,j,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))
              advvel(im1,jp1,k,bi,bj) = advvel(im1,jp1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(vvel(im1,jp1,k,bi,bj)-vvel(im1,jp1,kp1,bi,bj))
              advvel(ip1,jp1,k,bi,bj) = advvel(ip1,jp1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,bi,bj))
              advvel(im1,jp1,kp1,bi,bj) = advvel(im1,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(im1,jp1,k,bi,bj)-vvel(im1,jp1,kp1,bi,bj))
              advvel(ip1,jp1,kp1,bi,bj) = advvel(ip1,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,bi,bj))
              adshsq(i,j,k) = adshsq(i,j,k)*p5
              aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+2*adshsq(i,j,k)*
     $p5*(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))
              aduvel(ip1,j,k,bi,bj) = aduvel(ip1,j,k,bi,bj)+2*adshsq(i,
     $j,k)*p5*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
              aduvel(i,j,kp1,bi,bj) = aduvel(i,j,kp1,bi,bj)-2*adshsq(i,
     $j,k)*p5*(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))
              aduvel(ip1,j,kp1,bi,bj) = aduvel(ip1,j,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p5*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
              advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+2*adshsq(i,j,k)*
     $p5*(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))
              advvel(i,j,kp1,bi,bj) = advvel(i,j,kp1,bi,bj)-2*adshsq(i,
     $j,k)*p5*(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))
              advvel(i,jp1,k,bi,bj) = advvel(i,jp1,k,bi,bj)+2*adshsq(i,
     $j,k)*p5*(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))
              advvel(i,jp1,kp1,bi,bj) = advvel(i,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p5*(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))
              adshsq(i,j,k) = 0.d0
            end do
          end do
        end do
        do k = 1, nr
          do j = jmin, jmax
            jp1 = j+1
            do i = imin, imax
              ip1 = i+1
              aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-2*addvsq(i,j,k)*
     $p5*(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))
              aduvel(ip1,j,k,bi,bj) = aduvel(ip1,j,k,bi,bj)-2*addvsq(i,
     $j,k)*p5*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))
              aduvel(i,j,1,bi,bj) = aduvel(i,j,1,bi,bj)+2*addvsq(i,j,k)*
     $p5*(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))
              aduvel(ip1,j,1,bi,bj) = aduvel(ip1,j,1,bi,bj)+2*addvsq(i,
     $j,k)*p5*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))
              advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-2*addvsq(i,j,k)*
     $p5*(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))
              advvel(i,j,1,bi,bj) = advvel(i,j,1,bi,bj)+2*addvsq(i,j,k)*
     $p5*(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))
              advvel(i,jp1,k,bi,bj) = advvel(i,jp1,k,bi,bj)-2*addvsq(i,
     $j,k)*p5*(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))
              advvel(i,jp1,1,bi,bj) = advvel(i,jp1,1,bi,bj)+2*addvsq(i,
     $j,k)*p5*(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))
              addvsq(i,j,k) = 0.d0
            end do
          end do
        end do
        call statekpp( bi,bj,mythid,work2,dbloc,ritop,vddiff(ibot,jbot,
     $1,1),vddiff(ibot,jbot,1,2) )
        do j = jbot, jtop
          do i = ibot, itop
            ustar(i,j) = p0
            bo(i,j) = p0
            bosol(i,j) = p0
          end do
        end do
        do j = jmin, jmax
          adtempvar1 = 0.d0
          adtempvar2 = 0.d0
          jp1 = j+1
          do i = imin, imax
            adtempvar1 = 0.d0
            adtempvar2 = 0.d0
            ip1 = i+1
            tempvar1 = (surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))+(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))*(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))
            advddiff(i,j,1,1) = advddiff(i,j,1,1)+adbosol(i,j)*(gravity*
     $qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*delz(1)/work2(i,
     $j))
            adwork2(i,j) = adwork2(i,j)-adbosol(i,j)*(gravity*vddiff(i,
     $j,1,1)*qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*delz(1)/
     $(work2(i,j)*work2(i,j)))
            adbosol(i,j) = 0.d0
            adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,
     $bj)-adbo(i,j)*(gravity*vddiff(i,j,1,2)*delz(1)/work2(i,j))
            adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)-adbo(i,j)*(gravity*vddiff(i,j,1,1)*delz(1)/work2(i,j))
            advddiff(i,j,1,2) = advddiff(i,j,1,2)-adbo(i,j)*(gravity*
     $surfacetendencys(i,j,bi,bj)*delz(1)/work2(i,j))
            advddiff(i,j,1,1) = advddiff(i,j,1,1)-adbo(i,j)*(gravity*
     $surfacetendencyt(i,j,bi,bj)*delz(1)/work2(i,j))
            adwork2(i,j) = adwork2(i,j)+adbo(i,j)*(gravity*(vddiff(i,j,
     $1,1)*surfacetendencyt(i,j,bi,bj)+vddiff(i,j,1,2)*
     $surfacetendencys(i,j,bi,bj))*delz(1)/(work2(i,j)*work2(i,j)))
            adbo(i,j) = 0.d0
            if (tempvar1 .lt. phepsi*phepsi) then
              adustar(i,j) = 0.d0
            else
              tempvar2 = sqrt(tempvar1)*p5*delz(1)
              adtempvar2 = adtempvar2+adustar(i,j)*(1./(2.*
     $sqrt(tempvar2)))
              adustar(i,j) = 0.d0
              adtempvar1 = adtempvar1+adtempvar2*1./(2.*sqrt(tempvar1))*
     $p5*delz(1)
              adtempvar2 = 0.d0
            endif
            adsurfacetendencyu(i,j,bi,bj) = adsurfacetendencyu(i,j,bi,
     $bj)+adtempvar1*(surfacetendencyu(i,j,bi,bj)+surfacetendencyu(ip1,
     $j,bi,bj)+surfacetendencyu(i,j,bi,bj)+surfacetendencyu(ip1,j,bi,bj)
     $)
            adsurfacetendencyu(ip1,j,bi,bj) = adsurfacetendencyu(ip1,j,
     $bi,bj)+adtempvar1*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj)+surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))
            adsurfacetendencyv(i,j,bi,bj) = adsurfacetendencyv(i,j,bi,
     $bj)+adtempvar1*(surfacetendencyv(i,j,bi,bj)+surfacetendencyv(i,
     $jp1,bi,bj)+surfacetendencyv(i,j,bi,bj)+surfacetendencyv(i,jp1,bi,
     $bj))
            adsurfacetendencyv(i,jp1,bi,bj) = adsurfacetendencyv(i,jp1,
     $bi,bj)+adtempvar1*(surfacetendencyv(i,j,bi,bj)+surfacetendencyv(i,
     $jp1,bi,bj)+surfacetendencyv(i,j,bi,bj)+surfacetendencyv(i,jp1,bi,
     $bj))
            adtempvar1 = 0.d0
          end do
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              adritop(i,j,k) = adritop(i,j,k)*(zgrid(1)-zgrid(k))
              if (k .eq. nzmax(i,j,bi,bj)) then
                adritop(i,j,k) = 0.d0
                adghat(i,j,k) = 0.d0
                addbloc(i,j,k) = 0.d0
              endif
              adritop(i,j,k) = adritop(i,j,k)*pmask(i,j,k,bi,bj)
              adghat(i,j,k) = adghat(i,j,k)*pmask(i,j,k,bi,bj)
              addbloc(i,j,k) = addbloc(i,j,k)*pmask(i,j,k,bi,bj)
            end do
          end do
        end do
        do k = nr-1, 1, -1
          help_h = k+1
          call adkpp_smooth_horiz( help_h,bi,bj,adghat(ibot,jbot,k) )
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              addbloc(i,j,k) = addbloc(i,j,k)+adghat(i,j,k)
              adghat(i,j,k) = 0.d0
            end do
          end do
        end do
        call adstatekpp( bi,bj,adwork2,addbloc,adritop,advddiff(ibot,
     $jbot,1,1),advddiff(ibot,jbot,1,2) )
      endif

      end


      subroutine adkpp_calc_diff( bi, bj, imin, imax, jmin, jmax, k, 
     $maskup, kapparu, kapparv, adkappart, adkappars, adkapparu, 
     $adkapparv )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkppviscaz(i,j-1,k,bi,bj) = adkppviscaz(i,j-1,k,bi,bj)+0.5*
     $adkapparv(i,j,k)*(0.5-sign(0.5d0,kapparv(i,j,k)-(kapparv(i,j,k)-
     $viscar+masks(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,
     $j-1,k,bi,bj)))))*masks(i,j,k,bi,bj)
          adkppviscaz(i,j,k,bi,bj) = adkppviscaz(i,j,k,bi,bj)+0.5*
     $adkapparv(i,j,k)*(0.5-sign(0.5d0,kapparv(i,j,k)-(kapparv(i,j,k)-
     $viscar+masks(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,
     $j-1,k,bi,bj)))))*masks(i,j,k,bi,bj)
          adkapparv(i,j,k) = adkapparv(i,j,k)*(0.5+0.5-sign(0.5d0,
     $kapparv(i,j,k)-(kapparv(i,j,k)-viscar+masks(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,j-1,k,bi,bj))))+sign(0.5d0,
     $kapparv(i,j,k)-(kapparv(i,j,k)-viscar+masks(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,j-1,k,bi,bj)))))
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkppviscaz(i-1,j,k,bi,bj) = adkppviscaz(i-1,j,k,bi,bj)+0.5*
     $adkapparu(i,j,k)*(0.5-sign(0.5d0,kapparu(i,j,k)-(kapparu(i,j,k)-
     $viscar+maskw(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-
     $1,j,k,bi,bj)))))*maskw(i,j,k,bi,bj)
          adkppviscaz(i,j,k,bi,bj) = adkppviscaz(i,j,k,bi,bj)+0.5*
     $adkapparu(i,j,k)*(0.5-sign(0.5d0,kapparu(i,j,k)-(kapparu(i,j,k)-
     $viscar+maskw(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-
     $1,j,k,bi,bj)))))*maskw(i,j,k,bi,bj)
          adkapparu(i,j,k) = adkapparu(i,j,k)*(0.5+0.5-sign(0.5d0,
     $kapparu(i,j,k)-(kapparu(i,j,k)-viscar+maskw(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-1,j,k,bi,bj))))+sign(0.5d0,
     $kapparu(i,j,k)-(kapparu(i,j,k)-viscar+maskw(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-1,j,k,bi,bj)))))
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkppdiffkzs(i,j,k,bi,bj) = adkppdiffkzs(i,j,k,bi,bj)+
     $adkappars(i,j,k)*maskup(i,j)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkppdiffkzt(i,j,k,bi,bj) = adkppdiffkzt(i,j,k,bi,bj)+
     $adkappart(i,j,k)*maskup(i,j)
        end do
      end do

      end


      subroutine adkpp_smooth_horiz( k, bi, bj, adfld )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer itop
      parameter ( itop = snx+olx )
      integer imax
      parameter ( imax = itop-1 )
      integer imin
      parameter ( imin = ibot+1 )
      integer oly
      parameter ( oly = 3 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 40 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer jmax
      parameter ( jmax = jtop-1 )
      integer jmin
      parameter ( jmin = jbot+1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p0625
      parameter ( p0625 = 0.0625 )
      double precision p125
      parameter ( p125 = 0.125 )
      double precision p25
      parameter ( p25 = 0.25 )

C==============================================
C define common blocks
C==============================================
      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision adfld(ibot:itop,jbot:jtop)
      integer bi
      integer bj
      integer k

C==============================================
C define local variables
C==============================================
      double precision adfld_tmp(ibot:itop,jbot:jtop)
      integer i
      integer im1
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jm1
      integer jp1
      double precision tempvar

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adfld_tmp(ip2,ip3) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adfld_tmp(i,j) = adfld_tmp(i,j)+adfld(i,j)
          adfld(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        jm1 = j-1
        jp1 = j+1
        do i = imin, imax
          im1 = i-1
          ip1 = i+1
          tempvar = p25*pmask(i,j,k,bi,bj)+p125*(pmask(im1,j,k,bi,bj)+
     $pmask(ip1,j,k,bi,bj)+pmask(i,jm1,k,bi,bj)+pmask(i,jp1,k,bi,bj))+
     $p0625*(pmask(im1,jm1,k,bi,bj)+pmask(im1,jp1,k,bi,bj)+pmask(ip1,
     $jm1,k,bi,bj)+pmask(ip1,jp1,k,bi,bj))
          if (tempvar .ge. p25) then
            adfld(i,j) = adfld(i,j)+adfld_tmp(i,j)*(p25*pmask(i,j,k,bi,
     $bj)/tempvar)
            adfld(im1,j) = adfld(im1,j)+adfld_tmp(i,j)*(p125*pmask(im1,
     $j,k,bi,bj)/tempvar)
            adfld(ip1,j) = adfld(ip1,j)+adfld_tmp(i,j)*(p125*pmask(ip1,
     $j,k,bi,bj)/tempvar)
            adfld(i,jm1) = adfld(i,jm1)+adfld_tmp(i,j)*(p125*pmask(i,
     $jm1,k,bi,bj)/tempvar)
            adfld(im1,jm1) = adfld(im1,jm1)+adfld_tmp(i,j)*(p0625*
     $pmask(im1,jm1,k,bi,bj)/tempvar)
            adfld(ip1,jm1) = adfld(ip1,jm1)+adfld_tmp(i,j)*(p0625*
     $pmask(ip1,jm1,k,bi,bj)/tempvar)
            adfld(i,jp1) = adfld(i,jp1)+adfld_tmp(i,j)*(p125*pmask(i,
     $jp1,k,bi,bj)/tempvar)
            adfld(im1,jp1) = adfld(im1,jp1)+adfld_tmp(i,j)*(p0625*
     $pmask(im1,jp1,k,bi,bj)/tempvar)
            adfld(ip1,jp1) = adfld(ip1,jp1)+adfld_tmp(i,j)*(p0625*
     $pmask(ip1,jp1,k,bi,bj)/tempvar)
            adfld_tmp(i,j) = 0.d0
          else
            adfld(i,j) = adfld(i,j)+adfld_tmp(i,j)
            adfld_tmp(i,j) = 0.d0
          endif
        end do
      end do

      end


      subroutine adkpp_transport_s( imin, imax, jmin, jmax, bi, bj, k, 
     $km1, maskc, kappars, adkappars, addf )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw
      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer km1
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkappars(i,j,k) = adkappars(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $maskc(i,j)*kppghat(i,j,km1,bi,bj)*delz(1)*surfacetendencys(i,j,bi,
     $bj)
          adkppghat(i,j,km1,bi,bj) = adkppghat(i,j,km1,bi,bj)-addf(i,j)*
     $ra(i,j,bi,bj)*maskc(i,j)*kappars(i,j,k)*delz(1)*
     $surfacetendencys(i,j,bi,bj)
          adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,bj)-
     $addf(i,j)*ra(i,j,bi,bj)*maskc(i,j)*kappars(i,j,k)*kppghat(i,j,km1,
     $bi,bj)*delz(1)
        end do
      end do

      end


      subroutine adkpp_transport_t( imin, imax, jmin, jmax, bi, bj, k, 
     $km1, maskc, kappart, adkappart, addf )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adkpp_short/ adkppfrac
      double precision adkppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

      common /ffields/ fu, fv, qnet, empmr, sst, sss, qsw
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl
      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /kpp_short/ kppfrac
      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta
      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw
      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer km1
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C define local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkappart(i,j,k) = adkappart(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $maskc(i,j)*kppghat(i,j,km1,bi,bj)*delz(1)*(surfacetendencyt(i,j,
     $bi,bj)-qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*(1.-
     $kppfrac(i,j,bi,bj)))
          adkppfrac(i,j,bi,bj) = adkppfrac(i,j,bi,bj)-addf(i,j)*ra(i,j,
     $bi,bj)*maskc(i,j)*kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*delz(1)*
     $qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)
          adkppghat(i,j,km1,bi,bj) = adkppghat(i,j,km1,bi,bj)-addf(i,j)*
     $ra(i,j,bi,bj)*maskc(i,j)*kappart(i,j,k)*delz(1)*
     $(surfacetendencyt(i,j,bi,bj)-qsw(i,j,bi,bj)*recip_cp*recip_rhonil*
     $recip_drf(1)*(1.-kppfrac(i,j,bi,bj)))
          adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,bj)-
     $addf(i,j)*ra(i,j,bi,bj)*maskc(i,j)*kappart(i,j,k)*kppghat(i,j,km1,
     $bi,bj)*delz(1)
        end do
      end do

      end


      subroutine mdkppmix( mytime, mythid, kmtj, shsq, dvsq, ustar, bo, 
     $bosol, dbloc, ritop, coriol, ikey, diffus, ghat, hbl )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )

C==============================================
C define common blocks
C==============================================
      common /cadbfsfc/ bfsfch
      double precision bfsfch(imt,15)

      common /cadblmc/ blmch
      double precision blmch(imt,nr,mdiff,15)

      common /cadcasea/ caseah
      double precision caseah(imt,15)

      common /caddkm1/ dkm1h
      double precision dkm1h(imt,mdiff,15)

      common /cadghat/ ghath
      double precision ghath(imt,nr,15)

      common /cadghau/ ghati
      double precision ghati(imt,nr,15)

      common /cadhbl/ hblh
      double precision hblh(imt,15)

      common /cadkbl/ kblh
      integer kblh(imt,15)

      common /cadstable/ stableh
      double precision stableh(imt,15)

C==============================================
C define arguments
C==============================================
      double precision bo(imt)
      double precision bosol(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dvsq(imt,nr)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer ikey
      integer kmtj(imt)
      integer mythid
      double precision mytime
      double precision ritop(imt,nr)
      double precision shsq(imt,nr)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision bfsfc(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision dkm1(imt,mdiff)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer k
      integer kbl(imt)
      integer md
      double precision rib(imt,nr)
      double precision sigma(imt)
      double precision stable(imt)

C**********************************************
C executable statements of routine
C**********************************************
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghati(ip1,ip2,ikey) = ghat(ip1,ip2)
        end do
      end do
      call ri_iwmix( kmtj,shsq,dbloc,ghat,ikey,diffus )
      do md = 1, mdiff
        do i = 1, imt
          do k = kmtj(i), nrp1
            diffus(i,k,md) = 0.
          end do
        end do
      end do
      call mdbldepth( mytime,mythid,kmtj,dvsq,dbloc,ritop,ustar,bo,
     $bosol,coriol,ikey,hbl,bfsfc,stable,casea,kbl,rib,sigma )
      do ip1 = 1, imt
        hblh(ip1,ikey) = hbl(ip1)
      end do
      do ip1 = 1, imt
        bfsfch(ip1,ikey) = bfsfc(ip1)
      end do
      do ip1 = 1, imt
        stableh(ip1,ikey) = stable(ip1)
      end do
      do ip1 = 1, imt
        caseah(ip1,ikey) = casea(ip1)
      end do
      do ip1 = 1, imt
        kblh(ip1,ikey) = kbl(ip1)
      end do
      call mdblmix( ustar,bfsfc,hbl,stable,casea,diffus,kbl,dkm1,blmc,
     $ghat,sigma,ikey )
      do ip2 = 1, mdiff
        do ip1 = 1, imt
          dkm1h(ip1,ip2,ikey) = dkm1(ip1,ip2)
        end do
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            blmch(ip1,ip2,ip3,ikey) = blmc(ip1,ip2,ip3)
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghath(ip1,ip2,ikey) = ghat(ip1,ip2)
        end do
      end do
      call enhance( dkm1,hbl,kbl,diffus,casea,ghat,blmc )
      do k = 1, nr
        do i = 1, imt
          if (k .lt. kbl(i)) then
            do md = 1, mdiff
              diffus(i,k,md) = blmc(i,k,md)
            end do
          else
            ghat(i,k) = 0.
          endif
        end do
      end do
      end


      subroutine adkppmix( kmtj, shsq, dvsq, ustar, bo, bosol, dbloc, 
     $ritop, coriol, ikey, adshsq, addvsq, adustar, adbo, adbosol, 
     $addbloc, adritop, adcoriol, addiffus, adghat, adhbl )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )

C==============================================
C define common blocks
C==============================================
      common /cadbfsfc/ bfsfch
      double precision bfsfch(imt,15)

      common /cadblmc/ blmch
      double precision blmch(imt,nr,mdiff,15)

      common /cadcasea/ caseah
      double precision caseah(imt,15)

      common /caddkm1/ dkm1h
      double precision dkm1h(imt,mdiff,15)

      common /cadghat/ ghath
      double precision ghath(imt,nr,15)

      common /cadghau/ ghati
      double precision ghati(imt,nr,15)

      common /cadhbl/ hblh
      double precision hblh(imt,15)

      common /cadkbl/ kblh
      integer kblh(imt,15)

      common /cadstable/ stableh
      double precision stableh(imt,15)

C==============================================
C define arguments
C==============================================
      double precision adbo(imt)
      double precision adbosol(imt)
      double precision adcoriol(imt)
      double precision addbloc(imt,nr)
      double precision addiffus(imt,0:nrp1,mdiff)
      double precision addvsq(imt,nr)
      double precision adghat(imt,nr)
      double precision adhbl(imt)
      double precision adritop(imt,nr)
      double precision adshsq(imt,nr)
      double precision adustar(imt)
      double precision bo(imt)
      double precision bosol(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision dvsq(imt,nr)
      integer ikey
      integer kmtj(imt)
      double precision ritop(imt,nr)
      double precision shsq(imt,nr)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision adbfsfc(imt)
      double precision adblmc(imt,nr,mdiff)
      double precision adcasea(imt)
      double precision addkm1(imt,mdiff)
      double precision adrib(imt,nr)
      double precision adsigma(imt)
      double precision adstable(imt)
      double precision bfsfc(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dkm1(imt,mdiff)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer k
      integer kbl(imt)
      integer md
      double precision stable(imt)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip1 = 1, imt
        adbfsfc(ip1) = 0.d0
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            adblmc(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip1 = 1, imt
        adcasea(ip1) = 0.d0
      end do
      do ip2 = 1, mdiff
        do ip1 = 1, imt
          addkm1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          adrib(ip1,ip2) = 0.d0
        end do
      end do
      do ip1 = 1, imt
        adsigma(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adstable(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = ghati(ip1,ip2,ikey)
        end do
      end do
      call ri_iwmix( kmtj,shsq,dbloc,ghat,ikey,diffus )
      do md = 1, mdiff
        do i = 1, imt
          do k = kmtj(i), nrp1
            diffus(i,k,md) = 0.
          end do
        end do
      end do
      do ip1 = 1, imt
        hbl(ip1) = hblh(ip1,ikey)
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = bfsfch(ip1,ikey)
      end do
      do ip1 = 1, imt
        stable(ip1) = stableh(ip1,ikey)
      end do
      do ip1 = 1, imt
        casea(ip1) = caseah(ip1,ikey)
      end do
      do ip1 = 1, imt
        kbl(ip1) = kblh(ip1,ikey)
      end do
      do ip2 = 1, mdiff
        do ip1 = 1, imt
          dkm1(ip1,ip2) = dkm1h(ip1,ip2,ikey)
        end do
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            blmc(ip1,ip2,ip3) = blmch(ip1,ip2,ip3,ikey)
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = ghath(ip1,ip2,ikey)
        end do
      end do
      do k = 1, nr
        do i = 1, imt
          if (k .lt. kbl(i)) then
            do md = 1, mdiff
              adblmc(i,k,md) = adblmc(i,k,md)+addiffus(i,k,md)
              addiffus(i,k,md) = 0.d0
            end do
          else
            adghat(i,k) = 0.d0
          endif
        end do
      end do
      call adenhance( dkm1,hbl,kbl,diffus,casea,ghat,blmc,addkm1,adhbl,
     $addiffus,adcasea,adghat,adblmc )
      call adblmix( ustar,bfsfc,hbl,stable,casea,diffus,kbl,ikey,
     $adustar,adbfsfc,adhbl,adstable,adcasea,addiffus,addkm1,adblmc,
     $adghat,adsigma )
      call adbldepth( kmtj,dvsq,dbloc,ritop,ustar,bo,bosol,coriol,ikey,
     $addvsq,addbloc,adritop,adustar,adbo,adbosol,adcoriol,adhbl,
     $adbfsfc,adstable,adcasea,adrib,adsigma )
      do md = 1, mdiff
        do i = 1, imt
          do k = kmtj(i), nrp1
            addiffus(i,k,md) = 0.d0
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = ghati(ip1,ip2,ikey)
        end do
      end do
      call adri_iwmix( kmtj,shsq,dbloc,ghat,adshsq,addbloc,adghat,
     $addiffus )

      end


      subroutine adpackages_init_variables( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adcost_r/ adcost_r1, adcost_r14
      double precision adcost_r1
      double precision adcost_r14(nsx,nsy)

      common /adffields/ adffields1, adffields2, adffields3, adffields4,
     $ adffields5, adffields6
      double precision adffields1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adffields2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adffields3(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adffields4(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adffields5(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adffields6(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call barrier( mythid )
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adffields1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adffields2(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adffields3(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adffields4(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adffields5(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adffields6(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      call barrier( mythid )
      adcost_r1 = 0.d0
      call barrier( mythid )
      call adctrl_map_ini( mythid )

      end


      subroutine adri_iwmix( kmtj, shsq, dbloc, dblocsm, adshsq, 
     $addbloc, addblocsm, addiffus )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C define common blocks
C==============================================
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kmixcri_r/ riinfty, bvsqcon, difm0, difs0, dift0, difmcon,
     $ difscon, diftcon
      double precision bvsqcon
      double precision difm0
      double precision difmcon
      double precision difs0
      double precision difscon
      double precision dift0
      double precision diftcon
      double precision riinfty

      common /kpp_r1/ pmask, zgrid, hwide
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)

C==============================================
C define arguments
C==============================================
      double precision addbloc(imt,nr)
      double precision addblocsm(imt,nr)
      double precision addiffus(imt,0:nrp1,3)
      double precision adshsq(imt,nr)
      double precision dbloc(imt,nr)
      double precision dblocsm(imt,nr)
      integer kmtj(imt)
      double precision shsq(imt,nr)

C==============================================
C define local variables
C==============================================
      double precision adfcon
      double precision adfri
      double precision adratio
      double precision adrig
      double precision c0
      double precision c1
      double precision diffus(imt,0:nrp1,3)
      double precision fcon
      double precision fri
      integer i
      integer ki
      double precision ratio
      double precision rig

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfcon = 0.d0
      adfri = 0.d0
      adratio = 0.d0
      adrig = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      c1 = 1.
      c0 = 0.
      diffus(1,1,1) = 0.
      do ki = 1, nr
        do i = 1, imt
          if (kmtj(i) .eq. 0) then
            diffus(i,ki,1) = 0.
            diffus(i,ki,2) = 0.
          else if (ki .ge. kmtj(i)) then
            diffus(i,ki,1) = diffus(i,ki-1,1)
            diffus(i,ki,2) = diffus(i,ki-1,2)
          else
            diffus(i,ki,1) = dblocsm(i,ki)*(zgrid(ki)-zgrid(ki+1))/
     $max(shsq(i,ki),phepsi)
            diffus(i,ki,2) = dbloc(i,ki)/(zgrid(ki)-zgrid(ki+1))
          endif
        end do
      end do
      do i = 1, imt
        addiffus(i,0,3) = 0.d0
        addiffus(i,0,2) = 0.d0
        addiffus(i,0,1) = 0.d0
      end do
      do ki = 1, nr
        adfcon = 0.d0
        adfri = 0.d0
        adratio = 0.d0
        adrig = 0.d0
        do i = 1, imt
          adfcon = 0.d0
          adfri = 0.d0
          adratio = 0.d0
          adrig = 0.d0
          rig = max(diffus(i,ki,2),bvsqcon)
          ratio = min((bvsqcon-rig)/bvsqcon,c1)
          fcon = c1-ratio*ratio
          rig = max(diffus(i,ki,1),c0)
          ratio = min(rig/riinfty,c1)
          fri = c1-ratio*ratio
          adfcon = adfcon+addiffus(i,ki,3)*difscon
          adfri = adfri+addiffus(i,ki,3)*difs0
          addiffus(i,ki,3) = 0.d0
          adfcon = adfcon+addiffus(i,ki,2)*difscon
          adfri = adfri+addiffus(i,ki,2)*difs0
          addiffus(i,ki,2) = 0.d0
          adfcon = adfcon+addiffus(i,ki,1)*difmcon
          adfri = adfri+addiffus(i,ki,1)*difm0
          addiffus(i,ki,1) = 0.d0
          adfri = 3*adfri*fri*fri
          adratio = adratio-2*adfri*ratio
          adfri = 0.d0
          adrig = adrig+adratio*((0.5+sign(0.5d0,c1-rig/riinfty))/
     $riinfty)
          adratio = 0.d0
          addiffus(i,ki,1) = addiffus(i,ki,1)+adrig*(0.5+sign(0.5d0,
     $diffus(i,ki,1)-c0))
          adrig = 0.d0
          adfcon = 3*adfcon*fcon*fcon
          rig = max(diffus(i,ki,2),bvsqcon)
          ratio = min((bvsqcon-rig)/bvsqcon,c1)
          adratio = adratio-2*adfcon*ratio
          adfcon = 0.d0
          rig = max(diffus(i,ki,2),bvsqcon)
          adrig = adrig-adratio*((0.5+sign(0.5d0,c1-(bvsqcon-rig)/
     $bvsqcon))/bvsqcon)
          adratio = 0.d0
          addiffus(i,ki,2) = addiffus(i,ki,2)+adrig*(0.5+sign(0.5d0,
     $diffus(i,ki,2)-bvsqcon))
          adrig = 0.d0
        end do
      end do
      do ki = nr, 1, -1
        do i = 1, imt
          if (kmtj(i) .eq. 0) then
            addiffus(i,ki,2) = 0.d0
            addiffus(i,ki,1) = 0.d0
          else if (ki .ge. kmtj(i)) then
            addiffus(i,ki-1,2) = addiffus(i,ki-1,2)+addiffus(i,ki,2)
            addiffus(i,ki,2) = 0.d0
            addiffus(i,ki-1,1) = addiffus(i,ki-1,1)+addiffus(i,ki,1)
            addiffus(i,ki,1) = 0.d0
          else
            addbloc(i,ki) = addbloc(i,ki)+addiffus(i,ki,2)/(zgrid(ki)-
     $zgrid(ki+1))
            addiffus(i,ki,2) = 0.d0
            addblocsm(i,ki) = addblocsm(i,ki)+addiffus(i,ki,1)*
     $((zgrid(ki)-zgrid(ki+1))/max(shsq(i,ki),phepsi))
            adshsq(i,ki) = adshsq(i,ki)-addiffus(i,ki,1)*(dblocsm(i,ki)*
     $(zgrid(ki)-zgrid(ki+1))*(0.5+sign(0.5d0,shsq(i,ki)-phepsi))/
     $(max(shsq(i,ki),phepsi)*max(shsq(i,ki),phepsi)))
            addiffus(i,ki,1) = 0.d0
          endif
        end do
      end do
      addiffus(1,1,1) = 0.d0

      end


      subroutine adsolve_for_pressure( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /solve_barot/ bo_surf, recip_bo
      double precision bo_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_bo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      double precision adcg2d_b(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adcg2d_x(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer j
      integer k
      integer numiters
      double precision residual
      double precision tolerance
      double precision uf(1-olx:snx+olx,1-oly:sny+oly)
      double precision vf(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adcg2d_b(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adcg2d_x(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      tolerance = cg2dtargetresidual
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adcg2d_x(i,j,bi,bj) = adcg2d_x(i,j,bi,bj)+adetan(i,j,bi,
     $bj)*recip_bo(i,j,bi,bj)
              adetan(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adexch_xy_r8( mythid,adcg2d_x )
      call cg2d( adcg2d_x,adcg2d_b,tolerance,residual,numiters,mythid )
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adcg2d_x(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)-adcg2d_b(i,j,bi,bj)*
     $(freesurffac*ra(i,j,bi,bj)/deltatmom/deltatmom)
            end do
          end do
        end do
      end do
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          do k = 1, nr
            do j = 1, sny+1
              do i = 1, snx+1
                uf(i,j) = dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
                vf(i,j) = dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
              end do
            end do
            call adcalc_div_ghat( bi,bj,k,uf,vf,adcg2d_b )
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adcg2d_x(i,j,bi,bj)*
     $bo_surf(i,j,bi,bj)
              adcg2d_x(i,j,bi,bj) = 0.d0
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adetanm1(i,j,bi,bj)
              adetanm1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adstatekpp( bi, bj, adrho1, addbloc, addbsfc, 
     $adttalpha, adssbeta )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer itop
      parameter ( itop = snx+olx )
      integer oly
      parameter ( oly = 3 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 40 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_eos_lin/ talpha, sbeta, eostype
      character*(6) eostype
      double precision sbeta
      double precision talpha

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision addbloc(ibot:itop,jbot:jtop,nr)
      double precision addbsfc(ibot:itop,jbot:jtop,nr)
      double precision adrho1(ibot:itop,jbot:jtop)
      double precision adssbeta(ibot:itop,jbot:jtop,nrp1)
      double precision adttalpha(ibot:itop,jbot:jtop,nrp1)
      integer bi
      integer bj

C==============================================
C define local variables
C==============================================
      double precision adrho1k(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwork1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwork2(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwork3(1-olx:snx+olx,1-oly:sny+oly)
      integer help_h
      integer i
      integer ip1
      integer ip2
      integer j
      integer k
      integer mythid
      double precision rho1k(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrho1k(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adwork1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adwork2(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adwork3(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jbot, jtop
        do i = ibot, itop
          addbloc(i,j,nr) = 0.d0
          adssbeta(i,j,nr) = adssbeta(i,j,nr)+adssbeta(i,j,nrp1)
          adssbeta(i,j,nrp1) = 0.d0
          adttalpha(i,j,nr) = adttalpha(i,j,nr)+adttalpha(i,j,nrp1)
          adttalpha(i,j,nrp1) = 0.d0
        end do
      end do
      do k = 2, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adrho1k(ip1,ip2) = 0.d0
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adrhok(ip1,ip2) = 0.d0
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adrhokm1(ip1,ip2) = 0.d0
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adwork1(ip1,ip2) = 0.d0
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adwork2(ip1,ip2) = 0.d0
          end do
        end do
        call find_rho( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,theta,salt,
     $rhok,mythid )
        help_h = k-1
        call find_rho( bi,bj,ibot,itop,jbot,jtop,help_h,k,eostype,theta,
     $salt,rhokm1,mythid )
        call find_rho( bi,bj,ibot,itop,jbot,jtop,1,k,eostype,theta,salt,
     $rho1k,mythid )
        do j = jbot, jtop
          do i = ibot, itop
            adrho1k(i,j) = adrho1k(i,j)-addbsfc(i,j,k)*(gravity/(rhok(i,
     $j)+rhonil))
            adrhok(i,j) = adrhok(i,j)+addbsfc(i,j,k)*(gravity/(rhok(i,j)
     $+rhonil)-gravity*(rhok(i,j)-rho1k(i,j))/((rhok(i,j)+rhonil)*
     $(rhok(i,j)+rhonil)))
            addbsfc(i,j,k) = 0.d0
            adrhok(i,j) = adrhok(i,j)+addbloc(i,j,k-1)*(gravity/(rhok(i,
     $j)+rhonil)-gravity*(rhok(i,j)-rhokm1(i,j))/((rhok(i,j)+rhonil)*
     $(rhok(i,j)+rhonil)))
            adrhokm1(i,j) = adrhokm1(i,j)-addbloc(i,j,k-1)*(gravity/
     $(rhok(i,j)+rhonil))
            addbloc(i,j,k-1) = 0.d0
            adwork2(i,j) = adwork2(i,j)+adssbeta(i,j,k)
            adssbeta(i,j,k) = 0.d0
            adwork1(i,j) = adwork1(i,j)+adttalpha(i,j,k)
            adttalpha(i,j,k) = 0.d0
          end do
        end do
        call adfind_beta( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,adwork2 
     $)
        call adfind_alpha( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,
     $adwork1 )
        call adfind_rho( bi,bj,ibot,itop,jbot,jtop,1,k,eostype,theta,
     $salt,adtheta,adsalt,adrho1k )
        call adfind_rho( bi,bj,ibot,itop,jbot,jtop,help_h,k,eostype,
     $theta,salt,adtheta,adsalt,adrhokm1 )
        call adfind_rho( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,theta,
     $salt,adtheta,adsalt,adrhok )
      end do
      do j = jbot, jtop
        do i = ibot, itop
          adwork3(i,j) = adwork3(i,j)+adssbeta(i,j,1)
          adssbeta(i,j,1) = 0.d0
          adwork2(i,j) = adwork2(i,j)+adttalpha(i,j,1)
          adttalpha(i,j,1) = 0.d0
          adwork1(i,j) = adwork1(i,j)+adrho1(i,j)
          adrho1(i,j) = 0.d0
        end do
      end do
      call adfind_beta( bi,bj,ibot,itop,jbot,jtop,1,1,eostype,adwork3 )
      call adfind_alpha( bi,bj,ibot,itop,jbot,jtop,1,1,eostype,adwork2 )
      call adfind_rho( bi,bj,ibot,itop,jbot,jtop,1,1,eostype,theta,salt,
     $adtheta,adsalt,adwork1 )

      end


      subroutine adswfrac( imax, fact, swdk, adswdk )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nwtype
      parameter ( nwtype = 5 )

C==============================================
C define common blocks
C==============================================
C==============================================
C define arguments
C==============================================
      integer imax
      double precision adswdk(imax)
      double precision fact
      double precision swdk(imax)

C==============================================
C define local variables
C==============================================
      double precision a1(nwtype)
      double precision a2(nwtype)
      double precision adfacz
      double precision facz
      integer i
      integer jwtype
      double precision rfac(nwtype)

C==============================================
C define data
C==============================================
      data rfac/0.58,0.62,0.67,0.77,0.78/
      data a1/0.35,0.6,1.0,1.5,1.4/
      data a2/23.0,20.0,17.0,14.0,7.9/

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfacz = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jwtype = 2
      do i = 1, imax
        adfacz = 0.d0
        facz = fact*swdk(i)
        if (facz .lt. (-200.)) then
          adswdk(i) = 0.d0
        else
          adfacz = adfacz+adswdk(i)*(rfac(jwtype)/a1(jwtype)*exp(facz/
     $a1(jwtype))+(1.-rfac(jwtype))/a2(jwtype)*exp(facz/a2(jwtype)))
          adswdk(i) = 0.d0
        endif
        adswdk(i) = adswdk(i)+adfacz*fact
        adfacz = 0.d0
      end do

      end


      subroutine mdthe_correction_step( mytime, myiter, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

C==============================================
C define arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision phisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision phisurfy(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          call calc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,etan,
     $phisurfx,phisurfy,mythid )
          do k = 1, nr
            if (momstepping) then
              call correction_step( bi,bj,imin,imax,jmin,jmax,k,
     $phisurfx,phisurfy,mytime,mythid )
            endif
            if (tempstepping) then
              call cycle_tracer( bi,bj,imin,imax,jmin,jmax,k,theta,gt,
     $gtnm1,mytime,mythid )
            endif
            if (saltstepping) then
              call cycle_tracer( bi,bj,imin,imax,jmin,jmax,k,salt,gs,
     $gsnm1,mytime,mythid )
            endif
          end do
          call mdconvective_adjustment( bi,bj,imin,imax,jmin,jmax,
     $mytime,myiter,mythid )
        end do
      end do
      end


      subroutine adthe_correction_step( mytime, mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

C==============================================
C define arguments
C==============================================
      integer mythid
      double precision mytime

C==============================================
C define local variables
C==============================================
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer jmax
      integer jmin
      integer k

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfy(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          call adconvective_adjustment( bi,bj,imin,imax,jmin,jmax,
     $mytime,mythid )
          do k = nr, 1, -1
            if (saltstepping) then
              call adcycle_tracer( bi,bj,imin,imax,jmin,jmax,k,adsalt,
     $adgs,adgsnm1 )
            endif
            if (tempstepping) then
              call adcycle_tracer( bi,bj,imin,imax,jmin,jmax,k,adtheta,
     $adgt,adgtnm1 )
            endif
            if (momstepping) then
              call adcorrection_step( bi,bj,imin,imax,jmin,jmax,k,
     $adphisurfx,adphisurfy )
            endif
          end do
          call adcalc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,adetan,
     $adphisurfx,adphisurfy )
        end do
      end do

      end


      subroutine adthe_main_sens( mythid )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nchklev_1
      parameter ( nchklev_1 = 15 )
      integer nchklev_2
      parameter ( nchklev_2 = 24 )
      integer nchklev_3
      parameter ( nchklev_3 = 16 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /dynvars_cd/ uveld, vveld, etanm1, unm1, vnm1, gucd, gvcd
      double precision etanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision unm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /dynvars_r/ etan, uvel, vvel, wvel, theta, salt, gu, gv, 
     $gt, gs, gunm1, gvnm1, gtnm1, gsnm1
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, nshap,
     $ zonal_filt_sinpow, zonal_filt_cospow
      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nshap
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer writebinaryprec
      integer writestateprec
      integer zonal_filt_cospow
      integer zonal_filt_sinpow

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily
      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily

C==============================================
C define arguments
C==============================================
      integer mythid

C==============================================
C define local variables
C==============================================
      double precision gsnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,
     $nsx,nsy,15)
      double precision gtnm1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,
     $nsx,nsy,15)
      integer ilev_1
      integer ilev_2
      integer ilev_3
      integer iloop
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer max_lev2
      integer max_lev3
      integer myiter
      double precision mytime
      double precision wvelh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,nsx,
     $nsy,15)

C----------------------------------------------
C RESET GLOBAL ADJOINT VARIABLES
C----------------------------------------------
      call adzero

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
C----------------------------------------------
C OPEN FILES OF TAPE: tapelev3
C----------------------------------------------
      call adopen( 'tapelev3_1_the_main_sens_gsnm1',30,7,1,8,17940 )
      call adopen( 'tapelev3_2_the_main_sens_gtnm1',30,7,2,8,17940 )
      call adopen( 'tapelev3_3_the_main_sens_gunm1',30,7,3,8,17940 )
      call adopen( 'tapelev3_4_the_main_sens_gvnm1',30,7,4,8,17940 )
      call adopen( 'tapelev3_5_the_main_sens_theta',30,7,5,8,17940 )
      call adopen( 'tapelev3_6_the_main_sens_salt',29,7,6,8,17940 )
      call adopen( 'tapelev3_7_the_main_sens_uvel',29,7,7,8,17940 )
      call adopen( 'tapelev3_8_the_main_sens_vvel',29,7,8,8,17940 )
      call adopen( 'tapelev3_9_the_main_sens_wvel',29,7,9,8,17940 )
      call adopen( 'tapelev3_10_the_main_sens_etan',30,7,10,8,1196 )
      call adopen( 'tapelev3_11_the_main_sens_etanm1',32,7,11,8,1196 )
      call adopen( 'tapelev3_12_the_main_sens_uveld',31,7,12,8,17940 )
      call adopen( 'tapelev3_13_the_main_sens_vveld',31,7,13,8,17940 )
      call adopen( 'tapelev3_14_the_main_sens_unm1',30,7,14,8,17940 )
      call adopen( 'tapelev3_15_the_main_sens_vnm1',30,7,15,8,17940 )

C----------------------------------------------
C FUNCTION AND TAPE COMPUTATIONS
C----------------------------------------------
      call initialise_varia( mythid )
      call ctrl_map_forcing( mythid )
      call barrier( mythid )
      max_lev3 = ntimesteps/(nchklev_1*nchklev_2)+1
      max_lev2 = ntimesteps/nchklev_1+1
      do ilev_3 = 1, nchklev_3
        if (ilev_3 .le. max_lev3) then
          call adwrite( 'tapelev3_1_the_main_sens_gsnm1',30,7,1,gsnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_2_the_main_sens_gtnm1',30,7,2,gtnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_3_the_main_sens_gunm1',30,7,3,gunm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_4_the_main_sens_gvnm1',30,7,4,gvnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_5_the_main_sens_theta',30,7,5,theta,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_6_the_main_sens_salt',29,7,6,salt,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_7_the_main_sens_uvel',29,7,7,uvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_8_the_main_sens_vvel',29,7,8,vvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_9_the_main_sens_wvel',29,7,9,wvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_10_the_main_sens_etan',30,7,10,etan,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_11_the_main_sens_etanm1',32,7,11,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_12_the_main_sens_uveld',31,7,12,uveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_13_the_main_sens_vveld',31,7,13,vveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_14_the_main_sens_unm1',30,7,14,unm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( 'tapelev3_15_the_main_sens_vnm1',30,7,15,vnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          do ilev_2 = 1, nchklev_2
            if (ilev_2 .le. max_lev2) then
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  ikey_dynamics = ilev_1
                  call dynamics( mytime,myiter,mythid )
                  call solve_for_pressure( mythid )
                  call dummy_in_stepping( mytime,myiter,mythid )
                  mytime = starttime+deltatclock*float(iloop)
                  call the_correction_step( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                endif
              end do
            endif
          end do
        endif
      end do
      call barrier( mythid )
      call cost_test( mythid )
      call cost_final( mythid )

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
      call barrier( mythid )
      do ilev_3 = 1, nchklev_3
        if (ilev_3 .le. max_lev3) then
          do ilev_2 = 1, nchklev_2
            if (ilev_2 .le. max_lev2) then
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                endif
              end do
            endif
          end do
        endif
      end do
      call barrier( mythid )
      call adcost_final( mythid )
      call adcost_test( mythid )
      call barrier( mythid )
      do ilev_3 = nchklev_3, 1, -1
        if (ilev_3 .le. max_lev3) then
          call adread( 'tapelev3_1_the_main_sens_gsnm1',30,7,1,gsnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_2_the_main_sens_gtnm1',30,7,2,gtnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_3_the_main_sens_gunm1',30,7,3,gunm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_4_the_main_sens_gvnm1',30,7,4,gvnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_5_the_main_sens_theta',30,7,5,theta,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_6_the_main_sens_salt',29,7,6,salt,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_7_the_main_sens_uvel',29,7,7,uvel,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_8_the_main_sens_vvel',29,7,8,vvel,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_9_the_main_sens_wvel',29,7,9,wvel,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_10_the_main_sens_etan',30,7,10,etan,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_11_the_main_sens_etanm1',32,7,11,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_12_the_main_sens_uveld',31,7,12,uveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_13_the_main_sens_vveld',31,7,13,vveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_14_the_main_sens_unm1',30,7,14,unm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread( 'tapelev3_15_the_main_sens_vnm1',30,7,15,vnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
C----------------------------------------------
C OPEN FILES OF TAPE: tapelev2
C----------------------------------------------
          call adopen( 'tapelev2_1_the_main_sens_gsnm1',30,8,1,8,17940 )
          call adopen( 'tapelev2_2_the_main_sens_gtnm1',30,8,2,8,17940 )
          call adopen( 'tapelev2_3_the_main_sens_gunm1',30,8,3,8,17940 )
          call adopen( 'tapelev2_4_the_main_sens_gvnm1',30,8,4,8,17940 )
          call adopen( 'tapelev2_5_the_main_sens_theta',30,8,5,8,17940 )
          call adopen( 'tapelev2_6_the_main_sens_salt',29,8,6,8,17940 )
          call adopen( 'tapelev2_7_the_main_sens_uvel',29,8,7,8,17940 )
          call adopen( 'tapelev2_8_the_main_sens_vvel',29,8,8,8,17940 )
          call adopen( 'tapelev2_9_the_main_sens_wvel',29,8,9,8,17940 )
          call adopen( 'tapelev2_10_the_main_sens_etan',30,8,10,8,1196 )
          call adopen( 'tapelev2_11_the_main_sens_etanm1',32,8,11,8,
     $1196 )
          call adopen( 'tapelev2_12_the_main_sens_uveld',31,8,12,8,
     $17940 )
          call adopen( 'tapelev2_13_the_main_sens_vveld',31,8,13,8,
     $17940 )
          call adopen( 'tapelev2_14_the_main_sens_unm1',30,8,14,8,17940 
     $)
          call adopen( 'tapelev2_15_the_main_sens_vnm1',30,8,15,8,17940 
     $)

C----------------------------------------------
C TAPE COMPUTATIONS
C----------------------------------------------
          do ilev_2 = 1, nchklev_2-1
            if (ilev_2 .le. max_lev2) then
              call adwrite( 'tapelev2_1_the_main_sens_gsnm1',30,8,1,
     $gsnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_2_the_main_sens_gtnm1',30,8,2,
     $gtnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_3_the_main_sens_gunm1',30,8,3,
     $gunm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_4_the_main_sens_gvnm1',30,8,4,
     $gvnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_5_the_main_sens_theta',30,8,5,
     $theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_6_the_main_sens_salt',29,8,6,salt,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_7_the_main_sens_uvel',29,8,7,uvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_8_the_main_sens_vvel',29,8,8,vvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_9_the_main_sens_wvel',29,8,9,wvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_10_the_main_sens_etan',30,8,10,
     $etan,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_11_the_main_sens_etanm1',32,8,11,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_12_the_main_sens_uveld',31,8,12,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_13_the_main_sens_vveld',31,8,13,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( 'tapelev2_14_the_main_sens_unm1',30,8,14,
     $unm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( 'tapelev2_15_the_main_sens_vnm1',30,8,15,
     $vnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  ikey_dynamics = ilev_1
                  call dynamics( mytime,myiter,mythid )
                  call solve_for_pressure( mythid )
                  call dummy_in_stepping( mytime,myiter,mythid )
                  mytime = starttime+deltatclock*float(iloop)
                  call the_correction_step( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                endif
              end do
            endif
          end do
          ilev_2 = nchklev_2
          if (ilev_2 .le. max_lev2) then
            call adwrite( 'tapelev2_1_the_main_sens_gsnm1',30,8,1,gsnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_2_the_main_sens_gtnm1',30,8,2,gtnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_3_the_main_sens_gunm1',30,8,3,gunm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_4_the_main_sens_gvnm1',30,8,4,gvnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_5_the_main_sens_theta',30,8,5,theta,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_6_the_main_sens_salt',29,8,6,salt,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_7_the_main_sens_uvel',29,8,7,uvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_8_the_main_sens_vvel',29,8,8,vvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_9_the_main_sens_wvel',29,8,9,wvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_10_the_main_sens_etan',30,8,10,etan,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_11_the_main_sens_etanm1',32,8,11,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_12_the_main_sens_uveld',31,8,12,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( 'tapelev2_13_the_main_sens_vveld',31,8,13,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( 'tapelev2_14_the_main_sens_unm1',30,8,14,unm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( 'tapelev2_15_the_main_sens_vnm1',30,8,15,vnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            do ilev_1 = 1, nchklev_1
              iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
              if (iloop .le. ntimesteps) then
                myiter = niter0+iloop-1
                mytime = starttime+float(iloop-1)*deltatclock
                call dummy_in_stepping( mytime,myiter,mythid )
              endif
            end do
          endif

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
          do ilev_2 = nchklev_2, 1, -1
            if (ilev_2 .le. max_lev2) then
              call adread( 'tapelev2_1_the_main_sens_gsnm1',30,8,1,
     $gsnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_2_the_main_sens_gtnm1',30,8,2,
     $gtnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_3_the_main_sens_gunm1',30,8,3,
     $gunm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_4_the_main_sens_gvnm1',30,8,4,
     $gvnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_5_the_main_sens_theta',30,8,5,
     $theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_6_the_main_sens_salt',29,8,6,salt,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_7_the_main_sens_uvel',29,8,7,uvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_8_the_main_sens_vvel',29,8,8,vvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_9_the_main_sens_wvel',29,8,9,wvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_10_the_main_sens_etan',30,8,10,
     $etan,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_11_the_main_sens_etanm1',32,8,11,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_12_the_main_sens_uveld',31,8,12,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_13_the_main_sens_vveld',31,8,13,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread( 'tapelev2_14_the_main_sens_unm1',30,8,14,
     $unm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread( 'tapelev2_15_the_main_sens_vnm1',30,8,15,
     $vnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
C----------------------------------------------
C TAPE COMPUTATIONS
C----------------------------------------------
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            gsnm1h(ip1,ip2,ip3,ip4,ip5,ilev_1) = gsnm1(ip1-1+1-olx,ip2-
     $1+1-oly,ip3,ip4,ip5)
          end do
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            gtnm1h(ip1,ip2,ip3,ip4,ip5,ilev_1) = gtnm1(ip1-1+1-olx,ip2-
     $1+1-oly,ip3,ip4,ip5)
          end do
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            wvelh(ip1,ip2,ip3,ip4,ip5,ilev_1) = wvel(ip1-1+1-olx,ip2-1+
     $1-oly,ip3,ip4,ip5)
          end do
        end do
      end do
                    end do
                  end do
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  ikey_dynamics = ilev_1
                  call mddynamics( mytime,myiter,mythid )
                  call solve_for_pressure( mythid )
                  call dummy_in_stepping( mytime,myiter,mythid )
                  mytime = starttime+deltatclock*float(iloop)
                  call mdthe_correction_step( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                endif
              end do

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
              do ilev_1 = nchklev_1, 1, -1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            gsnm1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5) = gsnm1h(ip1,ip2,
     $ip3,ip4,ip5,ilev_1)
          end do
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            gtnm1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5) = gtnm1h(ip1,ip2,
     $ip3,ip4,ip5,ilev_1)
          end do
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            wvel(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5) = wvelh(ip1,ip2,
     $ip3,ip4,ip5,ilev_1)
          end do
        end do
      end do
                    end do
                  end do
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  ikey_dynamics = ilev_1
                  call dummy_in_stepping( mytime,myiter,mythid )
                  mytime = starttime+deltatclock*float(iloop)
                  call addo_fields_blocking_exchanges( mythid )
                  call adthe_correction_step( mytime,mythid )
                  mytime = starttime+float(iloop-1)*deltatclock
                  call addummy_in_stepping( mytime,myiter,mythid )
                  call adsolve_for_pressure( mythid )
                  call addynamics( mytime,mythid )
                endif
              end do

            endif
          end do

C----------------------------------------------
C CLOSE FILES OF TAPE: tapelev2
C----------------------------------------------
          call adclose( 'tapelev2_1_the_main_sens_gsnm1',30,8,1,8,17940 
     $)
          call adclose( 'tapelev2_2_the_main_sens_gtnm1',30,8,2,8,17940 
     $)
          call adclose( 'tapelev2_3_the_main_sens_gunm1',30,8,3,8,17940 
     $)
          call adclose( 'tapelev2_4_the_main_sens_gvnm1',30,8,4,8,17940 
     $)
          call adclose( 'tapelev2_5_the_main_sens_theta',30,8,5,8,17940 
     $)
          call adclose( 'tapelev2_6_the_main_sens_salt',29,8,6,8,17940 )
          call adclose( 'tapelev2_7_the_main_sens_uvel',29,8,7,8,17940 )
          call adclose( 'tapelev2_8_the_main_sens_vvel',29,8,8,8,17940 )
          call adclose( 'tapelev2_9_the_main_sens_wvel',29,8,9,8,17940 )
          call adclose( 'tapelev2_10_the_main_sens_etan',30,8,10,8,1196 
     $)
          call adclose( 'tapelev2_11_the_main_sens_etanm1',32,8,11,8,
     $1196 )
          call adclose( 'tapelev2_12_the_main_sens_uveld',31,8,12,8,
     $17940 )
          call adclose( 'tapelev2_13_the_main_sens_vveld',31,8,13,8,
     $17940 )
          call adclose( 'tapelev2_14_the_main_sens_unm1',30,8,14,8,
     $17940 )
          call adclose( 'tapelev2_15_the_main_sens_vnm1',30,8,15,8,
     $17940 )

        endif
      end do
      call barrier( mythid )
      call adctrl_map_forcing( mythid )
      call adinitialise_varia( mythid )

C----------------------------------------------
C CLOSE FILES OF TAPE: tapelev3
C----------------------------------------------
      call adclose( 'tapelev3_1_the_main_sens_gsnm1',30,7,1,8,17940 )
      call adclose( 'tapelev3_2_the_main_sens_gtnm1',30,7,2,8,17940 )
      call adclose( 'tapelev3_3_the_main_sens_gunm1',30,7,3,8,17940 )
      call adclose( 'tapelev3_4_the_main_sens_gvnm1',30,7,4,8,17940 )
      call adclose( 'tapelev3_5_the_main_sens_theta',30,7,5,8,17940 )
      call adclose( 'tapelev3_6_the_main_sens_salt',29,7,6,8,17940 )
      call adclose( 'tapelev3_7_the_main_sens_uvel',29,7,7,8,17940 )
      call adclose( 'tapelev3_8_the_main_sens_vvel',29,7,8,8,17940 )
      call adclose( 'tapelev3_9_the_main_sens_wvel',29,7,9,8,17940 )
      call adclose( 'tapelev3_10_the_main_sens_etan',30,7,10,8,1196 )
      call adclose( 'tapelev3_11_the_main_sens_etanm1',32,7,11,8,1196 )
      call adclose( 'tapelev3_12_the_main_sens_uveld',31,7,12,8,17940 )
      call adclose( 'tapelev3_13_the_main_sens_vveld',31,7,13,8,17940 )
      call adclose( 'tapelev3_14_the_main_sens_unm1',30,7,14,8,17940 )
      call adclose( 'tapelev3_15_the_main_sens_vnm1',30,7,15,8,17940 )


      end


      subroutine adtimestep( bi, bj, imin, imax, jmin, jmax, k, 
     $adphihyd, adphisurfx, adphisurfy )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, drc, drf, 
     $h, hfacc, hfacw, hfacs, depthink, recip_dxc, recip_dxf, recip_dxg,
     $ recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_drc,
     $ recip_drf, recip_h, recip_hfacc, recip_hfacw, recip_hfacs, rkfac,
     $ recip_rkfac, safac, xc, yc, ra, raw, ras, raz, rc, rf, yc0, xc0, 
     $xg, yg, maskw, masks, recip_ra, recip_raw, recip_ras, recip_raz, 
     $tanphiatu, tanphiatv
      double precision depthink(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_h(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision safac(1:nr)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $no_slip_sides, no_slip_bottom, staggertimestep, momviscosity, 
     $momadvection, momforcing, usecoriolis, mompressureforcing, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, implicitfreesurface, rigidlid, 
     $momstepping, tempstepping, saltstepping, metricterms, 
     $usingsphericalpolarmterms, useconstantf, usebetaplanef, 
     $usespheref, implicitdiffusion, implicitviscosity, 
     $dothetaclimrelax, dosaltclimrelax, periodicexternalforcing, 
     $usingpcoords, usingzcoords, nonhydrostatic, globalfiles, 
     $allowfreezing, groundatk1
      logical allowfreezing
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical usespheref
      logical usingcartesiangrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords

      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C define local variables
C==============================================
      double precision ab05
      double precision ab15
      integer i
      integer j
      double precision phxfac
      double precision phyfac
      double precision psfac

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      ab15 = 1.5+abeps
      ab05 = (-0.5)-abeps
      psfac = pffacmom*(1.d0-implicsurfpress)
      if (staggertimestep) then
        phyfac = pffacmom*deltatmom
        do j = jmin, jmax
          do i = imin, imax
            adphihyd(i,j-1,k) = adphihyd(i,j-1,k)+adgvnm1(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)*phyfac*masks(i,j,k,bi,bj)
            adphihyd(i,j,k) = adphihyd(i,j,k)-adgvnm1(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)*phyfac*masks(i,j,k,bi,bj)
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)+adgvnm1(i,j,k,bi,bj)*
     $deltatmom*ab15*masks(i,j,k,bi,bj)
          adgvcd(i,j,k,bi,bj) = adgvcd(i,j,k,bi,bj)+adgvnm1(i,j,k,bi,bj)
     $*deltatmom*masks(i,j,k,bi,bj)
          adphisurfy(i,j) = adphisurfy(i,j)-adgvnm1(i,j,k,bi,bj)*
     $deltatmom*psfac*masks(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adgvnm1(i,j,k,bi,bj)
          adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)*deltatmom*ab05*
     $masks(i,j,k,bi,bj)
        end do
      end do
      if (staggertimestep) then
        phxfac = pffacmom*deltatmom
        do j = jmin, jmax
          do i = imin, imax
            adphihyd(i-1,j,k) = adphihyd(i-1,j,k)+adgunm1(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)*phxfac*maskw(i,j,k,bi,bj)
            adphihyd(i,j,k) = adphihyd(i,j,k)-adgunm1(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)*phxfac*maskw(i,j,k,bi,bj)
          end do
        end do
      endif
      psfac = pffacmom*(1.d0-implicsurfpress)
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)+adgunm1(i,j,k,bi,bj)*
     $deltatmom*ab15*maskw(i,j,k,bi,bj)
          adgucd(i,j,k,bi,bj) = adgucd(i,j,k,bi,bj)+adgunm1(i,j,k,bi,bj)
     $*deltatmom*maskw(i,j,k,bi,bj)
          adphisurfx(i,j) = adphisurfx(i,j)-adgunm1(i,j,k,bi,bj)*
     $deltatmom*psfac*maskw(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adgunm1(i,j,k,bi,bj)
          adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)*deltatmom*ab05*
     $maskw(i,j,k,bi,bj)
        end do
      end do

      end


      subroutine adtimestep_tracer( bi, bj, imin, imax, jmin, jmax, k, 
     $adtracer, adgtracer, adgtrnm1 )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 40 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )

C==============================================
C define common blocks
C==============================================
      common /parm_r/ cg2dtargetresidual, cg2dpcoffdfac, 
     $cg3dtargetresidual, delp, delz, delr, delx, dely, deltat, 
     $deltatmom, deltattracer, deltatclock, abeps, starttime, phimin, 
     $thetamin, rsphere, recip_rsphere, f0, fcori, beta, viscah, viscaz,
     $ visca4, viscar, diffkht, diffkzt, diffk4t, diffkrt, diffkhs, 
     $diffkzs, diffk4s, diffkrs, delt, taucd, rcd, freesurffac, 
     $implicsurfpress, implicdiv2dflow, hfacmin, hfacmindz, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $tavefreq, affacmom, vffacmom, pffacmom, cffacmom, fofacmom, 
     $mtfacmom, cospower, cadjfreq, omega, tauthetaclimrelax, 
     $lambdathetaclimrelax, tausaltclimrelax, lambdasaltclimrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, latfftfiltlo, ivdc_kappa, ro_sealevel, 
     $zonal_filt_lat, bottomdraglinear, bottomdragquadratic
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision latfftfiltlo
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscaz
      double precision zonal_filt_lat

C==============================================
C define arguments
C==============================================
      double precision adgtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtrnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C define local variables
C==============================================
      double precision ab05
      double precision ab15
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      ab15 = 1.5+abeps
      ab05 = (-0.5)-abeps
      do j = jmin, jmax
        do i = imin, imax
          adgtracer(i,j,k,bi,bj) = adgtracer(i,j,k,bi,bj)+adgtrnm1(i,j,
     $k,bi,bj)*deltattracer*ab15
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adgtrnm1(i,j,k,
     $bi,bj)
          adgtrnm1(i,j,k,bi,bj) = adgtrnm1(i,j,k,bi,bj)*deltattracer*
     $ab05
        end do
      end do

      end


      subroutine adwscale( sigma, hbl, ustar, bfsfc, adsigma, adhbl, 
     $adustar, adbfsfc, adwm, adws )
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer nni
      parameter ( nni = 890 )
      integer nnj
      parameter ( nnj = 480 )

C==============================================
C define common blocks
C==============================================
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas

      common /kmixcws/ wmt, wst, deltaz, deltau, zmin, zmax, umin, umax
      double precision deltau
      double precision deltaz
      double precision umax
      double precision umin
      double precision wmt(0:nni+1,0:nnj+1)
      double precision wst(0:nni+1,0:nnj+1)
      double precision zmax
      double precision zmin

C==============================================
C define arguments
C==============================================
      double precision adbfsfc(imt)
      double precision adhbl(imt)
      double precision adsigma(imt)
      double precision adustar(imt)
      double precision adwm(imt)
      double precision adws(imt)
      double precision bfsfc(imt)
      double precision hbl(imt)
      double precision sigma(imt)
      double precision ustar(imt)

C==============================================
C define local variables
C==============================================
      double precision adfzfrac
      double precision adtempvar
      double precision adu3
      double precision adudiff
      double precision adufrac
      double precision adwam
      double precision adwas
      double precision adwbm
      double precision adwbs
      double precision adzdiff
      double precision adzehat
      double precision adzfrac
      double precision fzfrac
      integer i
      integer iz
      integer izp1
      integer ju
      integer jup1
      double precision tempvar
      double precision u3
      double precision udiff
      double precision ufrac
      double precision wam
      double precision was
      double precision wbm
      double precision wbs
      double precision zdiff
      double precision zehat
      double precision zfrac

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfzfrac = 0.d0
      adtempvar = 0.d0
      adu3 = 0.d0
      adudiff = 0.d0
      adufrac = 0.d0
      adwam = 0.d0
      adwas = 0.d0
      adwbm = 0.d0
      adwbs = 0.d0
      adzdiff = 0.d0
      adzehat = 0.d0
      adzfrac = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        adfzfrac = 0.d0
        adtempvar = 0.d0
        adu3 = 0.d0
        adudiff = 0.d0
        adufrac = 0.d0
        adwam = 0.d0
        adwas = 0.d0
        adwbm = 0.d0
        adwbs = 0.d0
        adzdiff = 0.d0
        adzehat = 0.d0
        adzfrac = 0.d0
        zehat = vonk*sigma(i)*hbl(i)*bfsfc(i)
        if (zehat .le. zmax) then
          zdiff = zehat-zmin
          iz = int(zdiff/deltaz)
          iz = min(iz,nni)
          iz = max(iz,0)
          izp1 = iz+1
          udiff = ustar(i)-umin
          ju = int(udiff/deltau)
          ju = min(ju,nnj)
          ju = max(ju,0)
          jup1 = ju+1
          zfrac = zdiff/deltaz-float(iz)
          ufrac = udiff/deltau-float(ju)
          fzfrac = 1.-zfrac
          wam = fzfrac*wmt(iz,jup1)+zfrac*wmt(izp1,jup1)
          wbm = fzfrac*wmt(iz,ju)+zfrac*wmt(izp1,ju)
          was = fzfrac*wst(iz,jup1)+zfrac*wst(izp1,jup1)
          wbs = fzfrac*wst(iz,ju)+zfrac*wst(izp1,ju)
          adufrac = adufrac+adws(i)*((-wbs)+was)
          adwas = adwas+adws(i)*ufrac
          adwbs = adwbs+adws(i)*(1.-ufrac)
          adws(i) = 0.d0
          adfzfrac = adfzfrac+adwbs*wst(iz,ju)
          adzfrac = adzfrac+adwbs*wst(izp1,ju)
          adwbs = 0.d0
          adfzfrac = adfzfrac+adwas*wst(iz,jup1)
          adzfrac = adzfrac+adwas*wst(izp1,jup1)
          adwas = 0.d0
          adufrac = adufrac+adwm(i)*((-wbm)+wam)
          adwam = adwam+adwm(i)*ufrac
          adwbm = adwbm+adwm(i)*(1.-ufrac)
          adwm(i) = 0.d0
          adfzfrac = adfzfrac+adwbm*wmt(iz,ju)
          adzfrac = adzfrac+adwbm*wmt(izp1,ju)
          adwbm = 0.d0
          adfzfrac = adfzfrac+adwam*wmt(iz,jup1)
          adzfrac = adzfrac+adwam*wmt(izp1,jup1)
          adwam = 0.d0
          adzfrac = adzfrac-adfzfrac
          adfzfrac = 0.d0
          adudiff = adudiff+adufrac/deltau
          adufrac = 0.d0
          adzdiff = adzdiff+adzfrac/deltaz
          adzfrac = 0.d0
          adustar(i) = adustar(i)+adudiff
          adudiff = 0.d0
          adzehat = adzehat+adzdiff
          adzdiff = 0.d0
        else
          u3 = ustar(i)*ustar(i)*ustar(i)
          tempvar = u3+conc1*zehat
          adwm(i) = adwm(i)+adws(i)
          adws(i) = 0.d0
          adtempvar = adtempvar-adwm(i)*(vonk*ustar(i)*u3/(tempvar*
     $tempvar))
          adu3 = adu3+adwm(i)*(vonk*ustar(i)/tempvar)
          adustar(i) = adustar(i)+adwm(i)*(vonk*u3/tempvar)
          adwm(i) = 0.d0
          adu3 = adu3+adtempvar
          adzehat = adzehat+adtempvar*conc1
          adtempvar = 0.d0
          adustar(i) = adustar(i)+3*adu3*ustar(i)*ustar(i)
          adu3 = 0.d0
        endif
        adbfsfc(i) = adbfsfc(i)+adzehat*vonk*sigma(i)*hbl(i)
        adhbl(i) = adhbl(i)+adzehat*vonk*sigma(i)*bfsfc(i)
        adsigma(i) = adsigma(i)+adzehat*vonk*hbl(i)*bfsfc(i)
        adzehat = 0.d0
      end do

      end


      subroutine adzero
C***************************************************************
C***************************************************************
C** This routine was generated by the                         **
C** Tangent linear and Adjoint Model Compiler,  TAMC 5.2.14   **
C***************************************************************
C***************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C define parameters                            
C==============================================
      integer nr
      parameter ( nr = 15 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 3 )
      integer oly
      parameter ( oly = 3 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 40 )

C==============================================
C define common blocks
C==============================================
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adcost_r/ adfc, adobjf_test
      double precision adfc
      double precision adobjf_test(nsx,nsy)

      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /addynvars_r/ adetan, aduvel, advvel, adwvel, adtheta, 
     $adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, adgtnm1, adgsnm1
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

      common /adffields/ adfu, adfv, adqnet, adempmr, adsst, adsss
      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /adgm_wtensor/ adgm_wtensor1, adgm_wtensor2, adgm_wtensor3
      double precision adgm_wtensor1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adgm_wtensor2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adgm_wtensor3(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

      common /adkpp/ adkpp1, adkpp2, adkpp3, adkpp4, adkpp5
      double precision adkpp1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp3(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp4(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp5(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /adkpp_short/ adkpp_short1
      double precision adkpp_short1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys
      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)

C==============================================
C define local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adtmpfld2d(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtmpfld3d(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_test(ip1,ip2) = 0.d0
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                aduveld(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advveld(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetanm1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adunm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgucd(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgvcd(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetan(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                aduvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adwvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtheta(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adsalt(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgu(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgv(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgt(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgs(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgunm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgvnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgtnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgsnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adfu(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adfv(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adqnet(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adempmr(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsst(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsss(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_wtensor1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_wtensor2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_wtensor3(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp3(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp4(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adkpp5(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adkpp_short1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencyu(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencyv(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencyt(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencys(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      end


