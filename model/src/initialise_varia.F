C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/model/src/initialise_varia.F,v 1.4.2.2 2001/01/09 21:26:07 adcroft Exp $

#include "CPP_OPTIONS.h"

CStartOfInterface
      SUBROUTINE INITIALISE_VARIA(myThid)
C     /==========================================================\
C     | SUBROUTINE INITIALISE_VARIA                              |
C     | o Set the initial conditions for dynamics variables      |
C     |   and time dependent arrays                              |
C     |==========================================================|
C     | This routine reads/writes  data from an input file and   |
C     | from various binary files.                               |
C     | Each thread invokes an instance of this routine as does  |
C     | each process in a multi-process parallel environment like|
C     | MPI.                                                     |
C     \==========================================================/
      IMPLICIT NONE

C     == Global variables ==
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#ifdef ALLOW_OBCS
#include "DYNVARS.h"
#endif

C     == Routine arguments ==
      INTEGER myThid
CEndOfInterface

C     == Local variables ==
      INTEGER bi,bj,K,iMin,iMax,jMin,jMax

      _BARRIER
C--   Initialise model fields.
C     Starting values of U, V, W, temp., salt. and tendency terms
C     are set here. Fields are either set to default or read from
C     stored files.
      CALL INI_FIELDS( myThid )
      _BARRIER

#ifdef ALLOW_OBCS
C--   Open boundaries data
      IF (openBoundaries) THEN
        CALL OBCS_INIT( myThid )
      ENDIF
#endif

C--   Initial conditions are convectively adjusted (for historical reasons)
      IF ( startTime .EQ. 0. ) THEN
        DO bj = myByLo(myThid), myByHi(myThid)
         DO bi = myBxLo(myThid), myBxHi(myThid)
           iMin=1-Olx
           iMax=sNx+Olx
           jMin=1-Oly
           jMax=sNy+Oly
           CALL CONVECTIVE_ADJUSTMENT(
     I       bi, bj, iMin, iMax, jMin, jMax,
     I       startTime, 0, myThid )
         ENDDO
        ENDDO
        _BARRIER
      END IF

C--   Check dependances between packages
      CALL PACKAGES_INIT( myThid )

#ifdef ALLOW_OBCS
C--   Calculate values on open boundaries at iter=nIter0
      IF (openBoundaries) THEN
        DO bj = myByLo(myThid), myByHi(myThid)
         DO bi = myBxLo(myThid), myBxHi(myThid)
          DO K=1,Nr
           CALL OBCS_CALC( bi, bj, K, startTime, myThid )
           CALL OBCS_APPLY_UV( bi, bj, k, uVel, vVel, myThid )
           CALL OBCS_APPLY_TS( bi, bj, k, theta, salt, myThid )
          ENDDO
         ENDDO
        ENDDO
      ENDIF
#endif

C--   Finally summarise the model state
      CALL STATE_SUMMARY( myThid )

      END
