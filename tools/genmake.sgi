#!/bin/csh -f
#
# $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/tools/Attic/genmake.sgi,v 1.4 1998/06/29 14:44:39 cnh Exp $
#
#  Makefile generator for MITgcm UV codes
#

# Generate make files for SGI IRIX system
set mfile = ( Makefile.sgi )
set mach  = ( 'SGI IRIX/mips4' )

# Directories for source, includes, binaries and executables
# Note
# o If you prefer/need everything under a single directory
#   copy everything in ../psupp/src, ../model/src,
#   ../psupp/inc and ../model/inc into a directory and then
#   edit the paths below to read
#   set PSUPP_SDIR = (  )
#   set MODEL_SDIR = (  )
#   set PSUPP_IDIR = (  )
#   set MODEL_IDIR = (  )
#   set TDIR       = (  )
#   set BDIR       = (  )
#   set EDIR       = (  )
set PSUPP_SDIR = ( ../eesupp/src/ )
set MODEL_SDIR = ( ../model/src/  )
set PSUPP_IDIR = ( ../eesupp/inc/ )
set MODEL_IDIR = ( ../model/inc/  )
set TDIR       = ( ../tools/      )
set BDIR       = ( ../bin/        )
set EDIR       = ( ../exe/        )
set EXE        = ( MITgcmUV       )

set CPP      = ( '/lib/cpp -P' )
set FCOMP    = ( 'f77' )
set LINK     = ( 'f77' )
#set LINK     = ( 'mpif77' )
set DEFINES  = ( '-DUSE_IRIX' )
set F77FLAGS = ( '-extend_source -mp -mpio -bytereclen -Ofast -r10000' )
set INCLUDES = ( '-I.' )
#set INCLUDES = ( '-I. -I/usr/local/mpi/include' )
set LIBS     = ( ' ' )

echo "Creating make file ${mfile} "
echo "#"                    > ${mfile}
echo "# Multithreaded + multi-processing makefile for $mach "      >> ${mfile}
echo "# This make file was generated automatically by the command" >> ${mfile}
echo "# " \"${0}\"                                                 >> ${mfile}
echo "# on `hostname`:`pwd` "                                      >> ${mfile}
echo "#  " `date`                                                  >> ${mfile}
echo "# by $user"                                                  >> ${mfile}
echo "#         "                                                  >> ${mfile}

cat >> ${mfile} <<EOF

# PSUPP_SDIR: Directory holding parallel support routines
# MODEL_SDIR: Directory model code
# PSUPP_IDIR: Directory holding parallel support header files
# MODEL_IDIR: Directory model header files
# TDIR      : Directory where build tools are stored
# BDIR      : Directory where object files are written
# EDIR      : Directory where executable that is generated is written
# INCLUDES  : Directories searched for header files
# CPP       : C-preprocessor command               
# FCOMP     : Fortran compiler command             
# LINK      : Command for link editor program          
# Note           
# ====
# o PSUPP_SDIR ... EDIR can all be set to the current directory if
#   you want to organise things that way. Alternatively they can be
#   set to different directories so that code can be kept on a backed
#   up disk while object files and executables are created on scratch
#   disks. I prefer this latter setup!
# o Under Solaris if the disk on which the compiler is generating 
#   object files and executables is mounted via NFS rather than being
#   a local SCSI disk compilation times can increase by a factor of
#   ten!
PSUPP_SDIR = ${PSUPP_SDIR}
MODEL_SDIR = ${MODEL_SDIR}
PSUPP_IDIR = ${PSUPP_IDIR}
MODEL_IDIR = ${MODEL_IDIR}
TDIR       = ${TDIR}
BDIR       = ${BDIR}  
EDIR       = ${EDIR}
EXE        = \$(EDIR)${EXE}

# C preprocessor
CPP = ${CPP}
# Fortran compiler
FC = ${FCOMP}
# Link editor
LINK = ${LINK}

# Defines for CPP
DEFINES = ${DEFINES}
# Includes for CPP
INCLUDES = ${INCLUDES} -I\$(PSUPP_IDIR) -I\$(MODEL_IDIR)
# Optim./debug for FC
F77FLAGS = ${F77FLAGS}
EOF

set psupp_slist = ( )
set psupp_olist = ( )
if ( ${PSUPP_SDIR} != ${MODEL_SDIR} ) then
 set flist = `ls -1 ${PSUPP_SDIR} | grep '.*\.F'`
 if ( "${flist}" != "" ) then
  foreach f ( $flist )
   set fname = ( ${f:t}       )
   set pf    = ( ${fname:r}.f )
   set of    = ( ${fname:r}.o )
   set psupp_slist = ( ${psupp_slist} ${f}  )
   set psupp_olist = ( ${psupp_olist} ${of} )
  end
 endif
endif

set model_slist = ( )
set model_olist = ( )
set flist = `ls -1 ${MODEL_SDIR} | grep '.*\.F'`
if ( "${flist}" != "" ) then
 foreach f ( ${flist} )
  set fname = ( ${f:t}       )
  set pf    = ( ${fname:r}.f )
  set of    = ( ${fname:r}.o )
  set model_slist = ( ${model_slist} ${f}  )
  set model_olist = ( ${model_olist} ${of} )
 end
endif

echo "                   " >> ${mfile}
echo "# ===========      " >> ${mfile}
echo "# File lists       " >> ${mfile}
echo "# ===========      " >> ${mfile}
if ( $#psupp_olist == 0 ) then
 echo 'psupp_objs = ' >> ${mfile}
else if ( $#psupp_olist == 1 ) then
 echo 'psupp_objs = '${psupp_olist} >> ${mfile}
else
 echo 'psupp_objs = '$psupp_olist[1] '\' >> ${mfile}
 set psupp_count = 2
 while ( $psupp_count < $#psupp_olist )
  echo '             '$psupp_olist[$psupp_count] '\' >> ${mfile}
  @ psupp_count = $psupp_count + 1
 end
 echo '             '$psupp_olist[$#psupp_olist] >> ${mfile}
endif
echo "                   " >> ${mfile}
if ( $#psupp_slist == 0 ) then
 echo 'psupp_srcs = ' >> ${mfile}
else if ( $#psupp_slist == 1 ) then
 echo 'psupp_srcs = $(PSUPP_SDIR)'${psupp_slist} >> ${mfile}
else
 echo 'psupp_srcs = $(PSUPP_SDIR)'$psupp_slist[1] '\' >> ${mfile}
 set psupp_count = 2
 while ( $psupp_count < $#psupp_slist )
  echo '             $(PSUPP_SDIR)'$psupp_slist[$psupp_count] '\' >> ${mfile}
  @ psupp_count = $psupp_count + 1
 end
 echo '             $(PSUPP_SDIR)'$psupp_slist[$#psupp_slist] >> ${mfile}
endif
echo "                   " >> ${mfile}
if ( $#model_olist == 0 ) then
 echo 'model_objs = ' >> ${mfile}
else if ( $#model_olist == 1 ) then
 echo 'model_objs = '${model_olist} >> ${mfile}
else
 echo 'model_objs = '$model_olist[1] '\' >> ${mfile}
 set model_count = 2
 while ( $model_count < $#model_olist )
  echo '             '$model_olist[$model_count] '\' >> ${mfile}
  @ model_count = $model_count + 1
 end
 echo '             '$model_olist[$#model_olist] >> ${mfile}
endif
echo "                   " >> ${mfile}
if ( $#model_slist == 0 ) then
 echo 'model_srcs = ' >> ${mfile}
else if ( $#model_slist == 1 ) then
 echo 'model_srcs = $(MODEL_SDIR)'${model_slist} >> ${mfile}
else
 echo 'model_srcs = $(MODEL_SDIR)'$model_slist[1] '\' >> ${mfile}
 set model_count = 2
 while ( $model_count < $#model_slist )
  echo '             $(MODEL_SDIR)'$model_slist[$model_count] '\' >> ${mfile}
  @ model_count = $model_count + 1
 end
 echo '             $(MODEL_SDIR)'$model_slist[$#model_slist] >> ${mfile}
endif
echo "                   " >> ${mfile}
echo 'objs = $(psupp_objs) $(model_objs)' >> ${mfile}
echo 'srcs = $(psupp_srcs) $(model_srcs)' >> ${mfile}
echo "                   " >> ${mfile}
echo "# ===========      " >> ${mfile}
echo "# Begin rules      " >> ${mfile}
echo "# ===========      " >> ${mfile}
echo "                   " >> ${mfile}
echo ".SUFFIXES:         " >> ${mfile}
echo ".SUFFIXES: .o .f .F" >> ${mfile}
echo "                   " >> ${mfile}
echo '$(EXE): $(objs)    ' >> ${mfile}
echo '	$(LINK) -o $(EXE) $(F77FLAGS) $(objs)' >> ${mfile}
echo "                   " >> ${mfile}
echo '.F.f:' >> ${mfile}
echo '	$(CPP) $(INCLUDES) $(DEFINES) $< > $@' >> ${mfile}
echo '.f.o:' >> ${mfile}
echo '	$(FC) $(F77FLAGS) -c $<' >> ${mfile}
echo "                   " >> ${mfile}
echo 'clean:  ' >> ${mfile}
echo '	-rm -f *.o *.f   ' >> ${mfile}
echo '	-rm -rf rii_files' >> ${mfile}
echo 'Clean:  ' >> ${mfile}
echo '	@make clean      ' >> ${mfile}
echo '	-rm -f *.h *.F   ' >> ${mfile}
echo "                   " >> ${mfile}
echo 'depend:  ' >> ${mfile}
echo '	ln -sf $(PSUPP_SDIR)/*.F $(MODEL_SDIR)/*.F .' >> ${mfile}
echo '#	ln -sf $(PSUPP_IDIR)/*.h $(MODEL_IDIR)/*.h .' >> ${mfile}
echo '	makedepend $(INCLUDES) -o .f *.F' >> ${mfile}
echo "                   " >> ${mfile}

