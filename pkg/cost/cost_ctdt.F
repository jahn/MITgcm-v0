C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/pkg/cost/Attic/cost_ctdt.F,v 1.1.2.1 2002/02/05 20:23:57 heimbach Exp $

#include "COST_CPPOPTIONS.h"


      subroutine cost_CTDT(
     I                     myiter,
     I                     mytime,
     I                     mythid
     &                   )

c     ==================================================================
c     SUBROUTINE cost_CTDT
c     ==================================================================
c
c     o Evaluate cost function contribution of CTD temperature data.
c
c     started:  Elisabeth Remy eremy@ucsd.edu 30-Aug-2000
c
c
c     ==================================================================
c     SUBROUTINE cost_CTDT
c     ==================================================================

      implicit none

c     == global variables ==

#include "EEPARAMS.h"
#include "SIZE.h"
#include "GRID.h"
#include "DYNVARS.h"

#include "cal.h"
#include "cost.h"
#include "ctrl.h"
#include "ctrl_dummy.h"
#include "optim.h"

c     == routine arguments ==

      integer myiter
      _RL     mytime
      integer mythid

c     == local variables ==

      integer bi,bj
      integer i,j,k
      integer itlo,ithi
      integer jtlo,jthi
      integer jmin,jmax
      integer imin,imax
      integer nrec
      integer irec
      integer ilu
      
      _RL fctile_ctdt
      _RL fcthread_ctdt
      _RL www (1-olx:snx+olx,1-oly:sny+oly)
      _RL wtmp (1-olx:snx+olx,1-oly:sny+oly)
      _RL tmpobs (1-olx:snx+olx,1-oly:sny+oly)
      _RL tmpbar (1-olx:snx+olx,1-oly:sny+oly)
      _RL cmask (1-olx:snx+olx,1-oly:sny+oly)  
      _RL spval
      
      character*(80) fnametheta

      logical doglobalread
      logical ladinit

      character*(MAX_LEN_MBUF) msgbuf

c     == external functions ==

      integer  ilnblnk
      external ilnblnk

c     == end of interface ==

      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      
      spval = -9990.

c--   Read state record from global file.
      doglobalread = .false.
      ladinit      = .false.
      
c      call cal_TimePassed( topexstartdate, middate, difftime, mythid )
c      call cal_ToSeconds( difftime, diffsecs, mythid )

#ifdef ALLOW_CTDT_COST_CONTRIBUTION

#ifdef ECCO_VERBOSE
      write(msgbuf,'(a)') ' '
      call print_message( msgbuf, standardmessageunit,
     &                    SQUEEZE_RIGHT , mythid)
      write(msgbuf,'(a,i8.8)')
     &  ' cost_CTDT: number of records to process =', nmonsrec
      call print_message( msgbuf, standardmessageunit,
     &                    SQUEEZE_RIGHT , mythid)
      write(msgbuf,'(a)') ' '
      call print_message( msgbuf, standardmessageunit,
     &                    SQUEEZE_RIGHT , mythid)
#endif

      if (optimcycle .ge. 0) then
        ilu=ilnblnk( tbarfile )
        write(fnametheta(1:80),'(2a,i10.10)') tbarfile(1:ilu),'.',
     &                                   optimcycle
      else
        print*
        print*,' cost_CTDT: optimcycle has a wrong value.'
        print*,'                 optimcycle = ',optimcycle
        print*
        stop   '  ... stopped in cost_CTDT.'
      endif
      
      fcthread_ctdt = 0. _d 0

c--   Loop over records.
      do irec = 1,nmonsrec

c--     Read time averages and the monthly mean data.
        call active_read_xy( fnametheta, tbar, irec,
     &          doglobalread, ladinit,
     &          optimcycle, mythid
     &   , xx_theta_dummy )
  
ce     &                       myiter, mytime )

c--     Determine the record to be read on observations.

c        levoff = mod(modelstartdate(1)/100,100)
c        levmon = (irec-1) + levoff
c        levmon = mod(levmon-1,12)+1
              
ccc        call cost_ReadCtd( mythid )
        call mdsreadfield( ctdtfile, 64, 'RL', nr, ctdtobs, irec,
     &                     mythid)

c--     Loop over this thread's tiles.
        do bj = jtlo,jthi
          do bi = itlo,ithi
c--         Loop over the model layers

            fctile_ctdt = 0. _d 0

            do k = 1,nr

c--           Determine the weights to be used.
              do j = jmin,jmax
                do i = imin,imax
                  cmask(i,j) = 1. _d 0
                  if (ctdtobs(i,j,k,bi,bj) .eq. 0.) then
                    cmask(i,j) = 0. _d 0
                  endif
                 
                  if (ctdtobs(i,j,k,bi,bj) .lt. spval) then
                    cmask(i,j) = 0. _d 0
                  endif
                  
                enddo
              enddo
              
              do j = jmin,jmax
                do i = imin,imax
                  www(i,j)    = cosphi(i,j,bi,bj)*cmask(i,j)                
                  tmpobs(i,j) = ctdtobs(i,j,k,bi,bj)
                  tmpbar(i,j) = tbar(i,j,k,bi,bj)
                  wtmp(i,j) = wtheta(k,bi,bj)
                enddo
              enddo

              do j = jmin,jmax
                do i = imin,imax
c--               The array ctdtobs contains CTD temperature.
                  if(cmask(i,j).eq.1.0) then 
                    print *,'cost_ctd',i,j,tmpbar(i,j),tmpobs(i,j)
                  endif
                  fctile_ctdt = fctile_ctdt + 
     &                             (wtmp(i,j)*www(i,j))*
     &                             (tmpbar(i,j)-tmpobs(i,j))*
     &                             (tmpbar(i,j)-tmpobs(i,j))

                enddo
              enddo
            enddo
c--         End of loop over layers.

            fcthread_ctdt    = fcthread_ctdt    + fctile_ctdt
            objf_ctdt(bi,bj) = objf_ctdt(bi,bj) + fctile_ctdt   

#ifdef ECCO_VERBOSE
            write(msgbuf,'(a)') ' '
            call print_message( msgbuf, standardmessageunit,
     &                          SQUEEZE_RIGHT , mythid)
            write(msgbuf,'(a,i8.8,1x,i3.3,1x,i3.3)')
     &        ' COST_CTDT: irec,bi,bj            =  ',irec,bi,bj
            call print_message( msgbuf, standardmessageunit,
     &                          SQUEEZE_RIGHT , mythid)
            write(msgbuf,'(a,d22.15)')
     &        ' COST_CTDT: cost function         = ', fctile_ctdt
            call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
            write(msgbuf,'(a)') ' '
            call print_message( msgbuf, standardmessageunit,
     &                          SQUEEZE_RIGHT , mythid)
#endif

         enddo
        enddo

#ifdef ECCO_VERBOSE
c--     Print cost function for all tiles.
        _GLOBAL_SUM_R8( fcthread_ctdt , myThid )
        write(msgbuf,'(a)') ' '
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
        write(msgbuf,'(a,i8.8)')
     &    ' cost_CTDT: irec =  ',irec
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
        write(msgbuf,'(a,a,d22.15)')
     &    ' global cost function value',
     &    ' ( CTD temp. )  = ',fcthread_ctdt
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
        write(msgbuf,'(a)') ' '
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
#endif

      enddo
c--   End of second loop over records.

#else
c--   Do not enter the calculation of the CTD temperature contribution
c--   to the final cost function.
      
      fctile_ctdt   = 0. _d 0
      fcthread_ctdt = 0. _d 0

crg
      nrec = 1
crg

      _BEGIN_MASTER( mythid )
        write(msgbuf,'(a)') ' '
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
        write(msgbuf,'(a,a)')
     &    ' cost_CTDT: no contribution of CTD temperature ',
     &                    ' to cost function.'
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
        write(msgbuf,'(a,a,i9.8)')
     &    ' cost_CDTT: number of records that would have',
     &                      ' been processed: ',nrec
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
        write(msgbuf,'(a)') ' '
        call print_message( msgbuf, standardmessageunit,
     &                      SQUEEZE_RIGHT , mythid)
      _END_MASTER( mythid )
#endif

      return
      end
