C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/pkg/aim/Attic/aim_write_diags.F,v 1.1.2.2 2001/01/26 00:39:11 cnh Exp $
C $Name:  $

#include "AIM_OPTIONS.h"

CStartOfInterFace
      SUBROUTINE AIM_WRITE_DIAGS( myTime, myIter, myThid )
C     /==========================================================\
C     | SUBROUTINE AIM_WRITE_DIAGS                               |
C     | o Write out AIM diagnostic output                        |
C     \==========================================================/
      IMPLICIT NONE

C     === Global variables ===
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "AIM_DIAGS.h"
      LOGICAL  DIFFERENT_MULTIPLE
      EXTERNAL DIFFERENT_MULTIPLE

C     == Routine arguments ==
C     myTime - Current time of simulation ( s )
C     myIter - Iteration number
C     myThid - Number of this instance of the routine
      _RL     myTime
      INTEGER myIter
      INTEGER myThid
CEndOfInterface

#ifdef ALLOW_AIM

C     == Local variables ==
      INTEGER bi, bj, K
      CHARACTER*(MAX_LEN_MBUF) fn
      LOGICAL gf
      gf = .TRUE.

#ifdef INCLUDE_DIAGNOSTICS_INTERFACE_CODE

C     Dump files and restart average computation if needed
      IF ( myIter.NE.nIter0 .AND.
     &     DIFFERENT_MULTIPLE(taveFreq,myTime,
     &     myTime-deltaTClock)
     &     ) THEN

C      Normalize by integrated time
       DO bj = myByLo(myThid), myByHi(myThid)
        DO bi = myBxLo(myThid), myBxHi(myThid)
         CALL TIMEAVER_FINAL_XY(USTRtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(VSTRtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(TSRtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(OLRtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(SSRtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(SLRtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(SHFtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(EVAPtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(PRECNVtave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(PRECLStave,AIM_timeave,bi,bj,myThid)
         CALL TIMEAVER_FINAL_XY(CLOUDCtave,AIM_timeave,bi,bj,myThid)
        ENDDO
       ENDDO


       _BARRIER
       _BEGIN_MASTER( myThid )
        WRITE(fn,'(A,I10.10)') 'aimphyvars.',myIter
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,USTRtave,   1,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,VSTRtave,   2,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,TSRtave ,   3,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,OLRtave ,   4,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,SSRtave ,   5,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,SLRtave ,   6,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,SHFtave ,   7,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,EVAPtave,   8,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,PRECNVtave, 9,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,PRECLStave,10,myIter,myThid)
        CALL MDSWRITEFIELD(fn,precFloat32,gf,'RL',1,CLOUDCtave,11,myIter,myThid)
       _END_MASTER( myThid )
       _BARRIER

C      Reset averages to zero
       DO bj = myByLo(myThid), myByHi(myThid)
        DO bi = myBxLo(myThid), myBxHi(myThid)
         CALL TIMEAVER_INI_XY(USTRtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(VSTRtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(TSRtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(OLRtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(SSRtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(SLRtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(SHFtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(EVAPtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(PRECNVtave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(PRECLStave, bi,bj,myThid)
         CALL TIMEAVER_INI_XY(CLOUDCtave, bi,bj,myThid)
        ENDDO
       ENDDO

      ENDIF

#endif /* INCLUDE_DIAGNOSTICS_INTERFACE_CODE */

#endif /* ALLOW_AIM */

      RETURN
      END
