C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/pkg/exch2/Attic/exch2_send_rx1_ad.template,v 1.1 2007/07/27 22:15:24 heimbach Exp $
C $Name:  $

#include "CPP_EEOPTIONS.h"
#include "W2_OPTIONS.h"

      SUBROUTINE EXCH2_SEND_RX1_AD(
     I       tIlo, tIhi, tiStride,
     I       tJlo, tJhi, tjStride,
     I       tKlo, tKhi, tkStride,
     I       thisTile, nN,
     I       e2Bufr1_RX, e2BufrRecSize,
     I       array,
     I       i1Lo, i1Hi, j1Lo, j1Hi, k1Lo, k1Hi,
     O       e2_msgHandle,
     I       commSetting, myThid )

      IMPLICIT NONE

#include "SIZE.h"
#include "EEPARAMS.h"
#include "EESUPPORT.h"
#include "W2_EXCH2_TOPOLOGY.h"

C     === Routine arguments ===
      INTEGER tILo, tIHi, tiStride
      INTEGER tJLo, tJHi, tjStride
      INTEGER tKLo, tKHi, tkStride
      INTEGER i1Lo, i1Hi, j1Lo, j1Hi, k1Lo, k1Hi
      INTEGER thisTile, nN
      INTEGER e2BufrRecSize 
      _RX     e2Bufr1_RX( e2BufrRecSize )
      _RX     array(i1Lo:i1Hi,j1Lo:j1Hi,k1Lo:k1Hi)
      INTEGER e2_msgHandle(1)
      INTEGER myThid
      CHARACTER commSetting

C     == Local variables ==
C     itl, jtl, ktl  :: Loop counters
C                    :: itl etc... target local
C                    :: itc etc... target canonical
C                    :: isl etc... source local
C                    :: isc etc... source canonical
      INTEGER itl, jtl, ktl
      INTEGER itc, jtc
      INTEGER isc, jsc
      INTEGER isl, jsl
c     INTEGER ktc, ksc, ksl
C     tt         :: Target tile
C     itb, jtb   :: Target local to canonical offsets
C
      INTEGER  tt
      INTEGER itb, jtb
      INTEGER isb, jsb
      INTEGER pi(2), pj(2), oi, oj
      INTEGER iBufr

C     MPI setup
#ifdef ALLOW_USE_MPI
      INTEGER theTag, theType
      INTEGER sProc, tProc, mpiRc
      INTEGER mpiStatus(MPI_STATUS_SIZE)
#endif
#ifdef W2_E2_DEBUG_ON
      CHARACTER*(MAX_LEN_MBUF) messageBuffer
#endif

      IF     ( commSetting .EQ. 'P' ) THEN
C      Need to check that buffer synchronisation token is decremented 
C      before filling buffer.
      ENDIF

      tt=exch2_neighbourId(nN, thisTile )
      itb=exch2_tbasex(tt)
      jtb=exch2_tbasey(tt)
      isb=exch2_tbasex(thisTile)
      jsb=exch2_tbasey(thisTile)
      pi(1)=exch2_pi(1,nN,thisTile)
      pi(2)=exch2_pi(2,nN,thisTile)
      pj(1)=exch2_pj(1,nN,thisTile)
      pj(2)=exch2_pj(2,nN,thisTile)
      oi=exch2_oi(nN,thisTile)
      oj=exch2_oj(nN,thisTile)
#ifdef W2_E2_DEBUG_ON
      WRITE(messageBuffer,'(A,I4,A,I4)')
     &               'EXCH2_SEND_RX1_AD sourceTile= ',
     &                                    thisTile,
     &                                   'targetTile= ',tt
      CALL PRINT_MESSAGE(messageBuffer,
     I      standardMessageUnit,SQUEEZE_BOTH,
     I      myThid)
#endif /* W2_E2_DEBUG_ON */

      iBufr=0
      DO ktl=tKlo,tKhi,tKStride
       DO jtl=tJLo, tJHi, tjStride
        DO itl=tILo, tIHi, tiStride
         iBufr=iBufr+1
        ENDDO
       ENDDO
      ENDDO

C     Do data transport depending on communication mechanism between source and target tile
      IF     ( commSetting .EQ. 'P' ) THEN
C      Need to set data ready assertion (increment buffer synchronisation token)
C      for multithreaded mode, for now do nothing i.e. assume only one thread per process.
      ELSEIF ( commSetting .EQ. 'M' ) THEN
#ifdef ALLOW_USE_MPI
C      Setup MPI stuff here
       theTag =  (thisTile-1)*MAX_NEIGHBOURS + nN
     &         + 10000*(
     &            (tt-1)*MAX_NEIGHBOURS + nN
     &           )
       tProc = exch2_tProc(tt)-1
       sProc = exch2_tProc(thisTile)-1
       theType = MPI_REAL8
#ifdef W2_E2_DEBUG_ON
       WRITE(messageBuffer,'(A,I4,A,I4,A)') ' SEND FROM TILE=', thisTile,
     &                                   ' (proc = ',sProc,')'
       CALL PRINT_MESSAGE(messageBuffer,
     I      standardMessageUnit,SQUEEZE_RIGHT,
     I      myThid)
       WRITE(messageBuffer,'(A,I4,A,I4,A)') '        TO TILE=', tt,
     &                                   ' (proc = ',tProc,')'
       CALL PRINT_MESSAGE(messageBuffer,
     I      standardMessageUnit,SQUEEZE_RIGHT,
     I      myThid)
       WRITE(messageBuffer,'(A,I10)') '            TAG=', theTag
       CALL PRINT_MESSAGE(messageBuffer,
     I      standardMessageUnit,SQUEEZE_RIGHT,
     I      myThid)
       WRITE(messageBuffer,'(A,I4)') '            NEL=', iBufr
       CALL PRINT_MESSAGE(messageBuffer,
     I      standardMessageUnit,SQUEEZE_RIGHT,
     I      myThid)
#endif /* W2_E2_DEBUG_ON */
       CALL MPI_Recv( e2Bufr1_RX, iBufr, theType,
     I                 tProc, theTag, MPI_COMM_MODEL, 
     O                 mpiStatus, mpiRc )
#endif
      ELSE
       STOP 'EXCH2_SEND_RX1_AD:: commSetting VALUE IS INVALID'
      ENDIF

      iBufr=0
      DO ktl=tKlo,tKhi,tKStride
       DO jtl=tJLo, tJHi, tjStride
        DO itl=tILo, tIHi, tiStride
         iBufr=iBufr+1
         itc=itl+itb
         jtc=jtl+jtb
         isc=pi(1)*itc+pi(2)*jtc+oi
         jsc=pj(1)*itc+pj(2)*jtc+oj
         isl=isc-isb
         jsl=jsc-jsb
         array(isl,jsl,ktl) = array(isl,jsl,ktl) + e2Bufr1_RX(iBufr)
         e2Bufr1_RX(iBufr) = 0. _d 0
        ENDDO
       ENDDO
      ENDDO
 
      RETURN
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

CEH3 ;;; Local Variables: ***
CEH3 ;;; mode:fortran ***
CEH3 ;;; End: ***
