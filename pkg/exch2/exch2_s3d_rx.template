C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/pkg/exch2/exch2_s3d_rx.template,v 1.6 2009/05/25 02:00:55 jmc Exp $
C $Name:  $

#include "CPP_EEOPTIONS.h"
#include "W2_OPTIONS.h"

CBOP
C     !ROUTINE: EXCH2_S3D_RX

C     !INTERFACE:
      SUBROUTINE EXCH2_S3D_RX(
     U                       phi,
     I                       myNz, myThid )

C     !DESCRIPTION:
C     *==========================================================*
C     | SUBROUTINE EXCH2_S3D_RX
C     | o Handle Simple exchanges (= that ignore corners)
C     |   for _RX, 3-dim scalar arrays with overlap size = 1
C     *==========================================================*
C     | Invoke appropriate exchange routine depending on type
C     | of grid (cube or globally indexed) to be operated on.
C     *==========================================================*

C     !USES:
      IMPLICIT NONE
C     === Global data ===
#include "SIZE.h"
#include "EEPARAMS.h"
c#include "EESUPPORT.h"
c#include "W2_EXCH2_SIZE.h"
c#include "W2_EXCH2_TOPOLOGY.h"

C     !INPUT/OUTPUT PARAMETERS:
C     === Routine arguments ===
C     phi    :: Array with overlap regions are to be exchanged
C     myNz   :: 3rd dimension of array to exchange
C     myThid :: My thread id.
      INTEGER myNz
      _RX phi(0:sNx+1,0:sNy+1,myNz,nSx,nSy)
      INTEGER myThid

C     !LOCAL VARIABLES:
C     == Local variables ==
C     OL[wens]       :: Overlap extents in west, east, north, south.
C     exchWidth[XY]  :: Extent of regions that will be exchanged.
      INTEGER OLw, OLe, OLn, OLs, exchWidthX, exchWidthY

CEOP

      OLw        = 1
      OLe        = 1
      OLn        = 1
      OLs        = 1
      exchWidthX = 1
      exchWidthY = 1
C     ** NOTE ** The exchange routine we use here does not
C                require the preceeding and following barriers.
C                However, the slow, simple exchange interface
C                that is calling it here is meant to ensure
C                that threads are synchronised before exchanges
C                begine.

      IF (useCubedSphereExchange) THEN

       CALL EXCH2_RX1_CUBE( phi, 'T ',
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_IGNORE_CORNERS, myThid )

C---- This 2nd call has been added for the case where 1 tile-Edge
C     is connected to 2 different tiles: the last neighbour in the loop
C     tends to over-write a valid value (provided by the 1rst neighbour)
C     with a not-yet-right data:
C       e.g., cs32: 16x32, East-Edge of tile.8 on face.4 connect to
C       tiles 11 & 12 on face.6 :
C              |
C              |  f6:t11    i: 1,
C              |            v 16, j:1>32
C       f4:t8  |--------
C     32       |            i: 1,
C   j:1^,      |  f6:t12    v 16, j:1>32
C     i:1>16   |
C
C    1rst call: t8(17,17) <- t11(16,1)   = valid
C               t8(17,17) <- t12( 0,1)   = not yet valid
C              t12( 0,1 ) <- t11(16,1)   = valid
C     Adding a 2nd call does not fix this index-range Pb, but the over-writting
C     value is right the 2nd time (because of the 1rst exch).
C----
       CALL EXCH2_RX1_CUBE( phi, 'T ',
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_IGNORE_CORNERS, myThid )

      ELSE

#ifndef AUTODIFF_EXCH2
       CALL EXCH_RX( phi,
     I            OLw, OLe, OLs, OLn, myNz,
     I            exchWidthX, exchWidthY,
     I            FORWARD_SIMULATION, EXCH_IGNORE_CORNERS, myThid )
#endif

      ENDIF

      RETURN
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|

CEH3 ;;; Local Variables: ***
CEH3 ;;; mode:fortran ***
CEH3 ;;; End: ***
