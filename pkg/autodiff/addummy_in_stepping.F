C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/pkg/autodiff/addummy_in_stepping.F,v 1.10 2003/10/09 04:19:18 edhill Exp $

#include "AUTODIFF_OPTIONS.h"

CBOP
C     !ROUTINE: addummy_in_stepping
C     !INTERFACE:
      subroutine addummy_in_stepping( mytime, myiter, myThid )

C     !DESCRIPTION: \bv
C     *==========================================================*
C     | SUBROUTINE addummy_in_stepping                           |
C     *==========================================================*
C     Extract adjoint variable from TAMC/TAF-generated
C     adjoint common blocks, contained in adcommon.h
C     and write fields to file;
C     Make sure common blocks in adcommon.h are up-to-date
C     w.r.t. current adjoint code.
C     *==========================================================*
C     | SUBROUTINE addummy_in_stepping                           |
C     *==========================================================*
C     \ev

C     !USES:
      IMPLICIT NONE

C     == Global variables ===
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#ifdef ALLOW_AUTODIFF_MONITOR
# include "adcommon.h"
#endif

      LOGICAL  DIFFERENT_MULTIPLE
      EXTERNAL DIFFERENT_MULTIPLE
      INTEGER  IO_ERRCOUNT
      EXTERNAL IO_ERRCOUNT

C     !INPUT/OUTPUT PARAMETERS:
C     == Routine arguments ==
C     myIter - iteration counter for this thread
C     myTime - time counter for this thread
C     myThid - Thread number for this instance of the routine.
      integer myThid
      integer myiter
      _RL     mytime 

#ifdef ALLOW_AUTODIFF_MONITOR

C     !LOCAL VARIABLES:
c     == local variables ==
C     suff - Hold suffix part of a filename
C     beginIOErrCount - Begin and end IO error counts
C     endIOErrCount
C     msgBuf - Error message buffer
      CHARACTER*(MAX_LEN_FNAM) suff
      INTEGER beginIOErrCount
      INTEGER endIOErrCount
      CHARACTER*(MAX_LEN_MBUF) msgBuf

c     == end of interface ==
CEOP

      call TIMER_START('I/O (WRITE)        [ADJOINT LOOP]', myThid )

      IF (
     &  DIFFERENT_MULTIPLE(dumpFreq,mytime,
     &                     mytime-deltaTClock)
     & ) THEN

         write(*,*) 'myIter= ',myiter


       call adexch_xyz_rl( mythid,adtheta)
       call adexch_xyz_rl( mythid,adsalt)
       call adexch_xy_rl( mythid,adfu )
       call adexch_xy_rl( mythid,adfv )
       call adexch_xy_rl( mythid,adqnet )
       call adexch_xy_rl( mythid,adempmr )
#ifdef ALLOW_EDTAUX_CONTROL
       call adexch_xyz_rl( mythid,adeddytaux )
#endif
#ifdef ALLOW_EDTAUY_CONTROL
       call adexch_xyz_rl( mythid,adeddytauy )
#endif
#ifdef ALLOW_TR1_CONTROL
       call adexch_xyz_rl( mythid,adtr1 )
#endif
#ifdef ALLOW_DIFFKR_CONTROL
       call adexch_xyz_rl( mythid,addiffkr )
#endif
#ifdef ALLOW_KAPGM_CONTROL
       call adexch_xyz_rl( mythid,adkapgm )
#endif
#ifdef ALLOW_SSTO_CONTROL
       call adexch_xy_rl( mythid,adsst )
#endif
#ifdef ALLOW_SSSO_CONTROL
       call adexch_xy_rl( mythid,adsss )
#endif

       _BARRIER
       _BEGIN_MASTER( myThid )

C--     Set suffix for this set of data files.
        WRITE(suff,'(I10.10)') myIter
        writeBinaryPrec = writeStatePrec

C--     Read IO error counter
        beginIOErrCount = IO_ERRCOUNT(myThid)

        CALL WRITE_FLD_XYZ_RL( 
     &       'ADJtheta.',suff, adtheta, myIter, myThid)
        CALL WRITE_FLD_XYZ_RL( 
     &       'ADJsalt.',suff, adsalt, myIter, myThid)
        CALL WRITE_FLD_XYZ_RL( 
     &       'ADJuvel.',suff, aduvel, myIter, myThid)
        CALL WRITE_FLD_XYZ_RL( 
     &       'ADJvvel.',suff, advvel, myIter, myThid)
        CALL WRITE_FLD_XY_RL ( 'ADJtaux.',suff, adfu, myIter, myThid)
        CALL WRITE_FLD_XY_RL ( 'ADJtauy.',suff, adfv, myIter, myThid)
        CALL WRITE_FLD_XY_RL ( 'ADJqnet.',suff, adqnet, myIter, myThid)
        CALL WRITE_FLD_XY_RL ( 'ADJempr.',suff, adempmr, myIter, myThid)
c
#ifdef ALLOW_TR1_CONTROL
        CALL WRITE_FLD_XYZ_RL( 
     &       'ADJtr1. ',suff, adtr1, myIter, myThid)
#endif
#ifdef ALLOW_DIFFKR_CONTROL
        CALL WRITE_FLD_XYZ_RL ( 'ADJdiffkr.',suff, addiffkr, 
     &       myIter, myThid)
#endif
#ifdef ALLOW_KAPGM_CONTROL
        CALL WRITE_FLD_XYZ_RL ( 'ADJkagm.',suff, adkapgm, 
     &       myIter, myThid)
#endif
#ifdef ALLOW_EDTAUX_CONTROL
        CALL WRITE_FLD_XYZ_RL(
     &       'ADJedtaux. ',suff, adeddytaux, myIter, myThid)
#endif
#ifdef ALLOW_EDTAUY_CONTROL
        CALL WRITE_FLD_XYZ_RL(
     &       'ADJedtauy. ',suff, adeddytauy, myIter, myThid)
#endif
#ifdef ALLOW_SSTO_CONTROL
        CALL WRITE_FLD_XY_RL( 'ADJsst.',suff, adsst, myIter, myThid)
#endif
#ifdef ALLOW_SSSO_CONTROL
        CALL WRITE_FLD_XY_RL( 'ADJsss.',suff, adsss, myIter, myThid)
#endif
c

C--     Reread IO error counter
        endIOErrCount = IO_ERRCOUNT(myThid)

C--     Check for IO errors
        IF ( endIOErrCount .NE. beginIOErrCount ) THEN
         WRITE(msgBuf,'(A)')  'S/R WRITE_STATE'
         CALL PRINT_ERROR( msgBuf, 1 )
         WRITE(msgBuf,'(A)')  'Error writing out model state'
         CALL PRINT_ERROR( msgBuf, 1 )
         WRITE(msgBuf,'(A,I10)') 'Timestep ',myIter
         CALL PRINT_ERROR( msgBuf, 1 )
        ELSE
         WRITE(msgBuf,'(A,I10)')  
     &    '// Model state written, timestep', myIter
         CALL PRINT_MESSAGE( msgBuf, standardMessageUnit, 
     &    SQUEEZE_RIGHT, 1 )
         WRITE(msgBuf,'(A)')  ' '
         CALL PRINT_MESSAGE( msgBuf, standardMessageUnit, 
     &    SQUEEZE_RIGHT, 1 )
        ENDIF

       _END_MASTER( myThid )
       _BARRIER

      ENDIF

      call TIMER_STOP( 'I/O (WRITE)        [ADJOINT LOOP]', myThid )

#endif /* ALLOW_AUTODIFF_MONITOR */

      end









