
CBOI
C
C !TITLE: ADJOINT CODE
C !AUTHORS: mitgcm developers ( support@mitgcm.org )
C !AFFILIATION: Massachussetts Institute of Technology
C !DATE:
C !INTRODUCTION: adjoint code collection
c \bv
c Top level routine for adjoint code generation is the_main_loop.
c Adjoint code is generated via the makefile in adjoint/
c 0. make restore:
c    Re-instate header or adjoint_model.F from template
c 1. make:
c    All .f files are concatenated into one file
c    tamc_code_ecco.f
c 2. make adtaf:
c    This makefiles contains a list of all routines which must be
c    differentiated (i.e. analyzed by TAMC/TAF) and those which
c    must not be differentiated. For the latter, files containing
c    flow directives are given.
c    The code generated by TAMC/TAF is written to
c    tamc_code_ecco_ad.f
c 3. make adchange:
c    To maintain the multi-threading index mythid,
c    the adjoint code must be post-processed.
c    All parameter lists of active I/O routines 
c    (active read/write open/close) are augmented by mythid.
c    The resulting code is copied to
c    tamc_code_ecco_sed_ad.f
c    and concatenated to adjoint_model.F
c
c     Documentation:
c     ==============
c     For a documentation of TAMC see:
c     http://puddle.mit.edu/~ralf/tamc/tamc.html
c     For more info on TAF see:
c     http://www.fastopt.de
C \ev
CBOI

#include "CPP_OPTIONS.h"

CBOP
C     !ROUTINE: adjoint_model
C     !INTERFACE:
      subroutine adjoint_model(mythid )

C     !DESCRIPTION: \bv
c     ==================================================================
c     SUBROUTINE adjoint_model
c     ==================================================================
c     o This is just a place holder for the TAMC generated adjoint code
c       of the MITgcmuv and related routines. Below you find a short
c       description of some topics pertaining to the adjoint model.
c       This routine will be overwritten as soon as TAMC will have
c       generated the adjoint model. If you want to keep it copy it
c       to another place.
c     started: Christian Eckert eckert@mit.edu 21-Jul-1999
c     ==================================================================
c     SUBROUTINE adjoint_model
c     ==================================================================
C     \ev

C     !USES:
      implicit none

c     == routine arguments ==

      integer mythid

c     == end of interface ==
CEOP

      return
      end
C                           DISCLAIMER
C
C   This file was generated by TAF version 1.4.20
C
C   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
C   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
C   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
C   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
C   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
C   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
C   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
C   OF THE POSSIBILITY OF SUCH DAMAGES.
C
C                           Haftungsbeschraenkung
C   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
C   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
C   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
C   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
C   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
C   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
C   Mitteilung darueber an FastOpt.
C
      subroutine adadams_bashforth2( bi, bj, k, myiter, adgtracer, 
     $adgtrnm1 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adgtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtrnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      integer myiter

C==============================================
C declare local variables
C==============================================
      double precision ab05
      double precision ab15
      double precision adgtrtmp
      integer i
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adgtrtmp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (myiter .eq. 0) then
        ab15 = 1.
        ab05 = 0.
      else
        ab15 = 1.5+abeps
        ab05 = -(0.5+abeps)
      endif
      do j = 1-oly, sny+oly
        adgtrtmp = 0.d0
        do i = 1-olx, snx+olx
          adgtrtmp = 0.d0
          adgtrtmp = adgtrtmp+adgtracer(i,j,k,bi,bj)
          adgtracer(i,j,k,bi,bj) = 0.d0
          adgtracer(i,j,k,bi,bj) = adgtracer(i,j,k,bi,bj)+adgtrnm1(i,j,
     $k,bi,bj)
          adgtrnm1(i,j,k,bi,bj) = 0.d0
          adgtracer(i,j,k,bi,bj) = adgtracer(i,j,k,bi,bj)+adgtrtmp*ab15
          adgtrnm1(i,j,k,bi,bj) = adgtrnm1(i,j,k,bi,bj)+adgtrtmp*ab05
          adgtrtmp = 0.d0
        end do
      end do

      end


      subroutine adadvect( uice, vice, heff, heffm, mythid, adheff )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision half
      parameter ( half = 0.5d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision quart
      parameter ( quart = 0.25d0 )
      double precision two
      parameter ( two = 2.d0 )

C==============================================
C declare common blocks
C==============================================
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision cstice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision csuice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxuice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dytice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyuice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sineice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tngice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tngtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /seaice_grid/ tngtice, tngice, cstice, csuice, sineice, 
     $dxtice, dxuice, dytice, dyuice

      integer imax_tice
      integer lad
      integer npseudo
      common /seaice_parm_i/ lad, imax_tice, npseudo

      double precision a22
      double precision diff1
      double precision endingyear
      double precision fluxforcingend
      double precision fluxforcingperiod
      double precision fluxforcingstart
      double precision ho
      double precision lsr_error
      double precision seaice_albedo
      double precision seaice_drag
      double precision seaice_drysnowalb
      double precision seaice_dumpfreq
      double precision seaice_emissivity
      double precision seaice_iceconduct
      double precision seaice_latentice
      double precision seaice_latentwater
      double precision seaice_sensheat
      double precision seaice_shortwave
      double precision seaice_snowconduct
      double precision seaice_snowthick
      double precision seaice_strength
      double precision seaice_tavefreq
      double precision seaice_wateralbedo
      double precision seaice_waterdrag
      double precision seaice_wetsnowalb
      double precision sssforcingend
      double precision sssforcingperiod
      double precision sssforcingstart
      double precision sstforcingend
      double precision sstforcingperiod
      double precision sstforcingstart
      double precision startingyear
      double precision windforcingend
      double precision windforcingperiod
      double precision windforcingstart
      common /seaice_parm_rl/ seaice_dumpfreq, seaice_tavefreq, 
     $seaice_drag, seaice_waterdrag, seaice_albedo, seaice_drysnowalb, 
     $seaice_wetsnowalb, seaice_wateralbedo, seaice_strength, 
     $seaice_sensheat, seaice_latentwater, seaice_latentice, 
     $seaice_iceconduct, seaice_snowconduct, seaice_emissivity, 
     $seaice_snowthick, seaice_shortwave, lsr_error, diff1, a22, ho, 
     $windforcingstart, windforcingend, windforcingperiod, 
     $fluxforcingstart, fluxforcingend, fluxforcingperiod, 
     $sstforcingstart, sstforcingend, sstforcingperiod, sssforcingstart,
     $ sssforcingend, sssforcingperiod, startingyear, endingyear

C==============================================
C declare arguments
C==============================================
      double precision adheff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision heff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision heffm(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer mythid
      double precision uice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision vice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      double precision deltt
      double precision diffa(1-olx:snx+olx,1-oly:sny+oly)
      double precision heffh(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer k3
      double precision ui(1-olx:snx+olx,1-oly:sny+oly)
      double precision vi(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heffh(ip1,ip2,ip3,ip4,ip5) = heff(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (lad .eq. 1) then
        deltt = deltat*two
        k3 = 3
      else
        deltt = deltat
        k3 = 2
      endif
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              ui(i,j) = uice(i,j,1,bi,bj)
              vi(i,j) = vice(i,j,1,bi,bj)
            end do
          end do
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              heff(i,j,3,bi,bj) = heff(i,j,2,bi,bj)
              heff(i,j,2,bi,bj) = heff(i,j,1,bi,bj)
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 0, sny-1
            do i = 0, snx-1
              heff(i+1,j+1,1,bi,bj) = heff(i+1,j+1,k3,bi,bj)-deltt*
     $((heff(i+1,j+1,2,bi,bj)+heff(i+2,j+1,2,bi,bj))*(ui(i+1,j+1)+ui(i+
     $1,j))-(heff(i+1,j+1,2,bi,bj)+heff(i,j+1,2,bi,bj))*(ui(i,j+1)+ui(i,
     $j)))*(quart/(dxtice(i+1,j,bi,bj)*cstice(i,j+1,bi,bj)))-deltt*
     $(heff(i+1,j+1,2,bi,bj)+heff(i+1,j+2,2,bi,bj))*(vi(i,j+1)+vi(i+1,j+
     $1)*csuice(i,j+1,bi,bj)-(heff(i+1,j+1,2,bi,bj)+heff(i+1,j,2,bi,bj))
     $*(vi(i,j)+vi(i+1,j))*csuice(i,j,bi,bj))*(quart/(dytice(i,j+1,bi,
     $bj)*cstice(i,j+1,bi,bj)))
            end do
          end do
        end do
      end do
      call barrier( mythid )
      call seaice_exch( heff,mythid )
      call barrier( mythid )
      if (lad .eq. 2) then
        call barrier( mythid )
        call barrier( mythid )
      endif
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              diffa(i,j) = diff1*min(dxtice(i,j,bi,bj)*cstice(i,j,bi,bj)
     $,dytice(i,j,bi,bj))
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              diffa(i,j) = -(min(dxtice(i,j,bi,bj)*cstice(i,j,bi,bj),
     $dytice(i,j,bi,bj))**2/deltt)
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adheff(i,j,3,bi,bj) = adheff(i,j,3,bi,bj)+adheff(i,j,1,bi,
     $bj)*heffm(i,j,bi,bj)
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)*heffm(i,j,bi,bj)
            end do
          end do
        end do
      end do
      call addiffus( diffa,heffm,deltt,mythid,adheff )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adheff(i,j,3,bi,bj) = adheff(i,j,3,bi,bj)+adheff(i,j,1,bi,
     $bj)*heffm(i,j,bi,bj)
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)*heffm(i,j,bi,bj)
            end do
          end do
        end do
      end do
      call barrier( mythid )
      call barrier( mythid )
      if (lad .eq. 2) then
        call barrier( mythid )
        call barrier( mythid )
      endif
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              diffa(i,j) = diff1*min(dxtice(i,j,bi,bj)*cstice(i,j,bi,bj)
     $,dytice(i,j,bi,bj))
            end do
          end do
        end do
      end do
      call addiffus( diffa,heffm,deltt,mythid,adheff )
      if (lad .eq. 2) then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                heff(i,j,3,bi,bj) = heff(i,j,2,bi,bj)
                heff(i,j,2,bi,bj) = half*(heff(i,j,1,bi,bj)+heff(i,j,2,
     $bi,bj))
              end do
            end do
          end do
        end do
        call barrier( mythid )
        call barrier( mythid )
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                adheff(i,j,3,bi,bj) = adheff(i,j,3,bi,bj)+adheff(i,j,2,
     $bi,bj)
                adheff(i,j,2,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
        call barrier( mythid )
        call adseaice_exch( mythid,adheff )
        call barrier( mythid )
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 0, sny-1
              do i = 0, snx-1
                adheff(i+1,j+2,2,bi,bj) = adheff(i+1,j+2,2,bi,bj)-
     $adheff(i+1,j+1,1,bi,bj)*deltt*(vi(i,j+1)+vi(i+1,j+1)*csuice(i,j+1,
     $bi,bj)-(heff(i+1,j+1,2,bi,bj)+heff(i+1,j,2,bi,bj))*(vi(i,j)+vi(i+
     $1,j))*csuice(i,j,bi,bj))*(quart/(dytice(i,j+1,bi,bj)*cstice(i,j+1,
     $bi,bj)))
                adheff(i+1,j+1,3,bi,bj) = adheff(i+1,j+1,3,bi,bj)+
     $adheff(i+1,j+1,1,bi,bj)
                adheff(i+2,j+1,2,bi,bj) = adheff(i+2,j+1,2,bi,bj)-
     $adheff(i+1,j+1,1,bi,bj)*deltt*(ui(i+1,j+1)+ui(i+1,j))*(quart/
     $(dxtice(i+1,j,bi,bj)*cstice(i,j+1,bi,bj)))
                adheff(i+1,j+1,2,bi,bj) = adheff(i+1,j+1,2,bi,bj)-
     $adheff(i+1,j+1,1,bi,bj)*deltt*((ui(i+1,j+1)+ui(i+1,j)-(ui(i,j+1)+
     $ui(i,j)))*(quart/(dxtice(i+1,j,bi,bj)*cstice(i,j+1,bi,bj)))+((-
     $((heff(i+1,j+1,2,bi,bj)+heff(i+1,j+2,2,bi,bj))*(vi(i,j)+vi(i+1,j))
     $*csuice(i,j,bi,bj)))+vi(i,j+1)+vi(i+1,j+1)*csuice(i,j+1,bi,bj)-
     $(heff(i+1,j+1,2,bi,bj)+heff(i+1,j,2,bi,bj))*(vi(i,j)+vi(i+1,j))*
     $csuice(i,j,bi,bj))*(quart/(dytice(i,j+1,bi,bj)*cstice(i,j+1,bi,bj)
     $)))
                adheff(i,j+1,2,bi,bj) = adheff(i,j+1,2,bi,bj)+adheff(i+
     $1,j+1,1,bi,bj)*deltt*(ui(i,j+1)+ui(i,j))*(quart/(dxtice(i+1,j,bi,
     $bj)*cstice(i,j+1,bi,bj)))
                adheff(i+1,j,2,bi,bj) = adheff(i+1,j,2,bi,bj)+adheff(i+
     $1,j+1,1,bi,bj)*deltt*(heff(i+1,j+1,2,bi,bj)+heff(i+1,j+2,2,bi,bj))
     $*(vi(i,j)+vi(i+1,j))*csuice(i,j,bi,bj)*(quart/(dytice(i,j+1,bi,bj)
     $*cstice(i,j+1,bi,bj)))
                adheff(i+1,j+1,1,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+adheff(i,j,2,
     $bi,bj)*half
                adheff(i,j,2,bi,bj) = adheff(i,j,2,bi,bj)*half
                adheff(i,j,2,bi,bj) = adheff(i,j,2,bi,bj)+adheff(i,j,3,
     $bi,bj)
                adheff(i,j,3,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      endif
      call barrier( mythid )
      call adseaice_exch( mythid,adheff )
      call barrier( mythid )
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              heff(i,j,3,bi,bj) = heff(i,j,2,bi,bj)
              heff(i,j,2,bi,bj) = heff(i,j,1,bi,bj)
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 0, sny-1
            do i = 0, snx-1
              adheff(i+1,j+2,2,bi,bj) = adheff(i+1,j+2,2,bi,bj)-
     $adheff(i+1,j+1,1,bi,bj)*deltt*(vi(i,j+1)+vi(i+1,j+1)*csuice(i,j+1,
     $bi,bj)-(heff(i+1,j+1,2,bi,bj)+heff(i+1,j,2,bi,bj))*(vi(i,j)+vi(i+
     $1,j))*csuice(i,j,bi,bj))*(quart/(dytice(i,j+1,bi,bj)*cstice(i,j+1,
     $bi,bj)))
              adheff(i+1,j+1,k3,bi,bj) = adheff(i+1,j+1,k3,bi,bj)+
     $adheff(i+1,j+1,1,bi,bj)
              adheff(i+2,j+1,2,bi,bj) = adheff(i+2,j+1,2,bi,bj)-
     $adheff(i+1,j+1,1,bi,bj)*deltt*(ui(i+1,j+1)+ui(i+1,j))*(quart/
     $(dxtice(i+1,j,bi,bj)*cstice(i,j+1,bi,bj)))
              adheff(i+1,j+1,2,bi,bj) = adheff(i+1,j+1,2,bi,bj)-
     $adheff(i+1,j+1,1,bi,bj)*deltt*((ui(i+1,j+1)+ui(i+1,j)-(ui(i,j+1)+
     $ui(i,j)))*(quart/(dxtice(i+1,j,bi,bj)*cstice(i,j+1,bi,bj)))+((-
     $((heff(i+1,j+1,2,bi,bj)+heff(i+1,j+2,2,bi,bj))*(vi(i,j)+vi(i+1,j))
     $*csuice(i,j,bi,bj)))+vi(i,j+1)+vi(i+1,j+1)*csuice(i,j+1,bi,bj)-
     $(heff(i+1,j+1,2,bi,bj)+heff(i+1,j,2,bi,bj))*(vi(i,j)+vi(i+1,j))*
     $csuice(i,j,bi,bj))*(quart/(dytice(i,j+1,bi,bj)*cstice(i,j+1,bi,bj)
     $)))
              adheff(i,j+1,2,bi,bj) = adheff(i,j+1,2,bi,bj)+adheff(i+1,
     $j+1,1,bi,bj)*deltt*(ui(i,j+1)+ui(i,j))*(quart/(dxtice(i+1,j,bi,bj)
     $*cstice(i,j+1,bi,bj)))
              adheff(i+1,j,2,bi,bj) = adheff(i+1,j,2,bi,bj)+adheff(i+1,
     $j+1,1,bi,bj)*deltt*(heff(i+1,j+1,2,bi,bj)+heff(i+1,j+2,2,bi,bj))*
     $(vi(i,j)+vi(i+1,j))*csuice(i,j,bi,bj)*(quart/(dytice(i,j+1,bi,bj)*
     $cstice(i,j+1,bi,bj)))
              adheff(i+1,j+1,1,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+adheff(i,j,2,bi,
     $bj)
              adheff(i,j,2,bi,bj) = 0.d0
              adheff(i,j,2,bi,bj) = adheff(i,j,2,bi,bj)+adheff(i,j,3,bi,
     $bj)
              adheff(i,j,3,bi,bj) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adbldepth( mytime, kmtj, dvsq, dbloc, ritop, ustar, bo,
     $ bosol, coriol, ikey, addvsq, addbloc, adritop, adustar, adbo, 
     $adbosol, adcoriol, adhbl, adbfsfc, adstable, adcasea, adrib, 
     $adsigma )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      double precision minusone
      parameter ( minusone = -1. )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_bfsfc_22h(672,24)
      common /cadbfsfd/ comlev1_kpp_bfsfc_22h

      double precision comlev1_kpp_bfsfc_18h(672,24)
      common /cadbfsfe/ comlev1_kpp_bfsfc_18h

      double precision comlev1_kpp_bfsfc_17h(672,24)
      common /cadbfsff/ comlev1_kpp_bfsfc_17h

      double precision comlev1_kpp_hbl_16h(672,24)
      common /cadhbm/ comlev1_kpp_hbl_16h

      double precision comlev1_kpp_hbl_21h(672,24)
      common /cadhbn/ comlev1_kpp_hbl_21h

      double precision comlev1_kpp_hbl_20h(672,24)
      common /cadhbo/ comlev1_kpp_hbl_20h

      integer comlev1_kpp_kbl_15h(672,24)
      common /cadkbm/ comlev1_kpp_kbl_15h

      double precision comlev1_kpp_rib_14h(672,23,24)
      common /cadrib/ comlev1_kpp_rib_14h

      double precision comlev1_kpp_stable_19h(672,24)
      common /cadstablf/ comlev1_kpp_stable_19h

      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision cekman
      double precision cmonob
      double precision concv
      double precision ricr
      double precision vtc
      common /kpp_bldepth1/ ricr, cekman, cmonob, concv, vtc

      double precision hbf
      common /kpp_bldepth2/ hbf

      double precision minkpphbl
      common /kpp_parm_r/ minkpphbl

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision adbfsfc(imt)
      double precision adbo(imt)
      double precision adbosol(imt)
      double precision adcasea(imt)
      double precision adcoriol(imt)
      double precision addbloc(imt,nr)
      double precision addvsq(imt,nr)
      double precision adhbl(imt)
      double precision adrib(imt,nr)
      double precision adritop(imt,nr)
      double precision adsigma(imt)
      double precision adstable(imt)
      double precision adustar(imt)
      double precision bo(imt)
      double precision bosol(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision dvsq(imt,nr)
      integer ikey
      integer kmtj(imt)
      double precision mytime
      double precision ritop(imt,nr)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision adbvsq
      double precision adhekman
      double precision adhlimit
      double precision adhmonob
      double precision adtempvar1
      double precision adtempvar2
      double precision advtsq
      double precision adwmh(imt)
      double precision adworka(imt)
      double precision adws(imt)
      double precision bfsfc(imt)
      double precision bvsq
      double precision casea(imt)
      double precision hbl(imt)
      double precision hekman
      double precision hekmanh
      double precision hlimit
      double precision hmonob
      integer i
      integer ip1
      integer ip2
      integer kbl(imt)
      integer kl
      integer mythid
      double precision rib(imt,nr)
      double precision sigma(imt)
      double precision stable(imt)
      double precision tempvar1
      double precision tempvar2
      double precision vtsq
      double precision vtsqh
      double precision wm(imt)
      double precision worka(imt)
      double precision ws(imt)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adbvsq = 0.d0
      adhekman = 0.d0
      adhlimit = 0.d0
      adhmonob = 0.d0
      adtempvar1 = 0.d0
      adtempvar2 = 0.d0
      advtsq = 0.d0
      do ip1 = 1, imt
        adwmh(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adworka(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adws(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          rib(ip1,ip2) = comlev1_kpp_rib_14h(ip1,ip2,ikey)
        end do
      end do
      do ip1 = 1, imt
        kbl(ip1) = comlev1_kpp_kbl_15h(ip1,ikey)
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_16h(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do ip1 = 1, imt
        stable(ip1) = comlev1_kpp_stable_19h(ip1,ikey)
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_21h(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do ip1 = 1, imt
        bfsfc(ip1) = comlev1_kpp_bfsfc_22h(ip1,ikey)
      end do
      do i = 1, imt
        adcasea(i) = 0.d0
      end do
      do i = 1, imt
        adbfsfc(i) = adbfsfc(i)*(0.5-sign(0.5d0,phepsi-abs(bfsfc(i))))*
     $sign(eins,bfsfc(i))*sign(1.d0,bfsfc(i))
        adstable(i) = 0.d0
      end do
      do i = 1, imt
        adbo(i) = adbo(i)+adbfsfc(i)
        adbosol(i) = adbosol(i)+adbfsfc(i)*(1.-worka(i))
        adworka(i) = adworka(i)-adbfsfc(i)*bosol(i)
        adbfsfc(i) = 0.d0
      end do
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_16h(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call adswfrac( imt,minusone,mytime,worka,adworka )
      do i = 1, imt
        adhbl(i) = adhbl(i)+adworka(i)
        adworka(i) = 0.d0
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_20h(ip1,ikey)
      end do
      do i = 1, imt
        adhbl(i) = adhbl(i)*(0.5+sign(0.5d0,hbl(i)-minkpphbl))
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_16h(ip1,ikey)
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = comlev1_kpp_bfsfc_18h(ip1,ikey)
      end do
      do i = 1, imt
        adhekman = 0.d0
        adhlimit = 0.d0
        adhmonob = 0.d0
        if (bfsfc(i) .gt. 0.) then
          hekman = cekman*ustar(i)/max(abs(coriol(i)),phepsi)
          hmonob = cmonob*ustar(i)*ustar(i)*ustar(i)/vonk/bfsfc(i)
          hlimit = stable(i)*min(hekman,hmonob)+(stable(i)-1.)*zgrid(nr)
          adhlimit = adhlimit+adhbl(i)*(0.5-sign(0.5d0,hlimit-hbl(i)))
          adhbl(i) = adhbl(i)*(0.5+sign(0.5d0,hlimit-hbl(i)))
          adhekman = adhekman+adhlimit*stable(i)*(0.5+sign(0.5d0,hmonob-
     $hekman))
          adhmonob = adhmonob+adhlimit*stable(i)*(0.5-sign(0.5d0,hmonob-
     $hekman))
          adstable(i) = adstable(i)+adhlimit*(zgrid(nr)+min(hekman,
     $hmonob))
          adhlimit = 0.d0
          adbfsfc(i) = adbfsfc(i)-adhmonob*(cmonob*ustar(i)*ustar(i)*
     $ustar(i)/vonk/(bfsfc(i)*bfsfc(i)))
          adustar(i) = adustar(i)+adhmonob*(3*cmonob*ustar(i)*ustar(i)/
     $vonk/bfsfc(i))
          adhmonob = 0.d0
          hekmanh = abs(coriol(i))
          adustar(i) = adustar(i)+adhekman*(cekman/max(hekmanh,phepsi))
          adcoriol(i) = adcoriol(i)-adhekman*(cekman*ustar(i)*(0.5+
     $sign(0.5d0,hekmanh-phepsi))/(max(hekmanh,phepsi)*max(hekmanh,
     $phepsi)))*sign(1.d0,coriol(i))
          adhekman = 0.d0
        endif
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = comlev1_kpp_bfsfc_17h(ip1,ikey)
      end do
      do i = 1, imt
        adbfsfc(i) = adbfsfc(i)*(0.5-sign(0.5d0,phepsi-abs(bfsfc(i))))*
     $sign(eins,bfsfc(i))*sign(1.d0,bfsfc(i))
        adstable(i) = 0.d0
      end do
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_16h(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        adbo(i) = adbo(i)+adbfsfc(i)
        adbosol(i) = adbosol(i)+adbfsfc(i)*(1.-worka(i))
        adworka(i) = adworka(i)-adbfsfc(i)*bosol(i)
        adbfsfc(i) = 0.d0
      end do
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_16h(ip1,ikey)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call adswfrac( imt,minusone,mytime,worka,adworka )
      do i = 1, imt
        adhbl(i) = adhbl(i)+adworka(i)
        adworka(i) = 0.d0
      end do
      do i = 1, imt
        adtempvar1 = 0.d0
        kl = kbl(i)
        if (kl .gt. 1 .and. kl .lt. kmtj(i)) then
          tempvar1 = rib(i,kl)-rib(i,kl-1)
          adrib(i,kl-1) = adrib(i,kl-1)-adhbl(i)*((zgrid(kl-1)-zgrid(kl)
     $)/tempvar1)
          adtempvar1 = adtempvar1-adhbl(i)*((zgrid(kl-1)-zgrid(kl))*
     $(ricr-rib(i,kl-1))/(tempvar1*tempvar1))
          adhbl(i) = 0.d0
          adrib(i,kl-1) = adrib(i,kl-1)-adtempvar1
          adrib(i,kl) = adrib(i,kl)+adtempvar1
          adtempvar1 = 0.d0
        endif
      end do
      do kl = nr, 2, -1
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
        do i = 1, imt
          casea(i) = -zgrid(kl)
          bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
          stable(i) = p5+sign(p5,bfsfc(i))
          sigma(i) = stable(i)+(1.-stable(i))*epsilon
        end do
        call wscale( sigma,casea,ustar,bfsfc,wm,ws )
        do i = 1, imt
          adbvsq = 0.d0
          adtempvar1 = 0.d0
          adtempvar2 = 0.d0
          advtsq = 0.d0
          bvsq = p5*(dbloc(i,kl-1)/(zgrid(kl-1)-zgrid(kl))+dbloc(i,kl)/
     $(zgrid(kl)-zgrid(kl+1)))
          if (bvsq .eq. 0.) then
            vtsq = 0.
          else
            vtsq = -(zgrid(kl)*ws(i)*sqrt(abs(bvsq))*vtc)
          endif
          tempvar1 = dvsq(i,kl)+vtsq
          tempvar2 = max(tempvar1,phepsi)
          adritop(i,kl) = adritop(i,kl)+adrib(i,kl)/tempvar2
          adtempvar2 = adtempvar2-adrib(i,kl)*(ritop(i,kl)/(tempvar2*
     $tempvar2))
          adrib(i,kl) = 0.d0
          adtempvar1 = adtempvar1+adtempvar2*(0.5+sign(0.5d0,tempvar1-
     $phepsi))
          adtempvar2 = 0.d0
          addvsq(i,kl) = addvsq(i,kl)+adtempvar1
          advtsq = advtsq+adtempvar1
          adtempvar1 = 0.d0
          if (bvsq .eq. 0.) then
            advtsq = 0.d0
          else
            vtsqh = abs(bvsq)
            adws(i) = adws(i)-advtsq*zgrid(kl)*vtc*sqrt(vtsqh)
            adbvsq = adbvsq-advtsq*zgrid(kl)*ws(i)*1./(2.*sqrt(vtsqh))*
     $vtc*sign(1.d0,bvsq)
            advtsq = 0.d0
          endif
          addbloc(i,kl-1) = addbloc(i,kl-1)+adbvsq*(p5/(zgrid(kl-1)-
     $zgrid(kl)))
          addbloc(i,kl) = addbloc(i,kl)+adbvsq*(p5/(zgrid(kl)-zgrid(kl+
     $1)))
          adbvsq = 0.d0
        end do
        call adwscale( sigma,casea,ustar,bfsfc,adsigma,adcasea,adustar,
     $adbfsfc,adwmh,adws )
        do i = 1, imt
          adstable(i) = adstable(i)+adsigma(i)*(1-epsilon)
          adsigma(i) = 0.d0
          adstable(i) = 0.d0
          adbo(i) = adbo(i)+adbfsfc(i)
          adbosol(i) = adbosol(i)+adbfsfc(i)*(1.-worka(i))
          adworka(i) = adworka(i)-adbfsfc(i)*bosol(i)
          adbfsfc(i) = 0.d0
        end do
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call adswfrac( imt,hbf,mytime,worka,adworka )
      end do

      end


      subroutine mdbldepth( mytime, mythid, kmtj, dvsq, dbloc, ritop, 
     $ustar, bo, bosol, coriol, ikey, hbl, bfsfc, stable, casea, kbl, 
     $rib, sigma )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      double precision minusone
      parameter ( minusone = -1. )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_bfsfc_22h(672,24)
      common /cadbfsfd/ comlev1_kpp_bfsfc_22h

      double precision comlev1_kpp_bfsfc_18h(672,24)
      common /cadbfsfe/ comlev1_kpp_bfsfc_18h

      double precision comlev1_kpp_bfsfc_17h(672,24)
      common /cadbfsff/ comlev1_kpp_bfsfc_17h

      double precision comlev1_kpp_hbl_16h(672,24)
      common /cadhbm/ comlev1_kpp_hbl_16h

      double precision comlev1_kpp_hbl_21h(672,24)
      common /cadhbn/ comlev1_kpp_hbl_21h

      double precision comlev1_kpp_hbl_20h(672,24)
      common /cadhbo/ comlev1_kpp_hbl_20h

      integer comlev1_kpp_kbl_15h(672,24)
      common /cadkbm/ comlev1_kpp_kbl_15h

      double precision comlev1_kpp_rib_14h(672,23,24)
      common /cadrib/ comlev1_kpp_rib_14h

      double precision comlev1_kpp_stable_19h(672,24)
      common /cadstablf/ comlev1_kpp_stable_19h

      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision cekman
      double precision cmonob
      double precision concv
      double precision ricr
      double precision vtc
      common /kpp_bldepth1/ ricr, cekman, cmonob, concv, vtc

      double precision hbf
      common /kpp_bldepth2/ hbf

      double precision minkpphbl
      common /kpp_parm_r/ minkpphbl

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision bfsfc(imt)
      double precision bo(imt)
      double precision bosol(imt)
      double precision casea(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision dvsq(imt,nr)
      double precision hbl(imt)
      integer ikey
      integer kbl(imt)
      integer kmtj(imt)
      integer mythid
      double precision mytime
      double precision rib(imt,nr)
      double precision ritop(imt,nr)
      double precision sigma(imt)
      double precision stable(imt)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision bvsq
      double precision hekman
      double precision hlimit
      double precision hmonob
      integer i
      integer ip1
      integer ip2
      integer kl
      double precision tempvar1
      double precision tempvar2
      double precision vtsq
      double precision wm(imt)
      double precision worka(imt)
      double precision ws(imt)

C**********************************************
C executable statements of routine
C**********************************************
      do i = 1, imt
        rib(i,1) = 0.
        kbl(i) = max(kmtj(i),1)
        hbl(i) = -zgrid(kbl(i))
      end do
      do kl = 2, nr
        do i = 1, imt
          worka(i) = zgrid(kl)
        end do
        call swfrac( imt,hbf,mytime,mythid,worka )
        do i = 1, imt
          casea(i) = -zgrid(kl)
          bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
          stable(i) = p5+sign(p5,bfsfc(i))
          sigma(i) = stable(i)+(1.-stable(i))*epsilon
        end do
        call wscale( sigma,casea,ustar,bfsfc,wm,ws )
        do i = 1, imt
          bvsq = p5*(dbloc(i,kl-1)/(zgrid(kl-1)-zgrid(kl))+dbloc(i,kl)/
     $(zgrid(kl)-zgrid(kl+1)))
          if (bvsq .eq. 0.) then
            vtsq = 0.
          else
            vtsq = -(zgrid(kl)*ws(i)*sqrt(abs(bvsq))*vtc)
          endif
          tempvar1 = dvsq(i,kl)+vtsq
          tempvar2 = max(tempvar1,phepsi)
          rib(i,kl) = ritop(i,kl)/tempvar2
        end do
      end do
      do ip2 = 1, 23
        do ip1 = 1, 672
          comlev1_kpp_rib_14h(ip1,ip2,ikey) = rib(ip1,ip2)
        end do
      end do
      do kl = 2, nr
        do i = 1, imt
          if (kbl(i) .eq. kmtj(i) .and. rib(i,kl) .gt. ricr) then
            kbl(i) = kl
          endif
        end do
      end do
      do ip1 = 1, 672
        comlev1_kpp_kbl_15h(ip1,ikey) = kbl(ip1)
      end do
      do i = 1, imt
        kl = kbl(i)
        if (kl .gt. 1 .and. kl .lt. kmtj(i)) then
          tempvar1 = rib(i,kl)-rib(i,kl-1)
          hbl(i) = (-zgrid(kl-1))+(zgrid(kl-1)-zgrid(kl))*(ricr-rib(i,
     $kl-1))/tempvar1
        endif
      end do
      do ip1 = 1, 672
        comlev1_kpp_hbl_16h(ip1,ikey) = hbl(ip1)
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
      end do
      do ip1 = 1, 672
        comlev1_kpp_bfsfc_17h(ip1,ikey) = bfsfc(ip1)
      end do
      do i = 1, imt
        stable(i) = p5+sign(p5,bfsfc(i))
        bfsfc(i) = sign(eins,bfsfc(i))*max(phepsi,abs(bfsfc(i)))
      end do
      do ip1 = 1, 672
        comlev1_kpp_bfsfc_18h(ip1,ikey) = bfsfc(ip1)
      end do
      do ip1 = 1, 672
        comlev1_kpp_stable_19h(ip1,ikey) = stable(ip1)
      end do
      do i = 1, imt
        if (bfsfc(i) .gt. 0.) then
          hekman = cekman*ustar(i)/max(abs(coriol(i)),phepsi)
          hmonob = cmonob*ustar(i)*ustar(i)*ustar(i)/vonk/bfsfc(i)
          hlimit = stable(i)*min(hekman,hmonob)+(stable(i)-1.)*zgrid(nr)
          hbl(i) = min(hbl(i),hlimit)
        endif
      end do
      do ip1 = 1, 672
        comlev1_kpp_hbl_20h(ip1,ikey) = hbl(ip1)
      end do
      do i = 1, imt
        hbl(i) = max(hbl(i),minkpphbl)
        kbl(i) = kmtj(i)
      end do
      do ip1 = 1, 672
        comlev1_kpp_hbl_21h(ip1,ikey) = hbl(ip1)
      end do
      do kl = 2, nr
        do i = 1, imt
          if (kbl(i) .eq. kmtj(i) .and. (-zgrid(kl)) .gt. hbl(i)) then
            kbl(i) = kl
          endif
        end do
      end do
      do i = 1, imt
        worka(i) = hbl(i)
      end do
      call swfrac( imt,minusone,mytime,mythid,worka )
      do i = 1, imt
        bfsfc(i) = bo(i)+bosol(i)*(1.-worka(i))
      end do
      do ip1 = 1, 672
        comlev1_kpp_bfsfc_22h(ip1,ikey) = bfsfc(ip1)
      end do
      do i = 1, imt
        stable(i) = p5+sign(p5,bfsfc(i))
        bfsfc(i) = sign(eins,bfsfc(i))*max(phepsi,abs(bfsfc(i)))
      end do
      do i = 1, imt
        casea(i) = p5+sign(p5,(-zgrid(kbl(i)))-p5*hwide(kbl(i))-hbl(i))
      end do
      end


      subroutine adblmix( ustar, bfsfc, hbl, stable, casea, diffus, kbl,
     $ ikey, adustar, adbfsfc, adhbl, adstable, adcasea, addiffus, 
     $addkm1, adblmc, adghat, adsigma )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p0
      parameter ( p0 = 0. )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_wm_23h(imt,24)
      common /cadwm/ comlev1_kpp_wm_23h

      double precision comlev1_kpp_ws_24h(imt,24)
      common /cadws/ comlev1_kpp_ws_24h

      double precision cg
      double precision cstar
      common /kmixcbm/ cstar, cg

      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision adbfsfc(imt)
      double precision adblmc(imt,nr,mdiff)
      double precision adcasea(imt)
      double precision addiffus(imt,0:nrp1,mdiff)
      double precision addkm1(imt,mdiff)
      double precision adghat(imt,nr)
      double precision adhbl(imt)
      double precision adsigma(imt)
      double precision adstable(imt)
      double precision adustar(imt)
      double precision bfsfc(imt)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision hbl(imt)
      integer ikey
      integer kbl(imt)
      double precision stable(imt)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision a1
      double precision a2
      double precision a3
      double precision ada1
      double precision ada2
      double precision ada3
      double precision addat1m(imt)
      double precision addat1s(imt)
      double precision addat1t(imt)
      double precision addelhat
      double precision addifsh
      double precision addifsp
      double precision addifth
      double precision addiftp
      double precision addvdzdn
      double precision addvdzup
      double precision adf1
      double precision adgat1m(imt)
      double precision adgat1s(imt)
      double precision adgat1t(imt)
      double precision adgm
      double precision adgs
      double precision adgt
      double precision adr
      double precision adsig
      double precision adtempvar
      double precision advisch
      double precision adviscp
      double precision adwm(imt)
      double precision adws(imt)
      double precision dat1m(imt)
      double precision dat1s(imt)
      double precision dat1t(imt)
      double precision delhat
      double precision difsh
      double precision difsp
      double precision difth
      double precision diftp
      double precision dvdzdn
      double precision dvdzup
      double precision f1
      double precision gat1m(imt)
      double precision gat1s(imt)
      double precision gat1t(imt)
      double precision gm
      double precision gs
      double precision gt
      integer i
      integer ip1
      integer ki
      integer kn
      double precision r
      double precision sig
      double precision sigma(imt)
      double precision tempvar
      double precision visch
      double precision viscp
      double precision wm(imt)
      double precision ws(imt)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      ada1 = 0.d0
      ada2 = 0.d0
      ada3 = 0.d0
      do ip1 = 1, imt
        addat1m(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        addat1s(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        addat1t(ip1) = 0.d0
      end do
      addelhat = 0.d0
      addifsh = 0.d0
      addifsp = 0.d0
      addifth = 0.d0
      addiftp = 0.d0
      addvdzdn = 0.d0
      addvdzup = 0.d0
      adf1 = 0.d0
      do ip1 = 1, imt
        adgat1m(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adgat1s(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adgat1t(ip1) = 0.d0
      end do
      adgm = 0.d0
      adgs = 0.d0
      adgt = 0.d0
      adr = 0.d0
      adsig = 0.d0
      adtempvar = 0.d0
      advisch = 0.d0
      adviscp = 0.d0
      do ip1 = 1, imt
        adwm(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adws(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      do ip1 = 1, imt
        wm(ip1) = comlev1_kpp_wm_23h(ip1,ikey)
      end do
      do ip1 = 1, imt
        ws(ip1) = comlev1_kpp_ws_24h(ip1,ikey)
      end do
      do i = 1, imt
        kn = int(casea(i)+phepsi)*(kbl(i)-1)+(1-int(casea(i)+phepsi))*
     $kbl(i)
        delhat = 0.5*hwide(kn)-zgrid(kn)-hbl(i)
        r = 1.-delhat/hwide(kn)
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        viscp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        difsp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,3)-diffus(i,kn,3))/hwide(kn)
        dvdzdn = (diffus(i,kn,3)-diffus(i,kn+1,3))/hwide(kn+1)
        diftp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        visch = diffus(i,kn,1)+viscp*delhat
        difsh = diffus(i,kn,2)+difsp*delhat
        difth = diffus(i,kn,3)+diftp*delhat
        f1 = stable(i)*conc1*bfsfc(i)/max(ustar(i)**4,phepsi)
        gat1m(i) = visch/hbl(i)/wm(i)
        dat1m(i) = (-(viscp/wm(i)))+f1*visch
        dat1m(i) = min(dat1m(i),p0)
        gat1s(i) = difsh/hbl(i)/ws(i)
        dat1s(i) = (-(difsp/ws(i)))+f1*difsh
        dat1s(i) = min(dat1s(i),p0)
        gat1t(i) = difth/hbl(i)/ws(i)
        dat1t(i) = (-(diftp/ws(i)))+f1*difth
        dat1t(i) = min(dat1t(i),p0)
      end do
      do ki = 1, nr
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
        end do
      end do
      do i = 1, imt
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        ada1 = 0.d0
        ada2 = 0.d0
        ada3 = 0.d0
        adgm = 0.d0
        adgs = 0.d0
        adgt = 0.d0
        adsig = 0.d0
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        a1 = sig-2.
        a2 = 3.-2.*sig
        a3 = sig-1.
        gm = a1+a2*gat1m(i)+a3*dat1m(i)
        gs = a1+a2*gat1s(i)+a3*dat1s(i)
        gt = a1+a2*gat1t(i)+a3*dat1t(i)
        adgt = adgt+addkm1(i,3)*hbl(i)*ws(i)*sig*sig
        adhbl(i) = adhbl(i)+addkm1(i,3)*ws(i)*sig*(1.+sig*gt)
        adsig = adsig+addkm1(i,3)*hbl(i)*ws(i)*(1.+2*sig*gt)
        adws(i) = adws(i)+addkm1(i,3)*hbl(i)*sig*(1.+sig*gt)
        addkm1(i,3) = 0.d0
        adgs = adgs+addkm1(i,2)*hbl(i)*ws(i)*sig*sig
        adhbl(i) = adhbl(i)+addkm1(i,2)*ws(i)*sig*(1.+sig*gs)
        adsig = adsig+addkm1(i,2)*hbl(i)*ws(i)*(1.+2*sig*gs)
        adws(i) = adws(i)+addkm1(i,2)*hbl(i)*sig*(1.+sig*gs)
        addkm1(i,2) = 0.d0
        adgm = adgm+addkm1(i,1)*hbl(i)*wm(i)*sig*sig
        adhbl(i) = adhbl(i)+addkm1(i,1)*wm(i)*sig*(1.+sig*gm)
        adsig = adsig+addkm1(i,1)*hbl(i)*wm(i)*(1.+2*sig*gm)
        adwm(i) = adwm(i)+addkm1(i,1)*hbl(i)*sig*(1.+sig*gm)
        addkm1(i,1) = 0.d0
        ada1 = ada1+adgt
        ada2 = ada2+adgt*gat1t(i)
        ada3 = ada3+adgt*dat1t(i)
        addat1t(i) = addat1t(i)+adgt*a3
        adgat1t(i) = adgat1t(i)+adgt*a2
        adgt = 0.d0
        ada1 = ada1+adgs
        ada2 = ada2+adgs*gat1s(i)
        ada3 = ada3+adgs*dat1s(i)
        addat1s(i) = addat1s(i)+adgs*a3
        adgat1s(i) = adgat1s(i)+adgs*a2
        adgs = 0.d0
        ada1 = ada1+adgm
        ada2 = ada2+adgm*gat1m(i)
        ada3 = ada3+adgm*dat1m(i)
        addat1m(i) = addat1m(i)+adgm*a3
        adgat1m(i) = adgat1m(i)+adgm*a2
        adgm = 0.d0
        adsig = adsig+ada3
        ada3 = 0.d0
        adsig = adsig-2*ada2
        ada2 = 0.d0
        adsig = adsig+ada1
        ada1 = 0.d0
        adhbl(i) = adhbl(i)+adsig*(zgrid(kbl(i)-1)/(hbl(i)*hbl(i)))
        adsig = 0.d0
      end do
      call adwscale( sigma,hbl,ustar,bfsfc,adsigma,adhbl,adustar,
     $adbfsfc,adwm,adws )
      do i = 1, imt
        adsig = 0.d0
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        adsig = adsig+adsigma(i)*(stable(i)+(1.-stable(i))*(0.5+
     $sign(0.5d0,epsilon-sig)))
        adstable(i) = adstable(i)+adsigma(i)*(sig-min(sig,epsilon))
        adsigma(i) = 0.d0
        adhbl(i) = adhbl(i)+adsig*(zgrid(kbl(i)-1)/(hbl(i)*hbl(i)))
        adsig = 0.d0
      end do
      do ki = nr, 1, -1
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
        end do
        call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
        do i = 1, imt
          ada1 = 0.d0
          ada2 = 0.d0
          ada3 = 0.d0
          adgm = 0.d0
          adgs = 0.d0
          adgt = 0.d0
          adsig = 0.d0
          adtempvar = 0.d0
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          a1 = sig-2.
          a2 = 3.-2.*sig
          a3 = sig-1.
          gm = a1+a2*gat1m(i)+a3*dat1m(i)
          gs = a1+a2*gat1s(i)+a3*dat1s(i)
          gt = a1+a2*gat1t(i)+a3*dat1t(i)
          tempvar = ws(i)*hbl(i)
          adstable(i) = adstable(i)-adghat(i,ki)*(cg/max(phepsi,tempvar)
     $)
          adtempvar = adtempvar-adghat(i,ki)*((1.-stable(i))*cg*(0.5-
     $sign(0.5d0,phepsi-tempvar))/(max(phepsi,tempvar)*max(phepsi,
     $tempvar)))
          adghat(i,ki) = 0.d0
          adhbl(i) = adhbl(i)+adtempvar*ws(i)
          adws(i) = adws(i)+adtempvar*hbl(i)
          adtempvar = 0.d0
          adgt = adgt+adblmc(i,ki,3)*hbl(i)*ws(i)*sig*sig
          adhbl(i) = adhbl(i)+adblmc(i,ki,3)*ws(i)*sig*(1.+sig*gt)
          adsig = adsig+adblmc(i,ki,3)*hbl(i)*ws(i)*(1.+2*sig*gt)
          adws(i) = adws(i)+adblmc(i,ki,3)*hbl(i)*sig*(1.+sig*gt)
          adblmc(i,ki,3) = 0.d0
          adgs = adgs+adblmc(i,ki,2)*hbl(i)*ws(i)*sig*sig
          adhbl(i) = adhbl(i)+adblmc(i,ki,2)*ws(i)*sig*(1.+sig*gs)
          adsig = adsig+adblmc(i,ki,2)*hbl(i)*ws(i)*(1.+2*sig*gs)
          adws(i) = adws(i)+adblmc(i,ki,2)*hbl(i)*sig*(1.+sig*gs)
          adblmc(i,ki,2) = 0.d0
          adgm = adgm+adblmc(i,ki,1)*hbl(i)*wm(i)*sig*sig
          adhbl(i) = adhbl(i)+adblmc(i,ki,1)*wm(i)*sig*(1.+sig*gm)
          adsig = adsig+adblmc(i,ki,1)*hbl(i)*wm(i)*(1.+2*sig*gm)
          adwm(i) = adwm(i)+adblmc(i,ki,1)*hbl(i)*sig*(1.+sig*gm)
          adblmc(i,ki,1) = 0.d0
          ada1 = ada1+adgt
          ada2 = ada2+adgt*gat1t(i)
          ada3 = ada3+adgt*dat1t(i)
          addat1t(i) = addat1t(i)+adgt*a3
          adgat1t(i) = adgat1t(i)+adgt*a2
          adgt = 0.d0
          ada1 = ada1+adgs
          ada2 = ada2+adgs*gat1s(i)
          ada3 = ada3+adgs*dat1s(i)
          addat1s(i) = addat1s(i)+adgs*a3
          adgat1s(i) = adgat1s(i)+adgs*a2
          adgs = 0.d0
          ada1 = ada1+adgm
          ada2 = ada2+adgm*gat1m(i)
          ada3 = ada3+adgm*dat1m(i)
          addat1m(i) = addat1m(i)+adgm*a3
          adgat1m(i) = adgat1m(i)+adgm*a2
          adgm = 0.d0
          adsig = adsig+ada3
          ada3 = 0.d0
          adsig = adsig-2*ada2
          ada2 = 0.d0
          adsig = adsig+ada1
          ada1 = 0.d0
          adhbl(i) = adhbl(i)-adsig*(((-zgrid(ki))+0.5*hwide(ki))/
     $(hbl(i)*hbl(i)))
          adsig = 0.d0
        end do
        call adwscale( sigma,hbl,ustar,bfsfc,adsigma,adhbl,adustar,
     $adbfsfc,adwm,adws )
        do i = 1, imt
          adsig = 0.d0
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          adsig = adsig+adsigma(i)*(stable(i)+(1.-stable(i))*(0.5+
     $sign(0.5d0,epsilon-sig)))
          adstable(i) = adstable(i)+adsigma(i)*(sig-min(sig,epsilon))
          adsigma(i) = 0.d0
          adhbl(i) = adhbl(i)-adsig*(((-zgrid(ki))+0.5*hwide(ki))/
     $(hbl(i)*hbl(i)))
          adsig = 0.d0
        end do
      end do
      do ip1 = 1, imt
        wm(ip1) = comlev1_kpp_wm_23h(ip1,ikey)
      end do
      do ip1 = 1, imt
        ws(ip1) = comlev1_kpp_ws_24h(ip1,ikey)
      end do
      do i = 1, imt
        addelhat = 0.d0
        addifsh = 0.d0
        addifsp = 0.d0
        addifth = 0.d0
        addiftp = 0.d0
        addvdzdn = 0.d0
        addvdzup = 0.d0
        adf1 = 0.d0
        adr = 0.d0
        advisch = 0.d0
        adviscp = 0.d0
        kn = int(casea(i)+phepsi)*(kbl(i)-1)+(1-int(casea(i)+phepsi))*
     $kbl(i)
        delhat = 0.5*hwide(kn)-zgrid(kn)-hbl(i)
        r = 1.-delhat/hwide(kn)
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        viscp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        difsp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,3)-diffus(i,kn,3))/hwide(kn)
        dvdzdn = (diffus(i,kn,3)-diffus(i,kn+1,3))/hwide(kn+1)
        diftp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        visch = diffus(i,kn,1)+viscp*delhat
        difsh = diffus(i,kn,2)+difsp*delhat
        difth = diffus(i,kn,3)+diftp*delhat
        f1 = stable(i)*conc1*bfsfc(i)/max(ustar(i)**4,phepsi)
        dat1m(i) = (-(viscp/wm(i)))+f1*visch
        dat1s(i) = (-(difsp/ws(i)))+f1*difsh
        dat1t(i) = (-(diftp/ws(i)))+f1*difth
        addat1t(i) = addat1t(i)*(0.5+sign(0.5d0,p0-dat1t(i)))
        addifth = addifth+addat1t(i)*f1
        addiftp = addiftp-addat1t(i)/ws(i)
        adf1 = adf1+addat1t(i)*difth
        adws(i) = adws(i)+addat1t(i)*(diftp/(ws(i)*ws(i)))
        addat1t(i) = 0.d0
        addifth = addifth+adgat1t(i)*(1/hbl(i)/ws(i))
        adhbl(i) = adhbl(i)-adgat1t(i)*(difth/(hbl(i)*hbl(i))/ws(i))
        adws(i) = adws(i)-adgat1t(i)*(difth/hbl(i)/(ws(i)*ws(i)))
        adgat1t(i) = 0.d0
        addat1s(i) = addat1s(i)*(0.5+sign(0.5d0,p0-dat1s(i)))
        addifsh = addifsh+addat1s(i)*f1
        addifsp = addifsp-addat1s(i)/ws(i)
        adf1 = adf1+addat1s(i)*difsh
        adws(i) = adws(i)+addat1s(i)*(difsp/(ws(i)*ws(i)))
        addat1s(i) = 0.d0
        addifsh = addifsh+adgat1s(i)*(1/hbl(i)/ws(i))
        adhbl(i) = adhbl(i)-adgat1s(i)*(difsh/(hbl(i)*hbl(i))/ws(i))
        adws(i) = adws(i)-adgat1s(i)*(difsh/hbl(i)/(ws(i)*ws(i)))
        adgat1s(i) = 0.d0
        addat1m(i) = addat1m(i)*(0.5+sign(0.5d0,p0-dat1m(i)))
        adf1 = adf1+addat1m(i)*visch
        advisch = advisch+addat1m(i)*f1
        adviscp = adviscp-addat1m(i)/wm(i)
        adwm(i) = adwm(i)+addat1m(i)*(viscp/(wm(i)*wm(i)))
        addat1m(i) = 0.d0
        adhbl(i) = adhbl(i)-adgat1m(i)*(visch/(hbl(i)*hbl(i))/wm(i))
        advisch = advisch+adgat1m(i)*(1/hbl(i)/wm(i))
        adwm(i) = adwm(i)-adgat1m(i)*(visch/hbl(i)/(wm(i)*wm(i)))
        adgat1m(i) = 0.d0
        adbfsfc(i) = adbfsfc(i)+adf1*(stable(i)*conc1/max(ustar(i)**4,
     $phepsi))
        adstable(i) = adstable(i)+adf1*(conc1*bfsfc(i)/max(ustar(i)**4,
     $phepsi))
        adustar(i) = adustar(i)-adf1*(4*stable(i)*conc1*bfsfc(i)*(0.5+
     $sign(0.5d0,ustar(i)**4-phepsi))*ustar(i)**3/(max(ustar(i)**4,
     $phepsi)*max(ustar(i)**4,phepsi)))
        adf1 = 0.d0
        addelhat = addelhat+addifth*diftp
        addiffus(i,kn,3) = addiffus(i,kn,3)+addifth
        addiftp = addiftp+addifth*delhat
        addifth = 0.d0
        addelhat = addelhat+addifsh*difsp
        addiffus(i,kn,2) = addiffus(i,kn,2)+addifsh
        addifsp = addifsp+addifsh*delhat
        addifsh = 0.d0
        addelhat = addelhat+advisch*viscp
        addiffus(i,kn,1) = addiffus(i,kn,1)+advisch
        adviscp = adviscp+advisch*delhat
        advisch = 0.d0
        addvdzdn = addvdzdn+0.5*addiftp*r
        addvdzup = addvdzup+0.5*addiftp*(1.-r)
        adr = adr+0.5*addiftp*((-(dvdzup+abs(dvdzup)))+dvdzdn+
     $abs(dvdzdn))
        addvdzup = addvdzup+0.5*addiftp*(1.-r)*sign(1.d0,dvdzup)
        addvdzdn = addvdzdn+0.5*addiftp*r*sign(1.d0,dvdzdn)
        addiftp = 0.d0
        addiffus(i,kn+1,3) = addiffus(i,kn+1,3)-addvdzdn/hwide(kn+1)
        addiffus(i,kn,3) = addiffus(i,kn,3)+addvdzdn/hwide(kn+1)
        addvdzdn = 0.d0
        addiffus(i,kn-1,3) = addiffus(i,kn-1,3)+addvdzup/hwide(kn)
        addiffus(i,kn,3) = addiffus(i,kn,3)-addvdzup/hwide(kn)
        addvdzup = 0.d0
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        addvdzdn = addvdzdn+0.5*addifsp*r
        addvdzup = addvdzup+0.5*addifsp*(1.-r)
        adr = adr+0.5*addifsp*((-(dvdzup+abs(dvdzup)))+dvdzdn+
     $abs(dvdzdn))
        addvdzup = addvdzup+0.5*addifsp*(1.-r)*sign(1.d0,dvdzup)
        addvdzdn = addvdzdn+0.5*addifsp*r*sign(1.d0,dvdzdn)
        addifsp = 0.d0
        addiffus(i,kn+1,2) = addiffus(i,kn+1,2)-addvdzdn/hwide(kn+1)
        addiffus(i,kn,2) = addiffus(i,kn,2)+addvdzdn/hwide(kn+1)
        addvdzdn = 0.d0
        addiffus(i,kn-1,2) = addiffus(i,kn-1,2)+addvdzup/hwide(kn)
        addiffus(i,kn,2) = addiffus(i,kn,2)-addvdzup/hwide(kn)
        addvdzup = 0.d0
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        addvdzdn = addvdzdn+0.5*adviscp*r
        addvdzup = addvdzup+0.5*adviscp*(1.-r)
        adr = adr+0.5*adviscp*((-(dvdzup+abs(dvdzup)))+dvdzdn+
     $abs(dvdzdn))
        addvdzup = addvdzup+0.5*adviscp*(1.-r)*sign(1.d0,dvdzup)
        addvdzdn = addvdzdn+0.5*adviscp*r*sign(1.d0,dvdzdn)
        adviscp = 0.d0
        addiffus(i,kn+1,1) = addiffus(i,kn+1,1)-addvdzdn/hwide(kn+1)
        addiffus(i,kn,1) = addiffus(i,kn,1)+addvdzdn/hwide(kn+1)
        addvdzdn = 0.d0
        addiffus(i,kn-1,1) = addiffus(i,kn-1,1)+addvdzup/hwide(kn)
        addiffus(i,kn,1) = addiffus(i,kn,1)-addvdzup/hwide(kn)
        addvdzup = 0.d0
        addelhat = addelhat-adr/hwide(kn)
        adr = 0.d0
        adhbl(i) = adhbl(i)-addelhat
        addelhat = 0.d0
      end do
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        adws(i) = adws(i)*(0.5-sign(0.5d0,phepsi-abs(ws(i))))*sign(eins,
     $ws(i))*sign(1.d0,ws(i))
        adwm(i) = adwm(i)*(0.5-sign(0.5d0,phepsi-abs(wm(i))))*sign(eins,
     $wm(i))*sign(1.d0,wm(i))
      end do
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      call adwscale( sigma,hbl,ustar,bfsfc,adsigma,adhbl,adustar,
     $adbfsfc,adwm,adws )
      do i = 1, imt
        adstable(i) = adstable(i)+adsigma(i)*(1-epsilon)
        adsigma(i) = 0.d0
      end do

      end


      subroutine mdblmix( ustar, bfsfc, hbl, stable, casea, diffus, kbl,
     $ dkm1, blmc, ghat, sigma, ikey )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision eins
      parameter ( eins = 1. )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p0
      parameter ( p0 = 0. )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_wm_23h(imt,24)
      common /cadwm/ comlev1_kpp_wm_23h

      double precision comlev1_kpp_ws_24h(imt,24)
      common /cadws/ comlev1_kpp_ws_24h

      double precision cg
      double precision cstar
      common /kmixcbm/ cstar, cg

      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision bfsfc(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dkm1(imt,mdiff)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer ikey
      integer kbl(imt)
      double precision sigma(imt)
      double precision stable(imt)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision a1
      double precision a2
      double precision a3
      double precision dat1m(imt)
      double precision dat1s(imt)
      double precision dat1t(imt)
      double precision delhat
      double precision difsh
      double precision difsp
      double precision difth
      double precision diftp
      double precision dvdzdn
      double precision dvdzup
      double precision f1
      double precision gat1m(imt)
      double precision gat1s(imt)
      double precision gat1t(imt)
      double precision gm
      double precision gs
      double precision gt
      integer i
      integer ip1
      integer ki
      integer kn
      double precision r
      double precision sig
      double precision tempvar
      double precision visch
      double precision viscp
      double precision wm(imt)
      double precision ws(imt)

C**********************************************
C executable statements of routine
C**********************************************
      do i = 1, imt
        sigma(i) = stable(i)*1.+(1.-stable(i))*epsilon
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        wm(i) = sign(eins,wm(i))*max(phepsi,abs(wm(i)))
        ws(i) = sign(eins,ws(i))*max(phepsi,abs(ws(i)))
      end do
      do ip1 = 1, imt
        comlev1_kpp_wm_23h(ip1,ikey) = wm(ip1)
      end do
      do ip1 = 1, imt
        comlev1_kpp_ws_24h(ip1,ikey) = ws(ip1)
      end do
      do i = 1, imt
        kn = int(casea(i)+phepsi)*(kbl(i)-1)+(1-int(casea(i)+phepsi))*
     $kbl(i)
        delhat = 0.5*hwide(kn)-zgrid(kn)-hbl(i)
        r = 1.-delhat/hwide(kn)
        dvdzup = (diffus(i,kn-1,1)-diffus(i,kn,1))/hwide(kn)
        dvdzdn = (diffus(i,kn,1)-diffus(i,kn+1,1))/hwide(kn+1)
        viscp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,2)-diffus(i,kn,2))/hwide(kn)
        dvdzdn = (diffus(i,kn,2)-diffus(i,kn+1,2))/hwide(kn+1)
        difsp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        dvdzup = (diffus(i,kn-1,3)-diffus(i,kn,3))/hwide(kn)
        dvdzdn = (diffus(i,kn,3)-diffus(i,kn+1,3))/hwide(kn+1)
        diftp = 0.5*((1.-r)*(dvdzup+abs(dvdzup))+r*(dvdzdn+abs(dvdzdn)))
        visch = diffus(i,kn,1)+viscp*delhat
        difsh = diffus(i,kn,2)+difsp*delhat
        difth = diffus(i,kn,3)+diftp*delhat
        f1 = stable(i)*conc1*bfsfc(i)/max(ustar(i)**4,phepsi)
        gat1m(i) = visch/hbl(i)/wm(i)
        dat1m(i) = (-(viscp/wm(i)))+f1*visch
        dat1m(i) = min(dat1m(i),p0)
        gat1s(i) = difsh/hbl(i)/ws(i)
        dat1s(i) = (-(difsp/ws(i)))+f1*difsh
        dat1s(i) = min(dat1s(i),p0)
        gat1t(i) = difth/hbl(i)/ws(i)
        dat1t(i) = (-(diftp/ws(i)))+f1*difth
        dat1t(i) = min(dat1t(i),p0)
      end do
      do ki = 1, nr
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
        end do
        call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
        do i = 1, imt
          sig = ((-zgrid(ki))+0.5*hwide(ki))/hbl(i)
          a1 = sig-2.
          a2 = 3.-2.*sig
          a3 = sig-1.
          gm = a1+a2*gat1m(i)+a3*dat1m(i)
          gs = a1+a2*gat1s(i)+a3*dat1s(i)
          gt = a1+a2*gat1t(i)+a3*dat1t(i)
          blmc(i,ki,1) = hbl(i)*wm(i)*sig*(1.+sig*gm)
          blmc(i,ki,2) = hbl(i)*ws(i)*sig*(1.+sig*gs)
          blmc(i,ki,3) = hbl(i)*ws(i)*sig*(1.+sig*gt)
          tempvar = ws(i)*hbl(i)
          ghat(i,ki) = (1.-stable(i))*cg/max(phepsi,tempvar)
        end do
      end do
      do i = 1, imt
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        sigma(i) = stable(i)*sig+(1.-stable(i))*min(sig,epsilon)
      end do
      call wscale( sigma,hbl,ustar,bfsfc,wm,ws )
      do i = 1, imt
        sig = -(zgrid(kbl(i)-1)/hbl(i))
        a1 = sig-2.
        a2 = 3.-2.*sig
        a3 = sig-1.
        gm = a1+a2*gat1m(i)+a3*dat1m(i)
        gs = a1+a2*gat1s(i)+a3*dat1s(i)
        gt = a1+a2*gat1t(i)+a3*dat1t(i)
        dkm1(i,1) = hbl(i)*wm(i)*sig*(1.+sig*gm)
        dkm1(i,2) = hbl(i)*ws(i)*sig*(1.+sig*gs)
        dkm1(i,3) = hbl(i)*ws(i)*sig*(1.+sig*gt)
      end do
      end


      subroutine adbudget( ug, tice, hice1, kopen, bi, bj, adug, adtice,
     $ adhice1, adfice1 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision one
      parameter ( one = 1.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      double precision adqneti(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqneto(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqswi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adqflux/ adqneto, adqneti, adqswi

      double precision adheff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision adhsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adtrans/ adheff, adhsnow

      double precision aqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_temp_r/ atemp, aqh, lwflux, precip

      double precision lwdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_rad_down_r/ swdown, lwdown, swdown0, swdown1, lwdown0,
     $ lwdown1

      double precision max_heff
      double precision max_tice
      double precision min_atemp
      double precision min_lwdown
      double precision min_tice
      common /seaice_bound_rl/ max_heff, min_atemp, min_lwdown, 
     $max_tice, min_tice

      integer imax_tice
      integer lad
      integer npseudo
      common /seaice_parm_i/ lad, imax_tice, npseudo

      double precision a22
      double precision diff1
      double precision endingyear
      double precision fluxforcingend
      double precision fluxforcingperiod
      double precision fluxforcingstart
      double precision ho
      double precision lsr_error
      double precision seaice_albedo
      double precision seaice_drag
      double precision seaice_drysnowalb
      double precision seaice_dumpfreq
      double precision seaice_emissivity
      double precision seaice_iceconduct
      double precision seaice_latentice
      double precision seaice_latentwater
      double precision seaice_sensheat
      double precision seaice_shortwave
      double precision seaice_snowconduct
      double precision seaice_snowthick
      double precision seaice_strength
      double precision seaice_tavefreq
      double precision seaice_wateralbedo
      double precision seaice_waterdrag
      double precision seaice_wetsnowalb
      double precision sssforcingend
      double precision sssforcingperiod
      double precision sssforcingstart
      double precision sstforcingend
      double precision sstforcingperiod
      double precision sstforcingstart
      double precision startingyear
      double precision windforcingend
      double precision windforcingperiod
      double precision windforcingstart
      common /seaice_parm_rl/ seaice_dumpfreq, seaice_tavefreq, 
     $seaice_drag, seaice_waterdrag, seaice_albedo, seaice_drysnowalb, 
     $seaice_wetsnowalb, seaice_wateralbedo, seaice_strength, 
     $seaice_sensheat, seaice_latentwater, seaice_latentice, 
     $seaice_iceconduct, seaice_snowconduct, seaice_emissivity, 
     $seaice_snowthick, seaice_shortwave, lsr_error, diff1, a22, ho, 
     $windforcingstart, windforcingend, windforcingperiod, 
     $fluxforcingstart, fluxforcingend, fluxforcingperiod, 
     $sstforcingstart, sstforcingend, sstforcingperiod, sssforcingstart,
     $ sssforcingend, sssforcingperiod, startingyear, endingyear

      double precision heff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision hsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /trans/ heff, hsnow

C==============================================
C declare arguments
C==============================================
      double precision adfice1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adhice1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adug(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hice1(1-olx:snx+olx,1-oly:sny+oly)
      integer kopen
      double precision tice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ug(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision a1(1-olx:snx+olx,1-oly:sny+oly)
      double precision a2(1-olx:snx+olx,1-oly:sny+oly)
      double precision a3(1-olx:snx+olx,1-oly:sny+oly)
      double precision ada1(1-olx:snx+olx,1-oly:sny+oly)
      double precision ada1h(1-olx:snx+olx,1-oly:sny+oly)
      double precision ada2(1-olx:snx+olx,1-oly:sny+oly)
      double precision ada3(1-olx:snx+olx,1-oly:sny+oly)
      double precision adalb(1-olx:snx+olx,1-oly:sny+oly)
      double precision adb(1-olx:snx+olx,1-oly:sny+oly)
      double precision adhice(1-olx:snx+olx,1-oly:sny+oly)
      double precision adhiceh(1-olx:snx+olx,1-oly:sny+oly)
      double precision adhsnowh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adticeh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adugh(1-olx:snx+olx,1-oly:sny+oly)
      double precision alb(1-olx:snx+olx,1-oly:sny+oly)
      double precision asnow
      double precision atemph(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision b(1-olx:snx+olx,1-oly:sny+oly)
      double precision c1
      double precision c2
      double precision c3
      double precision c4
      double precision c5
      double precision d1
      double precision d1i
      double precision d1w
      double precision d3
      double precision hcut
      double precision hice(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer iter
      integer j
      double precision qs1
      double precision tb
      double precision ticeh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmelt
      double precision tmeltp
      double precision xio
      double precision xki
      double precision xks

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              ticeh(ip1,ip2,ip3,ip4) = tice(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              atemph(ip1,ip2,ip3,ip4) = atemp(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          ada1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          ada2(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          ada3(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adalb(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adb(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adhice(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      qs1 = 0.622d0/1013.d0
      c1 = 2.7798202d-6
      c2 = -0.0026913393d0
      c3 = 0.97920849d0
      c4 = -158.63779d0
      c5 = 9653.1925d0
      tb = 271.2d0
      d1 = seaice_sensheat
      d1w = seaice_latentwater
      d1i = seaice_latentice
      d3 = seaice_emissivity
      tmelt = 273.16d0
      tmeltp = 273.159d0
      xki = seaice_iceconduct
      xks = seaice_snowconduct
      hcut = seaice_snowthick
      xio = seaice_shortwave
      do j = 1, sny
        do i = 1, snx
          tice(i,j,bi,bj) = min(273.16d0+max_tice,tice(i,j,bi,bj))
          atemp(i,j,bi,bj) = max(273.16d0+min_atemp,atemp(i,j,bi,bj))
          lwdown(i,j,bi,bj) = max(min_lwdown,lwdown(i,j,bi,bj))
        end do
      end do
      if (kopen .le. 0) then
        do j = 1, sny
          do i = 1, snx
            b(i,j) = qs1*6.11d0*exp(17.2694d0*(tice(i,j,bi,bj)-tmelt)/
     $(tice(i,j,bi,bj)-tmelt+237.3d0))
            adfice1(i,j,bi,bj) = adfice1(i,j,bi,bj)+adqneto(i,j,bi,bj)
            adqneto(i,j,bi,bj) = 0.d0
            ada1(i,j) = ada1(i,j)-adfice1(i,j,bi,bj)
            ada2(i,j) = ada2(i,j)-adfice1(i,j,bi,bj)
            adfice1(i,j,bi,bj) = 0.d0
            adb(i,j) = adb(i,j)-ada2(i,j)*d1w*ug(i,j)
            adtice(i,j,bi,bj) = adtice(i,j,bi,bj)-ada2(i,j)*(d1*ug(i,j)+
     $4*d3*tice(i,j,bi,bj)**3)
            adug(i,j) = adug(i,j)-ada2(i,j)*(d1*tice(i,j,bi,bj)+d1w*b(i,
     $j))
            ada2(i,j) = 0.d0
            adtice(i,j,bi,bj) = adtice(i,j,bi,bj)+6.11d0*adb(i,j)*qs1*
     $(17.2694d0/(237.3d0+tice(i,j,bi,bj)-tmelt)-17.2694d0*(tice(i,j,bi,
     $bj)-tmelt)/((237.3d0+tice(i,j,bi,bj)-tmelt)*(237.3d0+tice(i,j,bi,
     $bj)-tmelt)))*exp(17.2694d0*(tice(i,j,bi,bj)-tmelt)/(tice(i,j,bi,
     $bj)-tmelt+237.3d0))
            adb(i,j) = 0.d0
            adalb(i,j) = adalb(i,j)-ada1(i,j)*swdown(i,j,bi,bj)
            adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)+ada1(i,j)*d1w*ug(i,j)
            adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)+ada1(i,j)*d1*ug(i,j)
            adug(i,j) = adug(i,j)+ada1(i,j)*(d1*atemp(i,j,bi,bj)+d1w*
     $aqh(i,j,bi,bj))
            ada1(i,j) = 0.d0
          end do
        end do
      else
        do j = 1, sny
          do i = 1, snx
            hice(i,j) = max(hice1(i,j),0.05d0)
            hice(i,j) = min(hice(i,j),9.d0)
          end do
        end do
        do j = 1, sny
          do i = 1, snx
            alb(i,j) = 0.75d0
            if (tice(i,j,bi,bj) .gt. tmeltp) then
              alb(i,j) = seaice_albedo
            endif
            asnow = seaice_drysnowalb
            if (tice(i,j,bi,bj) .gt. tmeltp) then
              asnow = seaice_wetsnowalb
            endif
            if (hsnow(i,j,bi,bj) .gt. hcut) then
              alb(i,j) = asnow
            else
              alb(i,j) = alb(i,j)+hsnow(i,j,bi,bj)/hcut*(asnow-alb(i,j))
              if (alb(i,j) .gt. asnow) then
                alb(i,j) = asnow
              endif
            endif
          end do
        end do
        do j = 1, sny
          do i = 1, snx
            if (hsnow(i,j,bi,bj) .gt. 0.) then
              a1(i,j) = (one-alb(i,j))*swdown(i,j,bi,bj)+lwdown(i,j,bi,
     $bj)+d1*ug(i,j)*atemp(i,j,bi,bj)+d1i*ug(i,j)*aqh(i,j,bi,bj)
            else
              a1(i,j) = (one-alb(i,j))*swdown(i,j,bi,bj)*(one-xio*exp(-
     $(1.5d0*hice(i,j))))+lwdown(i,j,bi,bj)+d1*ug(i,j)*atemp(i,j,bi,bj)+
     $d1i*ug(i,j)*aqh(i,j,bi,bj)
            endif
          end do
        end do
        do j = 1, sny
          do i = 1, snx
            if (hsnow(i,j,bi,bj) .gt. 0.) then
              adqswi(i,j,bi,bj) = 0.d0
            else
              adalb(i,j) = adalb(i,j)+adqswi(i,j,bi,bj)*swdown(i,j,bi,
     $bj)*xio*exp(-(1.5d0*hice(i,j)))
              adhice(i,j) = adhice(i,j)-(-1.5d0)*adqswi(i,j,bi,bj)*(one-
     $alb(i,j))*swdown(i,j,bi,bj)*xio*exp(-(1.5d0*hice(i,j)))
              adqswi(i,j,bi,bj) = 0.d0
            endif
            ada1(i,j) = ada1(i,j)-adfice1(i,j,bi,bj)
            ada2(i,j) = ada2(i,j)-adfice1(i,j,bi,bj)
            adfice1(i,j,bi,bj) = 0.d0
          end do
        end do
C REDO ITERATION
        do iter = 1, imax_tice
          do j = 1, sny
            do i = 1, snx
              b(i,j) = qs1*(c1*tice(i,j,bi,bj)**4+c2*tice(i,j,bi,bj)**3+
     $c3*tice(i,j,bi,bj)**2+c4*tice(i,j,bi,bj)+c5)
              a2(i,j) = (-(d1*ug(i,j)*tice(i,j,bi,bj)))-d1i*ug(i,j)*b(i,
     $j)-d3*tice(i,j,bi,bj)**4
              b(i,j) = xks/(hsnow(i,j,bi,bj)/hice(i,j)+xks/xki)/hice(i,
     $j)
              a3(i,j) = 4.d0*d3*tice(i,j,bi,bj)**3+b(i,j)+d1*ug(i,j)
              b(i,j) = b(i,j)*(tb-tice(i,j,bi,bj))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tice(i,j,bi,bj) = tice(i,j,bi,bj)+(a1(i,j)+a2(i,j)+b(i,j))
     $/a3(i,j)
              tice(i,j,bi,bj) = max(273.16d0+min_tice,tice(i,j,bi,bj))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tice(i,j,bi,bj) = min(tice(i,j,bi,bj),tmelt)
            end do
          end do
        end do
C START OF ADJOINT ITERATION
C SAVE ADJOINT VALUES
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adugh(ip1,ip2) = adug(ip1,ip2)
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adticeh(ip1,ip2,ip3,ip4) = adtice(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adhsnowh(ip1,ip2,ip3,ip4) = adhsnow(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adhiceh(ip1,ip2) = adhice(ip1,ip2)
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            ada1h(ip1,ip2) = ada1(ip1,ip2)
          end do
        end do
C ITERATION
        do iter = 1, imax_tice
C RESET ADJOINT INPUT VARIABLES
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              ada1(ip1,ip2) = 0.d0
            end do
          end do
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adhice(ip1,ip2) = 0.d0
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  adhsnow(ip1,ip2,ip3,ip4) = 0.d0
                end do
              end do
            end do
          end do
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adug(ip1,ip2) = 0.d0
            end do
          end do
C ADJOINT LOOP KERNEL
          do j = 1, sny
            do i = 1, snx
              b(i,j) = qs1*(c1*tice(i,j,bi,bj)**4+c2*tice(i,j,bi,bj)**3+
     $c3*tice(i,j,bi,bj)**2+c4*tice(i,j,bi,bj)+c5)
              a2(i,j) = (-(d1*ug(i,j)*tice(i,j,bi,bj)))-d1i*ug(i,j)*b(i,
     $j)-d3*tice(i,j,bi,bj)**4
              b(i,j) = xks/(hsnow(i,j,bi,bj)/hice(i,j)+xks/xki)/hice(i,
     $j)
              a3(i,j) = 4.d0*d3*tice(i,j,bi,bj)**3+b(i,j)+d1*ug(i,j)
              b(i,j) = b(i,j)*(tb-tice(i,j,bi,bj))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tice(i,j,bi,bj) = tice(i,j,bi,bj)+(a1(i,j)+a2(i,j)+b(i,j))
     $/a3(i,j)
              tice(i,j,bi,bj) = max(273.16d0+min_tice,tice(i,j,bi,bj))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              adtice(i,j,bi,bj) = adtice(i,j,bi,bj)*(0.5+sign(0.5d0,
     $tmelt-tice(i,j,bi,bj)))
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tice(i,j,bi,bj) = min(273.16d0+max_tice,tice(i,j,bi,bj))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tice(i,j,bi,bj) = tice(i,j,bi,bj)+(a1(i,j)+a2(i,j)+b(i,j))
     $/a3(i,j)
              adtice(i,j,bi,bj) = adtice(i,j,bi,bj)*(0.5-sign(0.5d0,
     $273.16d0+min_tice-tice(i,j,bi,bj)))
              ada1(i,j) = ada1(i,j)+adtice(i,j,bi,bj)/a3(i,j)
              ada2(i,j) = ada2(i,j)+adtice(i,j,bi,bj)/a3(i,j)
              ada3(i,j) = ada3(i,j)-adtice(i,j,bi,bj)*((a1(i,j)+a2(i,j)+
     $b(i,j))/(a3(i,j)*a3(i,j)))
              adb(i,j) = adb(i,j)+adtice(i,j,bi,bj)/a3(i,j)
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tice(i,j,bi,bj) = min(273.16d0+max_tice,tice(i,j,bi,bj))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              b(i,j) = qs1*(c1*tice(i,j,bi,bj)**4+c2*tice(i,j,bi,bj)**3+
     $c3*tice(i,j,bi,bj)**2+c4*tice(i,j,bi,bj)+c5)
              b(i,j) = xks/(hsnow(i,j,bi,bj)/hice(i,j)+xks/xki)/hice(i,
     $j)
              adtice(i,j,bi,bj) = adtice(i,j,bi,bj)-adb(i,j)*b(i,j)
              adb(i,j) = adb(i,j)*(tb-tice(i,j,bi,bj))
              adb(i,j) = adb(i,j)+ada3(i,j)
              adtice(i,j,bi,bj) = adtice(i,j,bi,bj)+12*ada3(i,j)*d3*
     $tice(i,j,bi,bj)**2
              adug(i,j) = adug(i,j)+ada3(i,j)*d1
              ada3(i,j) = 0.d0
              adhice(i,j) = adhice(i,j)+adb(i,j)*(xks*(hsnow(i,j,bi,bj)/
     $(hice(i,j)*hice(i,j)))/((hsnow(i,j,bi,bj)/hice(i,j)+xks/xki)*
     $(hsnow(i,j,bi,bj)/hice(i,j)+xks/xki))/hice(i,j)-xks/(hsnow(i,j,bi,
     $bj)/hice(i,j)+xks/xki)/(hice(i,j)*hice(i,j)))
              adhsnow(i,j,bi,bj) = adhsnow(i,j,bi,bj)-adb(i,j)*(xks/
     $hice(i,j)/((hsnow(i,j,bi,bj)/hice(i,j)+xks/xki)*(hsnow(i,j,bi,bj)/
     $hice(i,j)+xks/xki))/hice(i,j))
              adb(i,j) = 0.d0
              b(i,j) = qs1*(c1*tice(i,j,bi,bj)**4+c2*tice(i,j,bi,bj)**3+
     $c3*tice(i,j,bi,bj)**2+c4*tice(i,j,bi,bj)+c5)
              adb(i,j) = adb(i,j)-ada2(i,j)*d1i*ug(i,j)
              adtice(i,j,bi,bj) = adtice(i,j,bi,bj)-ada2(i,j)*(d1*ug(i,
     $j)+4*d3*tice(i,j,bi,bj)**3)
              adug(i,j) = adug(i,j)-ada2(i,j)*(d1*tice(i,j,bi,bj)+d1i*
     $b(i,j))
              ada2(i,j) = 0.d0
              adtice(i,j,bi,bj) = adtice(i,j,bi,bj)+adb(i,j)*qs1*(4*c1*
     $tice(i,j,bi,bj)**3+3*c2*tice(i,j,bi,bj)**2+2*c3*tice(i,j,bi,bj)+
     $c4)
              adb(i,j) = 0.d0
            end do
          end do
C ADD ADJOINT VALUES
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  adtice(ip1,ip2,ip3,ip4) = adtice(ip1,ip2,ip3,ip4)+
     $adticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
        end do
C RESET ADJOINT SOLVING VARIABLES
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            ada2(ip1,ip2) = 0.d0
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtice(ip1,ip2,ip3,ip4) = 0.d0
              end do
            end do
          end do
        end do
C UPDATE ADJOINT INPUT VARIABLES
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            ada1(ip1,ip2) = ada1(ip1,ip2)+ada1h(ip1,ip2)
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adhice(ip1,ip2) = adhice(ip1,ip2)+adhiceh(ip1,ip2)
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adhsnow(ip1,ip2,ip3,ip4) = adhsnow(ip1,ip2,ip3,ip4)+
     $adhsnowh(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adug(ip1,ip2) = adug(ip1,ip2)+adugh(ip1,ip2)
          end do
        end do
C DEALLOCATE MEMORY
C END OF ADJOINT ITERATION
        do j = 1, sny
          do i = 1, snx
            if (hsnow(i,j,bi,bj) .gt. 0.) then
              adalb(i,j) = adalb(i,j)-ada1(i,j)*swdown(i,j,bi,bj)
              adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)+ada1(i,j)*d1i*ug(i,j)
              adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)+ada1(i,j)*d1*ug(i,
     $j)
              adug(i,j) = adug(i,j)+ada1(i,j)*(d1*atemp(i,j,bi,bj)+d1i*
     $aqh(i,j,bi,bj))
              ada1(i,j) = 0.d0
            else
              adalb(i,j) = adalb(i,j)-ada1(i,j)*swdown(i,j,bi,bj)*(one-
     $xio*exp(-(1.5d0*hice(i,j))))
              adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)+ada1(i,j)*d1i*ug(i,j)
              adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)+ada1(i,j)*d1*ug(i,
     $j)
              adhice(i,j) = adhice(i,j)-(-1.5d0)*ada1(i,j)*(one-alb(i,j)
     $)*swdown(i,j,bi,bj)*xio*exp(-(1.5d0*hice(i,j)))
              adug(i,j) = adug(i,j)+ada1(i,j)*(d1*atemp(i,j,bi,bj)+d1i*
     $aqh(i,j,bi,bj))
              ada1(i,j) = 0.d0
            endif
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do j = 1, sny
          do i = 1, snx
            tice(i,j,bi,bj) = min(273.16d0+max_tice,tice(i,j,bi,bj))
          end do
        end do
        do j = 1, sny
          do i = 1, snx
            alb(i,j) = 0.75d0
            if (tice(i,j,bi,bj) .gt. tmeltp) then
              alb(i,j) = seaice_albedo
            endif
            asnow = seaice_drysnowalb
            if (tice(i,j,bi,bj) .gt. tmeltp) then
              asnow = seaice_wetsnowalb
            endif
            if (hsnow(i,j,bi,bj) .gt. hcut) then
              adalb(i,j) = 0.d0
            else
              alb(i,j) = alb(i,j)+hsnow(i,j,bi,bj)/hcut*(asnow-alb(i,j))
              if (alb(i,j) .gt. asnow) then
                adalb(i,j) = 0.d0
              endif
              alb(i,j) = 0.75d0
              if (tice(i,j,bi,bj) .gt. tmeltp) then
                alb(i,j) = seaice_albedo
              endif
              adhsnow(i,j,bi,bj) = adhsnow(i,j,bi,bj)+adalb(i,j)/hcut*
     $(asnow-alb(i,j))
              adalb(i,j) = adalb(i,j)*(1-hsnow(i,j,bi,bj)/hcut)
            endif
            if (tice(i,j,bi,bj) .gt. tmeltp) then
              adalb(i,j) = 0.d0
            endif
            adalb(i,j) = 0.d0
          end do
        end do
        do j = 1, sny
          do i = 1, snx
            hice(i,j) = max(hice1(i,j),0.05d0)
            adhice(i,j) = adhice(i,j)*(0.5+sign(0.5d0,9.d0-hice(i,j)))
            adhice1(i,j) = adhice1(i,j)+adhice(i,j)*(0.5+sign(0.5d0,
     $hice1(i,j)-0.05d0))
            adhice(i,j) = 0.d0
          end do
        end do
      endif
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do j = 1, sny
        do i = 1, snx
          adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)*(0.5-sign(0.5d0,
     $273.16d0+min_atemp-atemp(i,j,bi,bj)))
          adtice(i,j,bi,bj) = adtice(i,j,bi,bj)*(0.5-sign(0.5d0,tice(i,
     $j,bi,bj)-(273.16d0+max_tice)))
        end do
      end do

C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adcalc_common_factors( bi, bj, imin, imax, jmin, jmax, 
     $k, adutrans, advtrans, adrtrans )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          xa(i,j) = 0.d0
          ya(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          xa(i,j) = dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
          ya(i,j) = dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adwvel(i,j,k,bi,bj) = adwvel(i,j,k,bi,bj)+adrtrans(i,j)*ra(i,
     $j,bi,bj)
          adrtrans(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advtrans(i,j)*ya(i,
     $j)
          advtrans(i,j) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adutrans(i,j)*xa(i,
     $j)
          adutrans(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adrtrans(i,j) = 0.d0
          advtrans(i,j) = 0.d0
          adutrans(i,j) = 0.d0
        end do
      end do

      end


      subroutine adcalc_diffusivity( bi, bj, imin, imax, jmin, jmax, k, 
     $maskup, adkappart, adkappars )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

C==============================================
C declare arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer help_h
      integer help_i
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usekpp) then
        help_h = imin+1
        help_i = jmin+1
        call adkpp_calc_diff( bi,bj,help_h,imax,help_i,jmax,k,maskup,
     $adkappart,adkappars )
      endif
      if (usegmredi) then
        call adgmredi_calc_diff( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $adkappart,adkappars )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adkappars(i,j,k) = adkappars(i,j,k)*maskup(i,j)
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adkappart(i,j,k) = adkappart(i,j,k)*maskup(i,j)
        end do
      end do

      end


      subroutine adcalc_div_ghat( bi, bj, k, xa, ya, adcg2d_b )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adcg2d_b(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adpf(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adpf(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1, sny
        do i = 1, snx
          adpf(i,j+1) = adpf(i,j+1)+adcg2d_b(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adcg2d_b(i,j,bi,bj)
        end do
      end do
      if (implicdiv2dflow .eq. 1.) then
        do j = 1, sny+1
          do i = 1, snx
            adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+adpf(i,j)*(ya(i,
     $j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      else if (exactconserv) then
        do j = 1, sny+1
          do i = 1, snx
            adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+adpf(i,j)*
     $(implicdiv2dflow*ya(i,j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      else
        do j = 1, sny+1
          do i = 1, snx
            adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+adpf(i,j)*
     $(implicdiv2dflow*ya(i,j)/deltatmom)
            advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adpf(i,j)*((1.-
     $implicdiv2dflow)*ya(i,j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      endif
      do j = 1, sny
        do i = 1, snx
          adpf(i+1,j) = adpf(i+1,j)+adcg2d_b(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adcg2d_b(i,j,bi,bj)
        end do
      end do
      if (implicdiv2dflow .eq. 1.) then
        do j = 1, sny
          do i = 1, snx+1
            adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+adpf(i,j)*(xa(i,
     $j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      else if (exactconserv) then
        do j = 1, sny
          do i = 1, snx+1
            adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+adpf(i,j)*
     $(implicdiv2dflow*xa(i,j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      else
        do j = 1, sny
          do i = 1, snx+1
            adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+adpf(i,j)*
     $(implicdiv2dflow*xa(i,j)/deltatmom)
            aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adpf(i,j)*((1.-
     $implicdiv2dflow)*xa(i,j)/deltatmom)
            adpf(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine adcalc_exact_eta( updateetan_etah, bi, bj, mytime, 
     $adufld, advfld )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adhdivflow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexact_eta_local/ adhdivflow

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision mytime
      logical updateetan_etah

C==============================================
C declare local variables
C==============================================
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j
      integer k

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (updateetan_etah) then
        if (implicdiv2dflow .ne. 0.d0) then
          do j = 1, sny
            do i = 1, snx
              adetah(i,j,bi,bj) = adetah(i,j,bi,bj)+adetan(i,j,bi,bj)
              adhdivflow(i,j,bi,bj) = adhdivflow(i,j,bi,bj)-adetan(i,j,
     $bi,bj)*implicdiv2dflow*recip_ra(i,j,bi,bj)*deltatmom
              adetan(i,j,bi,bj) = 0.d0
            end do
          end do
        else
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adetah(i,j,bi,bj) = adetah(i,j,bi,bj)+adetan(i,j,bi,bj)
              adetan(i,j,bi,bj) = 0.d0
            end do
          end do
        endif
      else
        if (implicdiv2dflow .ne. 1.d0) then
          do j = 1, sny
            do i = 1, snx
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adetah(i,j,bi,bj)
              adhdivflow(i,j,bi,bj) = adhdivflow(i,j,bi,bj)-adetah(i,j,
     $bi,bj)*(1.-implicdiv2dflow)*recip_ra(i,j,bi,bj)*deltatmom
              adetah(i,j,bi,bj) = 0.d0
            end do
          end do
        else
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adetah(i,j,bi,bj)
              adetah(i,j,bi,bj) = 0.d0
            end do
          end do
        endif
      endif
      if (updateetan_etah .or. mytime .eq. starttime) then
        do k = nr, 1, -1
          do j = 1, sny
            do i = 1, snx
              adutrans(i+1,j) = adutrans(i+1,j)+adhdivflow(i,j,bi,bj)*
     $maskc(i,j,k,bi,bj)
              adutrans(i,j) = adutrans(i,j)-adhdivflow(i,j,bi,bj)*
     $maskc(i,j,k,bi,bj)
              advtrans(i,j+1) = advtrans(i,j+1)+adhdivflow(i,j,bi,bj)*
     $maskc(i,j,k,bi,bj)
              advtrans(i,j) = advtrans(i,j)-adhdivflow(i,j,bi,bj)*
     $maskc(i,j,k,bi,bj)
            end do
          end do
          do j = 1, sny+1
            do i = 1, snx+1
              advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+advtrans(i,j)*
     $dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
              advtrans(i,j) = 0.d0
              adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+adutrans(i,j)*
     $dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
              adutrans(i,j) = 0.d0
            end do
          end do
        end do
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adhdivflow(i,j,bi,bj) = 0.d0
          end do
        end do
      endif

      end


      subroutine adcalc_grad_phi_surf( bi, bj, imin, imax, jmin, jmax, 
     $adetafld, adphisurfx, adphisurfy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision bo_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_bo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /solve_barot/ bo_surf, recip_bo

C==============================================
C declare arguments
C==============================================
      double precision adetafld(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adetafld(i,j-1,bi,bj) = adetafld(i,j-1,bi,bj)-adphisurfy(i,j)*
     $recip_dyc(i,j,bi,bj)*bo_surf(i,j-1,bi,bj)
          adetafld(i,j,bi,bj) = adetafld(i,j,bi,bj)+adphisurfy(i,j)*
     $recip_dyc(i,j,bi,bj)*bo_surf(i,j,bi,bj)
          adphisurfy(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adetafld(i-1,j,bi,bj) = adetafld(i-1,j,bi,bj)-adphisurfx(i,j)*
     $recip_dxc(i,j,bi,bj)*bo_surf(i-1,j,bi,bj)
          adetafld(i,j,bi,bj) = adetafld(i,j,bi,bj)+adphisurfx(i,j)*
     $recip_dxc(i,j,bi,bj)*bo_surf(i,j,bi,bj)
          adphisurfx(i,j) = 0.d0
        end do
      end do

      end


      subroutine adcalc_gs( bi, bj, imin, imax, jmin, jmax, k, km1, kup,
     $ kdown, xa, ya, utrans, vtrans, rtrans, maskup, kappars, myiter, 
     $mythid, adutrans, advtrans, adrtrans, adkappars, adfvers )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer enum_centered_2nd
      parameter ( enum_centered_2nd = 2 )
      integer enum_centered_4th
      parameter ( enum_centered_4th = 4 )
      integer enum_upwind_3rd
      parameter ( enum_upwind_3rd = 3 )
      integer gad_salinity
      parameter ( gad_salinity = 102 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adfvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer myiter
      integer mythid
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (saltadvscheme .eq. enum_centered_2nd .or. saltadvscheme .eq. 
     $enum_upwind_3rd .or. saltadvscheme .eq. enum_centered_4th) then
        call adadams_bashforth2( bi,bj,k,myiter,adgs,adgsnm1 )
      endif
      call adexternal_forcing_s( imin,imax,jmin,jmax,bi,bj,k )
      call adgad_calc_rhs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,xa,
     $ya,utrans,vtrans,rtrans,maskup,diffkhs,diffk4s,kappars,salt,
     $gad_salinity,saltadvscheme,mythid,adutrans,advtrans,adrtrans,
     $adkappars,adsalt,adfvers,adgs )

      end


      subroutine mdcalc_gs( bi, bj, imin, imax, jmin, jmax, k, km1, kup,
     $ kdown, xa, ya, utrans, vtrans, rtrans, maskup, kappars, fvers, 
     $mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer enum_centered_2nd
      parameter ( enum_centered_2nd = 2 )
      integer enum_centered_4th
      parameter ( enum_centered_4th = 4 )
      integer enum_upwind_3rd
      parameter ( enum_upwind_3rd = 3 )
      integer gad_salinity
      parameter ( gad_salinity = 102 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      double precision fvers(1-olx:snx+olx,1-oly:sny+oly,2)
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer myiter
      integer mythid
      double precision mytime
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      fvers(1,1,kdown) = fvers(1,1,kdown)
      call mdgad_calc_rhs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,xa,
     $ya,utrans,vtrans,rtrans,maskup,diffkhs,diffk4s,kappars,salt,
     $gad_salinity,saltadvscheme,fvers,gs,mythid )
      call external_forcing_s( imin,imax,jmin,jmax,bi,bj,k,mytime,
     $mythid )
      if (saltadvscheme .eq. enum_centered_2nd .or. saltadvscheme .eq. 
     $enum_upwind_3rd .or. saltadvscheme .eq. enum_centered_4th) then
        call adams_bashforth2( bi,bj,k,gs,gsnm1,myiter,mythid )
      endif
      end


      subroutine adcalc_gt( bi, bj, imin, imax, jmin, jmax, k, km1, kup,
     $ kdown, xa, ya, utrans, vtrans, rtrans, maskup, kappart, mytime, 
     $myiter, mythid, adutrans, advtrans, adrtrans, adkappart, adfvert )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer enum_centered_2nd
      parameter ( enum_centered_2nd = 2 )
      integer enum_centered_4th
      parameter ( enum_centered_4th = 4 )
      integer enum_upwind_3rd
      parameter ( enum_upwind_3rd = 3 )
      integer gad_temperature
      parameter ( gad_temperature = 101 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adfvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer myiter
      integer mythid
      double precision mytime
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (tempadvscheme .eq. enum_centered_2nd .or. tempadvscheme .eq. 
     $enum_upwind_3rd .or. tempadvscheme .eq. enum_centered_4th) then
        call adadams_bashforth2( bi,bj,k,myiter,adgt,adgtnm1 )
      endif
      call adexternal_forcing_t( imin,imax,jmin,jmax,bi,bj,k,mytime )
      call adgad_calc_rhs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,xa,
     $ya,utrans,vtrans,rtrans,maskup,diffkht,diffk4t,kappart,theta,
     $gad_temperature,tempadvscheme,mythid,adutrans,advtrans,adrtrans,
     $adkappart,adtheta,adfvert,adgt )

      end


      subroutine mdcalc_gt( bi, bj, imin, imax, jmin, jmax, k, km1, kup,
     $ kdown, xa, ya, utrans, vtrans, rtrans, maskup, kappart, fvert, 
     $mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer enum_centered_2nd
      parameter ( enum_centered_2nd = 2 )
      integer enum_centered_4th
      parameter ( enum_centered_4th = 4 )
      integer enum_upwind_3rd
      parameter ( enum_upwind_3rd = 3 )
      integer gad_temperature
      parameter ( gad_temperature = 101 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      double precision fvert(1-olx:snx+olx,1-oly:sny+oly,2)
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer myiter
      integer mythid
      double precision mytime
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      fvert(1,1,kdown) = fvert(1,1,kdown)
      call mdgad_calc_rhs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,xa,
     $ya,utrans,vtrans,rtrans,maskup,diffkht,diffk4t,kappart,theta,
     $gad_temperature,tempadvscheme,fvert,gt,mythid )
      call external_forcing_t( imin,imax,jmin,jmax,bi,bj,k,mytime,
     $mythid )
      if (tempadvscheme .eq. enum_centered_2nd .or. tempadvscheme .eq. 
     $enum_upwind_3rd .or. tempadvscheme .eq. enum_centered_4th) then
        call adams_bashforth2( bi,bj,k,gt,gtnm1,myiter,mythid )
      endif
      end


      subroutine adcalc_ivdc( bi, bj, imin, imax, jmin, jmax, k, rhokm1,
     $ rhokp1, adrhokm1, adrhokp1, adkappart, adkappars )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokp1(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokp1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          if (hfacc(i,j,k,bi,bj) .gt. 0. .and. rhokm1(i,j) .gt. 
     $rhokp1(i,j)) then
            adkappars(i,j,k) = 0.d0
            adkappart(i,j,k) = 0.d0
          endif
        end do
      end do

      end


      subroutine adcalc_phi_hyd( bi, bj, imin, imax, jmin, jmax, k, 
     $mythid, adtheta, adsalt, adphihyd )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer maxnochkptlev
      parameter ( maxnochkptlev = 2 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_k_salt_2h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadsalv/ comlev1_bibj_k_salt_2h

      real*4 comlev1_bibj_k_theta_1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadthetc/ comlev1_bibj_k_theta_1h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision atm_cp
      double precision atm_kappa
      double precision atm_po
      integer integr_geopot
      common /parm_atm/ atm_cp, atm_kappa, atm_po, integr_geopot

      character*(max_len_fnam) bathyfile
      character*(max_len_fnam) buoyancyrelation
      character*(5) checkptsuff(maxnochkptlev)
      character*(max_len_fnam) dqdtfile
      character*(max_len_fnam) empmrfile
      character*(max_len_fnam) hydrogsaltfile
      character*(max_len_fnam) hydrogthetafile
      character*(max_len_fnam) meridwindfile
      character*(max_len_fnam) psurfinitfile
      character*(max_len_fnam) saltclimfile
      character*(max_len_fnam) surfqfile
      character*(max_len_fnam) surfqswfile
      character*(max_len_fnam) thetaclimfile
      character*(max_len_fnam) topofile
      character*(max_len_fnam) uvelinitfile
      character*(max_len_fnam) vvelinitfile
      character*(max_len_fnam) zonalwindfile
      common /parm_c/ checkptsuff, bathyfile, topofile, hydrogthetafile,
     $ hydrogsaltfile, zonalwindfile, meridwindfile, thetaclimfile, 
     $saltclimfile, buoyancyrelation, empmrfile, surfqfile, surfqswfile,
     $ uvelinitfile, vvelinitfile, psurfinitfile, dqdtfile

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adalpharho(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphihydh
      double precision ddpi
      double precision ddpim
      double precision ddpip
      double precision drloc
      double precision drlockp1
      double precision half
      integer i
      integer ip1
      integer ip2
      integer j
      integer kkey
      integer kp1
      integer max1
      integer max2
      integer max3
      double precision one
      double precision ratiorm
      double precision ratiorp
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zero

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adalpharho(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      zero = 0.d0
      one = 1.d0
      half = 0.5d0
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      if (buoyancyrelation .eq. 'OCEANIC') then
        drloc = drc(k)
        if (k .eq. 1) then
          drloc = drf(1)
        endif
        if (k .eq. nr) then
          drlockp1 = 0.
        else
          drlockp1 = drc(k+1)
        endif
        kkey = (ikey-1)*nr+k
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            theta(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_theta_1h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            salt(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_salt_2h(ip1,ip2,kkey)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            if (k .lt. nr) then
              adalpharho(i,j) = adalpharho(i,j)+0.5*adphihyd(i,j,k+1)*
     $drlockp1*gravity*recip_rhoconst
              adphihyd(i,j,k) = adphihyd(i,j,k)+adphihyd(i,j,k+1)
              adphihyd(i,j,k+1) = 0.d0
            endif
            adphihydh = adphihyd(i,j,k)
            adphihyd(i,j,k) = 0.d0
            adalpharho(i,j) = adalpharho(i,j)+0.5*adphihydh*drloc*
     $gravity*recip_rhoconst
            adphihyd(i,j,k) = adphihyd(i,j,k)+adphihydh
          end do
        end do
        call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,theta,
     $salt,adtheta,adsalt,adalpharho )
        if (k .eq. 1) then
          do j = jmin, jmax
            do i = imin, imax
              adphihyd(i,j,k) = 0.d0
            end do
          end do
        endif
      else if (buoyancyrelation .eq. 'ATMOSPHERIC') then
        if (integr_geopot .eq. 0) then
          if (k .eq. 1) then
            ddpip = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*ddpip*maskc(i,j,k,bi,bj)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          else
            ddpi = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)*0.5
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)+
     $adphihyd(i,j,k)*ddpi*maskc(i,j,k-1,bi,bj)
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*ddpi*maskc(i,j,k,bi,bj)
                adphihyd(i,j,k-1) = adphihyd(i,j,k-1)+adphihyd(i,j,k)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          endif
        else if (integr_geopot .eq. 1) then
          if (k .eq. 1) then
            ddpip = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*ddpip*hfacc(i,j,k,bi,bj)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          else
            ddpim = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rf(k)/atm_po)**
     $atm_kappa)
            ddpip = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)+
     $adphihyd(i,j,k)*ddpim*hfacc(i,j,k-1,bi,bj)
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*ddpip*hfacc(i,j,k,bi,bj)
                adphihyd(i,j,k-1) = adphihyd(i,j,k-1)+adphihyd(i,j,k)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          endif
        else if (integr_geopot .eq. 2) then
          kp1 = min(nr,k+1)
          if (k .eq. 1) then
            ddpim = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)*2.d0
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*(ddpim*max(zero,hfacc(i,j,k,bi,bj)-half)+ddpip*min(zero,
     $hfacc(i,j,k,bi,bj)-half))*maskc(i,j,k,bi,bj)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          else
            ddpim = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)+0.5*
     $adphihyd(i,j,k)*ddpim*maskc(i,j,k-1,bi,bj)
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*(ddpim*max(zero,hfacc(i,j,k,bi,bj)-half)+ddpip*min(zero,
     $hfacc(i,j,k,bi,bj)-half))*maskc(i,j,k,bi,bj)
                adphihyd(i,j,k-1) = adphihyd(i,j,k-1)+adphihyd(i,j,k)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          endif
        else if (integr_geopot .eq. 3) then
          kp1 = min(nr,k+1)
          if (k .eq. 1) then
            ratiorm = 0.5*drf(k)/(rf(k)-rc(k))
            ratiorp = drf(k)*recip_drc(kp1)
            ddpim = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)*2.d0
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*(ddpim*max(zero,(hfacc(i,j,k,bi,bj)-one)*ratiorm+half)+ddpip*
     $min(zero,hfacc(i,j,k,bi,bj)*ratiorp-half))*maskc(i,j,k,bi,bj)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          else
            ratiorm = drf(k)*recip_drc(k)
            ratiorp = drf(k)*recip_drc(kp1)
            ddpim = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)+0.5*
     $adphihyd(i,j,k)*ddpim*maskc(i,j,k-1,bi,bj)
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adphihyd(i,
     $j,k)*(ddpim*max(zero,(hfacc(i,j,k,bi,bj)-one)*ratiorm+half)+ddpip*
     $min(zero,hfacc(i,j,k,bi,bj)*ratiorp-half))*maskc(i,j,k,bi,bj)
                adphihyd(i,j,k-1) = adphihyd(i,j,k-1)+adphihyd(i,j,k)
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          endif
        endif
      endif

      end


      subroutine mdcalc_phi_hyd( bi, bj, imin, imax, jmin, jmax, k, 
     $theta, salt, phihyd, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer maxnochkptlev
      parameter ( maxnochkptlev = 2 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_k_salt_2h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadsalv/ comlev1_bibj_k_salt_2h

      real*4 comlev1_bibj_k_theta_1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadthetc/ comlev1_bibj_k_theta_1h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision atm_cp
      double precision atm_kappa
      double precision atm_po
      integer integr_geopot
      common /parm_atm/ atm_cp, atm_kappa, atm_po, integr_geopot

      character*(max_len_fnam) bathyfile
      character*(max_len_fnam) buoyancyrelation
      character*(5) checkptsuff(maxnochkptlev)
      character*(max_len_fnam) dqdtfile
      character*(max_len_fnam) empmrfile
      character*(max_len_fnam) hydrogsaltfile
      character*(max_len_fnam) hydrogthetafile
      character*(max_len_fnam) meridwindfile
      character*(max_len_fnam) psurfinitfile
      character*(max_len_fnam) saltclimfile
      character*(max_len_fnam) surfqfile
      character*(max_len_fnam) surfqswfile
      character*(max_len_fnam) thetaclimfile
      character*(max_len_fnam) topofile
      character*(max_len_fnam) uvelinitfile
      character*(max_len_fnam) vvelinitfile
      character*(max_len_fnam) zonalwindfile
      common /parm_c/ checkptsuff, bathyfile, topofile, hydrogthetafile,
     $ hydrogsaltfile, zonalwindfile, meridwindfile, thetaclimfile, 
     $saltclimfile, buoyancyrelation, empmrfile, surfqfile, surfqswfile,
     $ uvelinitfile, vvelinitfile, psurfinitfile, dqdtfile

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer mythid
      double precision phihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision alpharho(1-olx:snx+olx,1-oly:sny+oly)
      double precision ddpi
      double precision ddpim
      double precision ddpip
      double precision drloc
      double precision drlockp1
      double precision half
      integer i
      integer ip1
      integer ip2
      integer j
      integer kkey
      integer kp1
      integer max1
      integer max2
      integer max3
      double precision one
      double precision ratiorm
      double precision ratiorp
      double precision zero

C**********************************************
C executable statements of routine
C**********************************************
      zero = 0.d0
      one = 1.d0
      half = 0.5d0
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      if (buoyancyrelation .eq. 'OCEANIC') then
        drloc = drc(k)
        if (k .eq. 1) then
          drloc = drf(1)
        endif
        if (k .eq. nr) then
          drlockp1 = 0.
        else
          drlockp1 = drc(k+1)
        endif
        if (k .eq. 1) then
          do j = jmin, jmax
            do i = imin, imax
              phihyd(i,j,k) = 0.
            end do
          end do
        endif
        kkey = (ikey-1)*nr+k
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_theta_1h(ip1,ip2,kkey) = theta(ip1-1+1-olx,
     $ip2-1+1-oly,k,bi,bj)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_salt_2h(ip1,ip2,kkey) = salt(ip1-1+1-olx,ip2-
     $1+1-oly,k,bi,bj)
          end do
        end do
        call find_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,theta,salt,
     $alpharho,mythid )
        do j = jmin, jmax
          do i = imin, imax
            phihyd(i,j,k) = phihyd(i,j,k)+0.5*drloc*gravity*alpharho(i,
     $j)*recip_rhoconst
            if (k .lt. nr) then
              phihyd(i,j,k+1) = phihyd(i,j,k)+0.5*drlockp1*gravity*
     $alpharho(i,j)*recip_rhoconst
            endif
          end do
        end do
      else if (buoyancyrelation .eq. 'ATMOSPHERIC') then
        if (integr_geopot .eq. 0) then
          if (k .eq. 1) then
            ddpip = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = ddpip*maskc(i,j,k,bi,bj)*(theta(i,j,k,
     $bi,bj)-tref(k))
              end do
            end do
          else
            ddpi = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)*0.5
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = phihyd(i,j,k-1)+ddpi*maskc(i,j,k-1,bi,
     $bj)*(theta(i,j,k-1,bi,bj)-tref(k-1))+ddpi*maskc(i,j,k,bi,bj)*
     $(theta(i,j,k,bi,bj)-tref(k))
              end do
            end do
          endif
        else if (integr_geopot .eq. 1) then
          if (k .eq. 1) then
            ddpip = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = ddpip*hfacc(i,j,k,bi,bj)*(theta(i,j,k,
     $bi,bj)-tref(k))
              end do
            end do
          else
            ddpim = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rf(k)/atm_po)**
     $atm_kappa)
            ddpip = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = phihyd(i,j,k-1)+ddpim*hfacc(i,j,k-1,bi,
     $bj)*(theta(i,j,k-1,bi,bj)-tref(k-1))+ddpip*hfacc(i,j,k,bi,bj)*
     $(theta(i,j,k,bi,bj)-tref(k))
              end do
            end do
          endif
        else if (integr_geopot .eq. 2) then
          kp1 = min(nr,k+1)
          if (k .eq. 1) then
            ddpim = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)*2.d0
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = (ddpim*max(zero,hfacc(i,j,k,bi,bj)-half)
     $+ddpip*min(zero,hfacc(i,j,k,bi,bj)-half))*(theta(i,j,k,bi,bj)-
     $tref(k))*maskc(i,j,k,bi,bj)
              end do
            end do
          else
            ddpim = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = phihyd(i,j,k-1)+ddpim*0.5*(theta(i,j,k-
     $1,bi,bj)-tref(k-1))*maskc(i,j,k-1,bi,bj)+(ddpim*max(zero,hfacc(i,
     $j,k,bi,bj)-half)+ddpip*min(zero,hfacc(i,j,k,bi,bj)-half))*
     $(theta(i,j,k,bi,bj)-tref(k))*maskc(i,j,k,bi,bj)
              end do
            end do
          endif
        else if (integr_geopot .eq. 3) then
          kp1 = min(nr,k+1)
          if (k .eq. 1) then
            ratiorm = 0.5*drf(k)/(rf(k)-rc(k))
            ratiorp = drf(k)*recip_drc(kp1)
            ddpim = atm_cp*((rf(k)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)*2.d0
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = (ddpim*max(zero,(hfacc(i,j,k,bi,bj)-one)
     $*ratiorm+half)+ddpip*min(zero,hfacc(i,j,k,bi,bj)*ratiorp-half))*
     $(theta(i,j,k,bi,bj)-tref(k))*maskc(i,j,k,bi,bj)
              end do
            end do
          else
            ratiorm = drf(k)*recip_drc(k)
            ratiorp = drf(k)*recip_drc(kp1)
            ddpim = atm_cp*((rc(k-1)/atm_po)**atm_kappa-(rc(k)/atm_po)**
     $atm_kappa)
            ddpip = atm_cp*((rc(k)/atm_po)**atm_kappa-(rc(kp1)/atm_po)**
     $atm_kappa)
            do j = jmin, jmax
              do i = imin, imax
                phihyd(i,j,k) = phihyd(i,j,k-1)+ddpim*0.5*(theta(i,j,k-
     $1,bi,bj)-tref(k-1))*maskc(i,j,k-1,bi,bj)+(ddpim*max(zero,(hfacc(i,
     $j,k,bi,bj)-one)*ratiorm+half)+ddpip*min(zero,hfacc(i,j,k,bi,bj)*
     $ratiorp-half))*(theta(i,j,k,bi,bj)-tref(k))*maskc(i,j,k,bi,bj)
              end do
            end do
          endif
        endif
      endif
      end


      subroutine adcalc_viscosity( bi, bj, imin, imax, jmin, jmax, k, 
     $adkapparu, adkapparv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C declare local variables
C==============================================
      integer help_h
      integer help_i
      integer i
      integer j
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          kapparu(i,j,k) = viscar
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          kapparv(i,j,k) = viscar
        end do
      end do
      if (usekpp) then
        help_h = imin+1
        help_i = jmin+1
        call adkpp_calc_visc( bi,bj,help_h,imax,help_i,jmax,k,kapparu,
     $kapparv,adkapparu,adkapparv )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adkapparv(i,j,k) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adkapparu(i,j,k) = 0.d0
        end do
      end do

      end


      subroutine adconvect( bi, bj, imin, imax, jmin, jmax, k, rhokm1, 
     $rhokp1, mytime, adrhokm1, adrhokp1 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokp1(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision mytime
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokp1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adsmix(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtmix(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsum(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adsmix(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adtmix(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        do j = jmin, jmax
          do i = imin, imax
            dsum(i,j) = hfacc(i,j,k-1,bi,bj)*drf(k-1)+hfacc(i,j,k,bi,bj)
     $*drf(k)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            if (hfacc(i,j,k,bi,bj) .gt. 0. .and. rhokm1(i,j) .gt. 
     $rhokp1(i,j)) then
              adsmix(i,j) = adsmix(i,j)+adsalt(i,j,k,bi,bj)/dsum(i,j)
              adsalt(i,j,k,bi,bj) = 0.d0
              adsmix(i,j) = adsmix(i,j)+adsalt(i,j,k-1,bi,bj)/dsum(i,j)
              adsalt(i,j,k-1,bi,bj) = 0.d0
              adtmix(i,j) = adtmix(i,j)+adtheta(i,j,k,bi,bj)/dsum(i,j)
              adtheta(i,j,k,bi,bj) = 0.d0
              adtmix(i,j) = adtmix(i,j)+adtheta(i,j,k-1,bi,bj)/dsum(i,j)
              adtheta(i,j,k-1,bi,bj) = 0.d0
            endif
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            adsalt(i,j,k-1,bi,bj) = adsalt(i,j,k-1,bi,bj)+adsmix(i,j)*
     $hfacc(i,j,k-1,bi,bj)*drf(k-1)
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsmix(i,j)*
     $hfacc(i,j,k,bi,bj)*drf(k)
            adsmix(i,j) = 0.d0
            adtheta(i,j,k-1,bi,bj) = adtheta(i,j,k-1,bi,bj)+adtmix(i,j)*
     $hfacc(i,j,k-1,bi,bj)*drf(k-1)
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtmix(i,j)*
     $hfacc(i,j,k,bi,bj)*drf(k)
            adtmix(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine adconvective_adjustment( bi, bj, imin, imax, jmin, 
     $jmax, mytime, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      real*4 comlev1_bibj_k_rhok_8h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadrhok/ comlev1_bibj_k_rhok_8h

      real*4 comlev1_bibj_k_rhokm1_7h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadrhokm1/ comlev1_bibj_k_rhokm1_7h

      real*4 comlev1_bibj_k_salt_6h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadsalt/ comlev1_bibj_k_salt_6h

      real*4 comlev1_bibj_k_salt_4h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadsalu/ comlev1_bibj_k_salt_4h

      real*4 comlev1_bibj_k_theta_5h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadtheta/ comlev1_bibj_k_theta_5h

      real*4 comlev1_bibj_k_theta_3h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadthetb/ comlev1_bibj_k_theta_3h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      integer help_h
      integer help_i
      integer help_j
      integer ip1
      integer ip2
      integer k
      integer kkey
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        act1 = bi-mybxlo(mythid)
        max1 = mybxhi(mythid)-mybxlo(mythid)+1
        act2 = bj-mybylo(mythid)
        max2 = mybyhi(mythid)-mybylo(mythid)+1
        act3 = mythid-1
        max3 = ntx*nty
        act4 = ikey_dynamics-1
        ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
        if ( .not. usekpp) then
          do k = nr, 2, -1
            kkey = (ikey-1)*nr+k
            help_h = k-1
            help_i = k-1
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_theta_5h(ip1,ip2,kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_salt_6h(ip1,ip2,kkey)
              end do
            end do
            help_j = k-1
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokm1(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_rhokm1_7h(ip1,ip2,kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhok(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_rhok_8h(ip1,ip2,kkey)
              end do
            end do
            call adconvect( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $mytime,adrhokm1,adrhok )
            call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,help_j,eostype,
     $theta,salt,adtheta,adsalt,adrhok )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,k-1,bi,bj) = 
     $comlev1_bibj_k_theta_3h(ip1,ip2,kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,k-1,bi,bj) = 
     $comlev1_bibj_k_salt_4h(ip1,ip2,kkey)
              end do
            end do
            call adfind_rho( bi,bj,imin,imax,jmin,jmax,help_h,help_i,
     $eostype,theta,salt,adtheta,adsalt,adrhokm1 )
          end do
        endif
      endif

      end


      subroutine mdconvective_adjustment( bi, bj, imin, imax, jmin, 
     $jmax, mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_k_rhok_8h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadrhok/ comlev1_bibj_k_rhok_8h

      real*4 comlev1_bibj_k_rhokm1_7h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadrhokm1/ comlev1_bibj_k_rhokm1_7h

      real*4 comlev1_bibj_k_salt_6h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadsalt/ comlev1_bibj_k_salt_6h

      real*4 comlev1_bibj_k_salt_4h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadsalu/ comlev1_bibj_k_salt_4h

      real*4 comlev1_bibj_k_theta_5h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadtheta/ comlev1_bibj_k_theta_5h

      real*4 comlev1_bibj_k_theta_3h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadthetb/ comlev1_bibj_k_theta_3h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision convectcount(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer help_h
      integer help_i
      integer help_j
      integer ip1
      integer ip2
      integer k
      integer kkey
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C**********************************************
C executable statements of routine
C**********************************************
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        k = nr
        act1 = bi-mybxlo(mythid)
        max1 = mybxhi(mythid)-mybxlo(mythid)+1
        act2 = bj-mybylo(mythid)
        max2 = mybyhi(mythid)-mybylo(mythid)+1
        act3 = mythid-1
        max3 = ntx*nty
        act4 = ikey_dynamics-1
        ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
        if ( .not. usekpp) then
          do k = 2, nr
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_theta_3h(ip1,ip2,kkey) = theta(ip1-1+1-
     $olx,ip2-1+1-oly,k-1,bi,bj)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_salt_4h(ip1,ip2,kkey) = salt(ip1-1+1-olx,
     $ip2-1+1-oly,k-1,bi,bj)
              end do
            end do
            help_h = k-1
            help_i = k-1
            call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,help_i,
     $eostype,theta,salt,rhokm1,mythid )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_theta_5h(ip1,ip2,kkey) = theta(ip1-1+1-
     $olx,ip2-1+1-oly,k,bi,bj)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_salt_6h(ip1,ip2,kkey) = salt(ip1-1+1-olx,
     $ip2-1+1-oly,k,bi,bj)
              end do
            end do
            help_j = k-1
            call find_rho( bi,bj,imin,imax,jmin,jmax,k,help_j,eostype,
     $theta,salt,rhok,mythid )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_rhokm1_7h(ip1,ip2,kkey) = rhokm1(ip1-1+1-
     $olx,ip2-1+1-oly)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_rhok_8h(ip1,ip2,kkey) = rhok(ip1-1+1-olx,
     $ip2-1+1-oly)
              end do
            end do
            call convect( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $convectcount,mytime,myiter,mythid )
          end do
        endif
      endif
      end


      subroutine adconvective_adjustment_ini( bi, bj, imin, imax, jmin, 
     $jmax, mytime, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      integer help_h
      integer help_i
      integer help_j
      integer ip1
      integer ip2
      integer k
      integer kkey
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        act1 = bi-mybxlo(mythid)
        max1 = mybxhi(mythid)-mybxlo(mythid)+1
        act2 = bj-mybylo(mythid)
        max2 = mybyhi(mythid)-mybylo(mythid)+1
        act3 = mythid-1
        max3 = ntx*nty
        act4 = 0
        ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
        if ( .not. usekpp) then
          do k = nr, 2, -1
            kkey = (ikey-1)*nr+k
            help_h = k-1
            help_i = k-1
            call adread ( mythid,
     &            'tapelev_ini_bibj_k_3_the_main_loop_theta',40,
     $5,3,theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,
     $kkey )
            call adread ( mythid,
     &            'tapelev_ini_bibj_k_4_the_main_loop_salt',39,5,
     $4,salt,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,kkey )
            help_j = k-1
            call adread ( mythid,
     &            'tapelev_ini_bibj_k_5_the_main_loop_rhokm1',41,
     $5,5,rhokm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly)),kkey )
            call adread ( mythid,
     &            'tapelev_ini_bibj_k_6_the_main_loop_rhok',39,5,
     $6,rhok,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly)),kkey )
            call adconvect( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $mytime,adrhokm1,adrhok )
            call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,help_j,eostype,
     $theta,salt,adtheta,adsalt,adrhok )
            call adread ( mythid,
     &            'tapelev_ini_bibj_k_1_the_main_loop_theta',40,
     $5,1,theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,
     $kkey )
            call adread ( mythid,
     &            'tapelev_ini_bibj_k_2_the_main_loop_salt',39,5,
     $2,salt,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,kkey )
            call adfind_rho( bi,bj,imin,imax,jmin,jmax,help_h,help_i,
     $eostype,theta,salt,adtheta,adsalt,adrhokm1 )
          end do
        endif
      endif

      end


      subroutine mdconvective_adjustment_ini( bi, bj, imin, imax, jmin, 
     $jmax, mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision convectcount(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer help_h
      integer help_i
      integer help_j
      integer k
      integer kkey
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C**********************************************
C executable statements of routine
C**********************************************
      if (different_multiple(cadjfreq,mytime,mytime-deltatclock)) then
        k = nr
        act1 = bi-mybxlo(mythid)
        max1 = mybxhi(mythid)-mybxlo(mythid)+1
        act2 = bj-mybylo(mythid)
        max2 = mybyhi(mythid)-mybylo(mythid)+1
        act3 = mythid-1
        max3 = ntx*nty
        act4 = 0
        ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
        if ( .not. usekpp) then
          do k = 2, nr
            kkey = (ikey-1)*nr+k
            call adwrite( mythid,
     &            'tapelev_ini_bibj_k_1_the_main_loop_theta',40,
     $5,1,theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,
     $kkey )
            call adwrite( mythid,
     &            'tapelev_ini_bibj_k_2_the_main_loop_salt',39,
     $5,2,salt,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,
     $kkey )
            help_h = k-1
            help_i = k-1
            call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,help_i,
     $eostype,theta,salt,rhokm1,mythid )
            call adwrite( mythid,
     &            'tapelev_ini_bibj_k_3_the_main_loop_theta',40,
     $5,3,theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,
     $kkey )
            call adwrite( mythid,
     &            'tapelev_ini_bibj_k_4_the_main_loop_salt',39,
     $5,4,salt,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,
     $kkey )
            help_j = k-1
            call find_rho( bi,bj,imin,imax,jmin,jmax,k,help_j,eostype,
     $theta,salt,rhok,mythid )
            call adwrite( mythid,
     &            'tapelev_ini_bibj_k_5_the_main_loop_rhokm1',
     $41,5,5,rhokm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly)),kkey )
            call adwrite( mythid,
     &            'tapelev_ini_bibj_k_6_the_main_loop_rhok',39,
     $5,6,rhok,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly)),kkey )
            call convect( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $convectcount,mytime,myiter,mythid )
          end do
        endif
      endif
      end


      subroutine adcorrection_step( bi, bj, imin, imax, jmin, jmax, k, 
     $adphisurfx, adphisurfy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C declare local variables
C==============================================
      double precision hxfac
      double precision hyfac
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      hxfac = pffacmom
      hyfac = pffacmom
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)+adgvnm1(i,j,k,bi,bj)
          adgvnm1(i,j,k,bi,bj) = 0.d0
          adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+advvel(i,j,k,bi,
     $bj)*masks(i,j,k,bi,bj)
          adphisurfy(i,j) = adphisurfy(i,j)-advvel(i,j,k,bi,bj)*
     $deltatmom*hyfac*implicsurfpress*masks(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)+adgunm1(i,j,k,bi,bj)
          adgunm1(i,j,k,bi,bj) = 0.d0
          adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+aduvel(i,j,k,bi,
     $bj)*maskw(i,j,k,bi,bj)
          adphisurfx(i,j) = adphisurfx(i,j)-aduvel(i,j,k,bi,bj)*
     $deltatmom*hxfac*implicsurfpress*maskw(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine adcost_aqh( startrec, endrec, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      double precision tmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /controlvars_r/ tmpfld2d, tmpfld3d

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer endrec
      integer mythid
      integer startrec

C==============================================
C declare local variables
C==============================================
      double precision adfctile
      double precision adtmpx
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnamefld
      integer i
      integer ilfld
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer kk
      logical ladinit
      integer nrec
      double precision tmpx

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile = 0.d0
      adtmpx = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      doglobalread =  .false. 
      ladinit =  .false. 
      nrec = endrec-startrec+1
      if (optimcycle .ge. 0) then
        ilfld = ilnblnk(xx_aqh_file)
        write(unit=fnamefld(1:80),fmt='(2a,i10.10)') xx_aqh_file(1:
     $ilfld),'.',optimcycle
      endif
      do irec = nrec, 1, -1
        call active_read_xy( fnamefld,tmpfld2d,irec,doglobalread,
     $ladinit,optimcycle,mythid,xx_aqh_dummy )
        do bj = jtlo, jthi
          adfctile = 0.d0
          adtmpx = 0.d0
          do bi = itlo, ithi
            adfctile = 0.d0
            adtmpx = 0.d0
            kk = 1
            adfctile = adfctile+adobjf_aqh(bi,bj)
            do j = jmin, jmax
              adtmpx = 0.d0
              do i = imin, imax
                adtmpx = 0.d0
                if (hfacc(i,j,kk,bi,bj) .ne. 0.) then
                  tmpx = tmpfld2d(i,j,bi,bj)
                  adtmpx = adtmpx+2*adfctile*waqh(i,j,bi,bj)*cosphi(i,j,
     $bi,bj)*tmpx
                  adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adtmpx
                  adtmpx = 0.d0
                endif
              end do
            end do
            adfctile = 0.d0
          end do
        end do
        call adactive_read_xy( fnamefld,irec,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      end do

      end


      subroutine adcost_atemp( startrec, endrec, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      double precision tmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /controlvars_r/ tmpfld2d, tmpfld3d

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer endrec
      integer mythid
      integer startrec

C==============================================
C declare local variables
C==============================================
      double precision adfctile
      double precision adtmpx
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnamefld
      integer i
      integer ilfld
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer kk
      logical ladinit
      integer nrec
      double precision tmpx

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile = 0.d0
      adtmpx = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      doglobalread =  .false. 
      ladinit =  .false. 
      nrec = endrec-startrec+1
      if (optimcycle .ge. 0) then
        ilfld = ilnblnk(xx_atemp_file)
        write(unit=fnamefld(1:80),fmt='(2a,i10.10)') xx_atemp_file(1:
     $ilfld),'.',optimcycle
      endif
      do irec = nrec, 1, -1
        call active_read_xy( fnamefld,tmpfld2d,irec,doglobalread,
     $ladinit,optimcycle,mythid,xx_atemp_dummy )
        do bj = jtlo, jthi
          adfctile = 0.d0
          adtmpx = 0.d0
          do bi = itlo, ithi
            adfctile = 0.d0
            adtmpx = 0.d0
            kk = 1
            adfctile = adfctile+adobjf_atemp(bi,bj)
            do j = jmin, jmax
              adtmpx = 0.d0
              do i = imin, imax
                adtmpx = 0.d0
                if (hfacc(i,j,kk,bi,bj) .ne. 0.) then
                  tmpx = tmpfld2d(i,j,bi,bj)
                  adtmpx = adtmpx+2*adfctile*watemp(i,j,bi,bj)*cosphi(i,
     $j,bi,bj)*tmpx
                  adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adtmpx
                  adtmpx = 0.d0
                endif
              end do
            end do
            adfctile = 0.d0
          end do
        end do
        call adactive_read_xy( fnamefld,irec,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      end do

      end


      subroutine adcost_averagesfields( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adxx_aqh_dummy
      double precision adxx_atemp_dummy
      double precision adxx_psbar_mean_dummy
      double precision adxx_salt_dummy
      double precision adxx_sbar_mean_dummy
      double precision adxx_tbar_mean_dummy
      double precision adxx_theta_dummy
      double precision adxx_uwind_dummy
      double precision adxx_vwind_dummy
      common /adctrl_dummy/ adxx_theta_dummy, adxx_salt_dummy, 
     $adxx_atemp_dummy, adxx_aqh_dummy, adxx_uwind_dummy, 
     $adxx_vwind_dummy, adxx_tbar_mean_dummy, adxx_sbar_mean_dummy, 
     $adxx_psbar_mean_dummy

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      integer dayrec
      integer monrec
      integer sum1day
      integer sum1mon
      common /average_i/ sum1day, sum1mon, dayrec, monrec

      character*(max_len_fnam) hfluxbarfile
      character*(max_len_fnam) psbarfile
      character*(max_len_fnam) sbarfile
      character*(max_len_fnam) sfluxbarfile
      character*(max_len_fnam) tauxbarfile
      character*(max_len_fnam) tauybarfile
      character*(max_len_fnam) tbarfile
      character*(max_len_fnam) ubarfile
      character*(max_len_fnam) vbarfile
      character*(max_len_fnam) wbarfile
      common /averages_c/ tbarfile, sbarfile, psbarfile, ubarfile, 
     $vbarfile, wbarfile, tauxbarfile, tauybarfile, hfluxbarfile, 
     $sfluxbarfile

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      logical endofday
      logical endofmonth
      logical first
      character*(128) fnamepsbar
      character*(128) fnamesbar
      character*(128) fnametbar
      integer i
      integer ilps
      integer ils
      integer ilt
      integer imax
      integer imin
      logical inday
      logical inmonth
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical last
      logical startofday
      logical startofmonth

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      call cost_averagesflags( myiter,mytime,mythid,first,startofday,
     $startofmonth,inday,inmonth,last,endofday,endofmonth,sum1day,
     $dayrec,sum1mon,monrec )
      if (first .or. startofmonth) then
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsbar(i,j,
     $k,bi,bj)
                  adsbar(i,j,k,bi,bj) = 0.d0
                end do
              end do
            end do
          end do
        end do
      else if (last .or. endofmonth) then
        if (optimcycle .ge. 0) then
          ils = ilnblnk(sbarfile)
          write(unit=fnamesbar,fmt='(2a,i10.10)') sbarfile(1:ils),'.',
     $optimcycle
        endif
        call adactive_write_xyz( fnamesbar,monrec,optimcycle,mythid,
     $adsbar,adxx_sbar_mean_dummy )
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsbar(i,j,
     $k,bi,bj)/float(sum1mon)
                  adsbar(i,j,k,bi,bj) = adsbar(i,j,k,bi,bj)/
     $float(sum1mon)
                end do
              end do
            end do
          end do
        end do
      else if (inmonth .and. ( .not. (first .or. startofmonth)) .and. ( 
     $.not. (last .or. endofmonth))) then
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsbar(i,j,
     $k,bi,bj)
                end do
              end do
            end do
          end do
        end do
      endif
      if (first .or. startofmonth) then
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtbar(i,
     $j,k,bi,bj)
                  adtbar(i,j,k,bi,bj) = 0.d0
                end do
              end do
            end do
          end do
        end do
      else if (last .or. endofmonth) then
        if (optimcycle .ge. 0) then
          ilt = ilnblnk(tbarfile)
          write(unit=fnametbar,fmt='(2a,i10.10)') tbarfile(1:ilt),'.',
     $optimcycle
        endif
        call adactive_write_xyz( fnametbar,monrec,optimcycle,mythid,
     $adtbar,adxx_tbar_mean_dummy )
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtbar(i,
     $j,k,bi,bj)/float(sum1mon)
                  adtbar(i,j,k,bi,bj) = adtbar(i,j,k,bi,bj)/
     $float(sum1mon)
                end do
              end do
            end do
          end do
        end do
      else if (inmonth .and. ( .not. (first .or. startofmonth)) .and. ( 
     $.not. (last .or. endofmonth))) then
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtbar(i,
     $j,k,bi,bj)
                end do
              end do
            end do
          end do
        end do
      endif
      if (first .or. startofday) then
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do j = jmin, jmax
              do i = imin, imax
                adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adpsbar(i,j,bi,bj)
                adpsbar(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      else if (last .or. endofday) then
        if (optimcycle .ge. 0) then
          ilps = ilnblnk(psbarfile)
          write(unit=fnamepsbar,fmt='(2a,i10.10)') psbarfile(1:ilps),
     $'.',optimcycle
        endif
        call adactive_write_xy( fnamepsbar,dayrec,optimcycle,mythid,
     $adpsbar,adxx_psbar_mean_dummy )
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do j = jmin, jmax
              do i = imin, imax
                adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adpsbar(i,j,bi,bj)
     $/float(sum1day)
                adpsbar(i,j,bi,bj) = adpsbar(i,j,bi,bj)/float(sum1day)
              end do
            end do
          end do
        end do
      else if (inday .and. ( .not. (first .or. startofday)) .and. ( 
     $.not. (last .or. endofday))) then
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do j = jmin, jmax
              do i = imin, imax
                adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adpsbar(i,j,bi,bj)
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adcost_averagesinit
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adxx_aqh_dummy
      double precision adxx_atemp_dummy
      double precision adxx_psbar_mean_dummy
      double precision adxx_salt_dummy
      double precision adxx_sbar_mean_dummy
      double precision adxx_tbar_mean_dummy
      double precision adxx_theta_dummy
      double precision adxx_uwind_dummy
      double precision adxx_vwind_dummy
      common /adctrl_dummy/ adxx_theta_dummy, adxx_salt_dummy, 
     $adxx_atemp_dummy, adxx_aqh_dummy, adxx_uwind_dummy, 
     $adxx_vwind_dummy, adxx_tbar_mean_dummy, adxx_sbar_mean_dummy, 
     $adxx_psbar_mean_dummy

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adpsbar(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adsbar(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtbar(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      adxx_psbar_mean_dummy = 0.d0
      adxx_sbar_mean_dummy = 0.d0
      adxx_tbar_mean_dummy = 0.d0

      end


      subroutine adcost_final( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C declare common blocks
C==============================================
      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      double precision mult_aqh
      double precision mult_argos
      double precision mult_argot
      double precision mult_atemp
      double precision mult_atl
      double precision mult_ctds
      double precision mult_ctdt
      double precision mult_drift
      double precision mult_h
      double precision mult_hflux
      double precision mult_hmean
      double precision mult_obcse
      double precision mult_obcsn
      double precision mult_obcss
      double precision mult_obcsw
      double precision mult_salt
      double precision mult_salt0
      double precision mult_scatx
      double precision mult_scaty
      double precision mult_sdrift
      double precision mult_sflux
      double precision mult_sss
      double precision mult_sst
      double precision mult_tauu
      double precision mult_tauv
      double precision mult_tdrift
      double precision mult_temp
      double precision mult_temp0
      double precision mult_uwind
      double precision mult_vwind
      double precision mult_wdrift
      double precision mult_xbt
      common /cost_aux_r/ mult_hflux, mult_sflux, mult_tauu, mult_tauv, 
     $mult_hmean, mult_h, mult_temp, mult_salt, mult_temp0, mult_salt0, 
     $mult_sst, mult_sss, mult_atl, mult_ctdt, mult_ctds, mult_xbt, 
     $mult_argot, mult_argos, mult_drift, mult_tdrift, mult_sdrift, 
     $mult_wdrift, mult_scatx, mult_scaty, mult_atemp, mult_aqh, 
     $mult_uwind, mult_vwind, mult_obcsn, mult_obcss, mult_obcsw, 
     $mult_obcse

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adf_salth
      double precision adf_sshh
      double precision adf_ssth
      double precision adf_temph
      integer bi
      integer bj
      integer ithi
      integer itlo
      integer jthi
      integer jtlo

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adf_salth = 0.d0
      adf_sshh = 0.d0
      adf_ssth = 0.d0
      adf_temph = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      if (mythid .eq. 1) then
        adobjf_hmean = adobjf_hmean+adfc*mult_hmean
      endif
      call global_adsum_r8( mythid,adf_ssth )
      call global_adsum_r8( mythid,adf_sshh )
      call global_adsum_r8( mythid,adf_salth )
      call global_adsum_r8( mythid,adf_temph )
      call global_adsum_r8( mythid,adfc )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          adobjf_aqh(bi,bj) = adobjf_aqh(bi,bj)+adfc*mult_aqh
          adobjf_atemp(bi,bj) = adobjf_atemp(bi,bj)+adfc*mult_atemp
          adobjf_h(bi,bj) = adobjf_h(bi,bj)+adfc*mult_h
          adobjf_salt(bi,bj) = adobjf_salt(bi,bj)+adfc*mult_salt
          adobjf_sst(bi,bj) = adobjf_sst(bi,bj)+adfc*mult_sst
          adobjf_temp(bi,bj) = adobjf_temp(bi,bj)+adfc*mult_temp
          adobjf_uwind(bi,bj) = adobjf_uwind(bi,bj)+adfc*mult_uwind
          adobjf_vwind(bi,bj) = adobjf_vwind(bi,bj)+adfc*mult_vwind
        end do
      end do

      end


      subroutine adcost_forcing( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer maxcvars
      parameter ( maxcvars = 20 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C declare common blocks
C==============================================
      integer ncvarindex(maxcvars)
      integer ncvarnrmax(maxcvars)
      integer ncvarrecs(maxcvars)
      integer ncvarrecsend(maxcvars)
      integer ncvarrecstart(maxcvars)
      integer ncvarxmax(maxcvars)
      integer ncvarymax(maxcvars)
      integer nvarlength
      integer nvartype
      integer nwetcglobal(nr)
      integer nwetctile(nsx,nsy,nr)
      integer nwetsglobal(nr)
      integer nwetstile(nsx,nsy,nr)
      integer nwetwglobal(nr)
      integer nwetwtile(nsx,nsy,nr)
      common /controlvars_i/ nvartype, nvarlength, ncvarindex, 
     $ncvarrecs, ncvarrecstart, ncvarrecsend, ncvarxmax, ncvarymax, 
     $ncvarnrmax, nwetctile, nwetstile, nwetwtile, nwetcglobal, 
     $nwetsglobal, nwetwglobal

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer endrec
      integer startrec

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      startrec = ncvarrecstart(10)
      endrec = ncvarrecsend(10)
      call adcost_vwind( startrec,endrec,mythid )
      startrec = ncvarrecstart(9)
      endrec = ncvarrecsend(9)
      call adcost_uwind( startrec,endrec,mythid )
      startrec = ncvarrecstart(8)
      endrec = ncvarrecsend(8)
      call adcost_aqh( startrec,endrec,mythid )
      startrec = ncvarrecstart(7)
      endrec = ncvarrecsend(7)
      call adcost_atemp( startrec,endrec,mythid )

      end


      subroutine adcost_hyd( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare arguments
C==============================================
      integer mythid

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call adcost_salt( mythid )
      call adcost_theta( mythid )
      call adcost_sst( mythid )

      end


      subroutine adcost_initvaria
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C declare common blocks
C==============================================
      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      adfc = 0.d0
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_aqh(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_atemp(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_h(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_salt(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_sst(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_temp(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_uwind(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_vwind(ip1,ip2) = 0.d0
        end do
      end do

      end


      subroutine adcost_salt( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) hfluxbarfile
      character*(max_len_fnam) psbarfile
      character*(max_len_fnam) sbarfile
      character*(max_len_fnam) sfluxbarfile
      character*(max_len_fnam) tauxbarfile
      character*(max_len_fnam) tauybarfile
      character*(max_len_fnam) tbarfile
      character*(max_len_fnam) ubarfile
      character*(max_len_fnam) vbarfile
      character*(max_len_fnam) wbarfile
      common /averages_c/ tbarfile, sbarfile, psbarfile, ubarfile, 
     $vbarfile, wbarfile, tauxbarfile, tauybarfile, hfluxbarfile, 
     $sfluxbarfile

      double precision hfluxbar
      double precision psbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sfluxbar
      double precision sfmean
      double precision slmean
      double precision tauxbar
      double precision tauybar
      double precision tbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tfmean
      double precision tlmean
      double precision ubar
      double precision vbar
      double precision wbar
      double precision wfmean
      double precision wlmean
      common /averages_r/ tbar, sbar, psbar, ubar, vbar, wbar, tauxbar, 
     $tauybar, hfluxbar, sfluxbar, slmean, tlmean, wlmean, sfmean, 
     $tfmean, wfmean

      integer hoursperday
      integer minutesperday
      integer minutesperhour
      integer modelenddate(4)
      integer modelintsteps
      integer modeliter0
      integer modeliterend
      integer modelstartdate(4)
      integer modelstepsperday
      integer ndaymonth(12,2)
      integer ndaysleap
      integer ndaysnoleap
      integer nmaxdaymonth
      integer nmonthyear
      integer refdate(4)
      integer secondsperday
      integer secondsperhour
      integer secondsperminute
      common /cal_i/ refdate, nmonthyear, ndaymonth, ndaysnoleap, 
     $ndaysleap, nmaxdaymonth, hoursperday, minutesperday, 
     $minutesperhour, secondsperday, secondsperhour, secondsperminute, 
     $modelstartdate, modelenddate, modeliter0, modeliterend, 
     $modelintsteps, modelstepsperday

      character*(max_len_fnam) argosfile
      character*(max_len_fnam) argotfile
      character*(max_len_fnam) ctdsfile
      character*(max_len_fnam) ctdtfile
      character*(max_len_fnam) ersfile
      character*(max_len_fnam) scatxdatfile
      character*(max_len_fnam) scatydatfile
      character*(max_len_fnam) sdatfile
      character*(max_len_fnam) sssdatfile
      character*(max_len_fnam) sstdatfile
      character*(max_len_fnam) tdatfile
      character*(max_len_fnam) topexfile
      character*(max_len_fnam) topexmeanfile
      character*(max_len_fnam) udriftfile
      character*(max_len_fnam) vdriftfile
      character*(max_len_fnam) xbtfile
      common /cost_data_c/ tdatfile, sdatfile, scatxdatfile, 
     $scatydatfile, sstdatfile, sssdatfile, topexmeanfile, topexfile, 
     $ersfile, ctdtfile, ctdsfile, xbtfile, argotfile, argosfile, 
     $udriftfile, vdriftfile

      double precision argosobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision argotobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdsobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ersmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ersobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatydat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sssdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sssmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tpmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmeanmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision udriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vdriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xbtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /cost_data_r/ tdat, scatxdat, scatydat, sstdat, sssdat, 
     $sstmask, sssmask, tauxmask, tauymask, scatxmask, scatymask, sdat, 
     $tpmean, tpmeanmask, tpobs, tpmask, ersobs, ersmask, ctdtobs, 
     $ctdsobs, xbtobs, argotobs, argosobs, udriftdat, vdriftdat

      integer ndaysrec
      integer nmonsrec
      common /cost_i/ nmonsrec, ndaysrec

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

      integer cost_iprec
      character*(2) cost_yftype
      common /prec_type_cost/ cost_iprec, cost_yftype

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adfctile
      integer bi
      integer bj
      double precision cmask(1-olx:snx+olx,1-oly:sny+oly)
      logical doglobalread
      character*(80) fnamesalt
      integer i
      integer ilsalt
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit
      integer levmon
      integer levoff
      double precision spval

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      spval = -9990.
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        ilsalt = ilnblnk(sbarfile)
        write(unit=fnamesalt(1:80),fmt='(2a,i10.10)') sbarfile(1:ilsalt)
     $,'.',optimcycle
      endif
      do irec = nmonsrec, 1, -1
        call active_read_xyz( fnamesalt,sbar,irec,doglobalread,ladinit,
     $optimcycle,mythid,xx_sbar_mean_dummy )
        levoff = mod(modelstartdate(1)/100,100)
        levmon = irec-1+levoff
        levmon = mod(levmon-1,12)+1
        call mdsreadfield( sdatfile,cost_iprec,cost_yftype,nr,sdat,
     $levmon,mythid )
        do bj = jtlo, jthi
          adfctile = 0.d0
          do bi = itlo, ithi
            adfctile = 0.d0
            adfctile = adfctile+adobjf_salt(bi,bj)
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  cmask(i,j) = 1.d0
                  if (sdat(i,j,k,bi,bj) .eq. 0.) then
                    cmask(i,j) = 0.d0
                  endif
                  if (sdat(i,j,k,bi,bj) .lt. spval) then
                    cmask(i,j) = 0.d0
                  endif
                  if (hfacc(i,j,13,bi,bj) .eq. 0.) then
                    cmask(i,j) = 0.d0
                  endif
                end do
              end do
              do j = jmin, jmax
                do i = imin, imax
                  if (hfacc(i,j,k,bi,bj) .ne. 0.) then
                    adsbar(i,j,k,bi,bj) = adsbar(i,j,k,bi,bj)+2*
     $adfctile*wsalt(k,bi,bj)*cosphi(i,j,bi,bj)*cmask(i,j)*(sbar(i,j,k,
     $bi,bj)-sdat(i,j,k,bi,bj))
                  endif
                end do
              end do
            end do
            adfctile = 0.d0
          end do
        end do
        call adactive_read_xyz( fnamesalt,irec,doglobalread,ladinit,
     $optimcycle,mythid,adsbar )
      end do

      end


      subroutine adcost_ssh( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) hfluxbarfile
      character*(max_len_fnam) psbarfile
      character*(max_len_fnam) sbarfile
      character*(max_len_fnam) sfluxbarfile
      character*(max_len_fnam) tauxbarfile
      character*(max_len_fnam) tauybarfile
      character*(max_len_fnam) tbarfile
      character*(max_len_fnam) ubarfile
      character*(max_len_fnam) vbarfile
      character*(max_len_fnam) wbarfile
      common /averages_c/ tbarfile, sbarfile, psbarfile, ubarfile, 
     $vbarfile, wbarfile, tauxbarfile, tauybarfile, hfluxbarfile, 
     $sfluxbarfile

      double precision hfluxbar
      double precision psbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sfluxbar
      double precision sfmean
      double precision slmean
      double precision tauxbar
      double precision tauybar
      double precision tbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tfmean
      double precision tlmean
      double precision ubar
      double precision vbar
      double precision wbar
      double precision wfmean
      double precision wlmean
      common /averages_r/ tbar, sbar, psbar, ubar, vbar, wbar, tauxbar, 
     $tauybar, hfluxbar, sfluxbar, slmean, tlmean, wlmean, sfmean, 
     $tfmean, wfmean

      double precision argosobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision argotobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdsobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ersmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ersobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatydat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sssdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sssmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tpmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmeanmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision udriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vdriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xbtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /cost_data_r/ tdat, scatxdat, scatydat, sstdat, sssdat, 
     $sstmask, sssmask, tauxmask, tauymask, scatxmask, scatymask, sdat, 
     $tpmean, tpmeanmask, tpobs, tpmask, ersobs, ersmask, ctdtobs, 
     $ctdsobs, xbtobs, argotobs, argosobs, udriftdat, vdriftdat

      integer ndaysrec
      integer nmonsrec
      common /cost_i/ nmonsrec, ndaysrec

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adcostmean
      double precision aderscost
      double precision adjunk
      double precision adoffset
      double precision adpsmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtpcost
      integer bi
      integer bj
      logical doglobalread
      character*(80) fname
      integer i
      integer ilps
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      double precision junk
      logical ladinit
      double precision offset
      double precision offset_sum
      double precision psmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wwwers(1-olx:snx+olx,1-oly:sny+oly)
      double precision wwwtp(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcostmean = 0.d0
      aderscost = 0.d0
      adjunk = 0.d0
      adoffset = 0.d0
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adpsmean(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      adtpcost = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      doglobalread =  .false. 
      ladinit =  .false. 
      ilps = ilnblnk(psbarfile)
      write(unit=fname(1:80),fmt='(2a,i10.10)') psbarfile(1:ilps),'.',
     $optimcycle
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              psmean(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      do irec = 1, ndaysrec
        call active_read_xy( fname,psbar,irec,doglobalread,ladinit,
     $optimcycle,mythid,xx_psbar_mean_dummy )
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do j = jmin, jmax
              do i = imin, imax
                psmean(i,j,bi,bj) = psmean(i,j,bi,bj)+psbar(i,j,bi,bj)*
     $frame(i,j)/float(ndaysrec)
              end do
            end do
          end do
        end do
      end do
      call cost_readtopexmean( mythid )
      offset = 0.d0
      offset_sum = 0.d0
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = 1, sny
            do i = 1, snx
              offset = offset+tpmeanmask(i,j,bi,bj)*cosphi(i,j,bi,bj)*
     $(tpmean(i,j,bi,bj)-psmean(i,j,bi,bj))
              offset_sum = offset_sum+tpmeanmask(i,j,bi,bj)*cosphi(i,j,
     $bi,bj)
            end do
          end do
        end do
      end do
      call global_sum_r8( offset,mythid )
      call global_sum_r8( offset_sum,mythid )
      offset = offset/offset_sum
      do irec = ndaysrec, 1, -1
        call active_read_xy( fname,psbar,irec,doglobalread,ladinit,
     $optimcycle,mythid,xx_psbar_mean_dummy )
        call cost_readtopex( irec,mythid )
        call cost_readers( irec,mythid )
        do bj = jtlo, jthi
          aderscost = 0.d0
          adjunk = 0.d0
          adtpcost = 0.d0
          do bi = itlo, ithi
            aderscost = 0.d0
            adjunk = 0.d0
            adtpcost = 0.d0
            aderscost = aderscost+adobjf_h(bi,bj)
            adtpcost = adtpcost+adobjf_h(bi,bj)
            do j = jmin, jmax
              adjunk = 0.d0
              do i = imin, imax
                adjunk = 0.d0
                wwwers(i,j) = wers(i,j,bi,bj)*cosphi(i,j,bi,bj)
                junk = (psbar(i,j,bi,bj)-psmean(i,j,bi,bj)-ersobs(i,j,
     $bi,bj))*ersmask(i,j,bi,bj)
                adjunk = adjunk+2*aderscost*junk*wwwers(i,j)
                adpsbar(i,j,bi,bj) = adpsbar(i,j,bi,bj)+adjunk*
     $ersmask(i,j,bi,bj)
                adpsmean(i,j,bi,bj) = adpsmean(i,j,bi,bj)-adjunk*
     $ersmask(i,j,bi,bj)
                adjunk = 0.d0
              end do
            end do
            do j = jmin, jmax
              adjunk = 0.d0
              do i = imin, imax
                adjunk = 0.d0
                wwwtp(i,j) = wtp(i,j,bi,bj)*cosphi(i,j,bi,bj)
                junk = (psbar(i,j,bi,bj)-psmean(i,j,bi,bj)-tpobs(i,j,bi,
     $bj))*tpmask(i,j,bi,bj)
                adjunk = adjunk+2*adtpcost*junk*wwwtp(i,j)
                adpsbar(i,j,bi,bj) = adpsbar(i,j,bi,bj)+adjunk*tpmask(i,
     $j,bi,bj)
                adpsmean(i,j,bi,bj) = adpsmean(i,j,bi,bj)-adjunk*
     $tpmask(i,j,bi,bj)
                adjunk = 0.d0
              end do
            end do
            adtpcost = 0.d0
            aderscost = 0.d0
          end do
        end do
        call adactive_read_xy( fname,irec,doglobalread,ladinit,
     $optimcycle,mythid,adpsbar )
      end do
      adcostmean = adcostmean+adobjf_hmean
      adobjf_hmean = 0.d0
      call adcost_ssh_mean( psmean,offset,mythid,adpsmean,adoffset,
     $adcostmean )
      adoffset = adoffset/offset_sum
      call global_adsum_r8( mythid,adoffset )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = 1, sny
            do i = 1, snx
              adpsmean(i,j,bi,bj) = adpsmean(i,j,bi,bj)-adoffset*
     $tpmeanmask(i,j,bi,bj)*cosphi(i,j,bi,bj)
            end do
          end do
        end do
      end do
      do irec = ndaysrec, 1, -1
        do bj = jtlo, jthi
          do bi = itlo, ithi
            do j = jmin, jmax
              do i = imin, imax
                adpsbar(i,j,bi,bj) = adpsbar(i,j,bi,bj)+adpsmean(i,j,bi,
     $bj)*(frame(i,j)/float(ndaysrec))
              end do
            end do
          end do
        end do
        call adactive_read_xy( fname,irec,doglobalread,ladinit,
     $optimcycle,mythid,adpsbar )
      end do

      end


      subroutine adcost_ssh_mean( psmean, offset, mythid, adpsmean, 
     $adoffset, adcostmean )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision argosobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision argotobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdsobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ersmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ersobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatydat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sssdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sssmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tpmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmeanmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision udriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vdriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xbtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /cost_data_r/ tdat, scatxdat, scatydat, sstdat, sssdat, 
     $sstmask, sssmask, tauxmask, tauymask, scatxmask, scatymask, sdat, 
     $tpmean, tpmeanmask, tpobs, tpmask, ersobs, ersmask, ctdtobs, 
     $ctdsobs, xbtobs, argotobs, argosobs, udriftdat, vdriftdat

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

C==============================================
C declare arguments
C==============================================
      double precision adcostmean
      double precision adoffset
      double precision adpsmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer mythid
      double precision offset
      double precision psmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision addiff
      double precision adsumc
      integer bi
      integer bj
      double precision diff
      integer i
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addiff = 0.d0
      adsumc = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      adsumc = adsumc+adcostmean
      adcostmean = 0.d0
      call global_adsum_r8( mythid,adsumc )
      do bj = jtlo, jthi
        addiff = 0.d0
        do bi = itlo, ithi
          addiff = 0.d0
          do j = jmin, jmax
            addiff = 0.d0
            do i = imin, imax
              addiff = 0.d0
              diff = psmean(i,j,bi,bj)-tpmean(i,j,bi,bj)+offset
              addiff = addiff+2*adsumc*diff*wp(i,j,bi,bj)*tpmeanmask(i,
     $j,bi,bj)
              adoffset = adoffset+addiff
              adpsmean(i,j,bi,bj) = adpsmean(i,j,bi,bj)+addiff
              addiff = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adcost_sst( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) hfluxbarfile
      character*(max_len_fnam) psbarfile
      character*(max_len_fnam) sbarfile
      character*(max_len_fnam) sfluxbarfile
      character*(max_len_fnam) tauxbarfile
      character*(max_len_fnam) tauybarfile
      character*(max_len_fnam) tbarfile
      character*(max_len_fnam) ubarfile
      character*(max_len_fnam) vbarfile
      character*(max_len_fnam) wbarfile
      common /averages_c/ tbarfile, sbarfile, psbarfile, ubarfile, 
     $vbarfile, wbarfile, tauxbarfile, tauybarfile, hfluxbarfile, 
     $sfluxbarfile

      double precision hfluxbar
      double precision psbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sfluxbar
      double precision sfmean
      double precision slmean
      double precision tauxbar
      double precision tauybar
      double precision tbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tfmean
      double precision tlmean
      double precision ubar
      double precision vbar
      double precision wbar
      double precision wfmean
      double precision wlmean
      common /averages_r/ tbar, sbar, psbar, ubar, vbar, wbar, tauxbar, 
     $tauybar, hfluxbar, sfluxbar, slmean, tlmean, wlmean, sfmean, 
     $tfmean, wfmean

      double precision argosobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision argotobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdsobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ersmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ersobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatydat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sssdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sssmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tpmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmeanmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision udriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vdriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xbtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /cost_data_r/ tdat, scatxdat, scatydat, sstdat, sssdat, 
     $sstmask, sssmask, tauxmask, tauymask, scatxmask, scatymask, sdat, 
     $tpmean, tpmeanmask, tpobs, tpmask, ersobs, ersmask, ctdtobs, 
     $ctdsobs, xbtobs, argotobs, argosobs, udriftdat, vdriftdat

      integer ndaysrec
      integer nmonsrec
      common /cost_i/ nmonsrec, ndaysrec

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adfctile_sst
      integer bi
      integer bj
      double precision cmask(1-olx:snx+olx,1-oly:sny+oly)
      logical doglobalread
      character*(80) fnametheta
      integer i
      integer iltheta
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit
      double precision spval

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile_sst = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      spval = -9990.
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        iltheta = ilnblnk(tbarfile)
        write(unit=fnametheta(1:80),fmt='(2a,i10.10)') tbarfile(1:
     $iltheta),'.',optimcycle
      endif
      do irec = nmonsrec, 1, -1
        call active_read_xyz( fnametheta,tbar,irec,doglobalread,ladinit,
     $optimcycle,mythid,xx_tbar_mean_dummy )
        do bj = jthi, jtlo, -1
          do bi = ithi, itlo, -1
            k = 1
            call cost_readsstfields( irec,mythid )
            do j = jmin, jmax
              do i = imin, imax
                cmask(i,j) = 1.d0
                if (sstdat(i,j,bi,bj) .eq. 0.) then
                  cmask(i,j) = 0.d0
                endif
                if (sstdat(i,j,bi,bj) .lt. spval) then
                  cmask(i,j) = 0.d0
                endif
                if (hfacc(i,j,13,bi,bj) .eq. 0.) then
                  cmask(i,j) = 0.d0
                endif
              end do
            end do
            adfctile_sst = adfctile_sst+adobjf_sst(bi,bj)
            do j = jmin, jmax
              do i = imin, imax
                if (hfacc(i,j,k,bi,bj) .ne. 0.) then
                  adtbar(i,j,k,bi,bj) = adtbar(i,j,k,bi,bj)+2*
     $adfctile_sst*wsst(i,j,bi,bj)*cosphi(i,j,bi,bj)*cmask(i,j)*(tbar(i,
     $j,k,bi,bj)-sstdat(i,j,bi,bj))*sstmask(i,j,bi,bj)
                endif
              end do
            end do
            adfctile_sst = 0.d0
          end do
        end do
        call adactive_read_xyz( fnametheta,irec,doglobalread,ladinit,
     $optimcycle,mythid,adtbar )
      end do

      end


      subroutine adcost_theta( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) hfluxbarfile
      character*(max_len_fnam) psbarfile
      character*(max_len_fnam) sbarfile
      character*(max_len_fnam) sfluxbarfile
      character*(max_len_fnam) tauxbarfile
      character*(max_len_fnam) tauybarfile
      character*(max_len_fnam) tbarfile
      character*(max_len_fnam) ubarfile
      character*(max_len_fnam) vbarfile
      character*(max_len_fnam) wbarfile
      common /averages_c/ tbarfile, sbarfile, psbarfile, ubarfile, 
     $vbarfile, wbarfile, tauxbarfile, tauybarfile, hfluxbarfile, 
     $sfluxbarfile

      double precision hfluxbar
      double precision psbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sfluxbar
      double precision sfmean
      double precision slmean
      double precision tauxbar
      double precision tauybar
      double precision tbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tfmean
      double precision tlmean
      double precision ubar
      double precision vbar
      double precision wbar
      double precision wfmean
      double precision wlmean
      common /averages_r/ tbar, sbar, psbar, ubar, vbar, wbar, tauxbar, 
     $tauybar, hfluxbar, sfluxbar, slmean, tlmean, wlmean, sfmean, 
     $tfmean, wfmean

      integer hoursperday
      integer minutesperday
      integer minutesperhour
      integer modelenddate(4)
      integer modelintsteps
      integer modeliter0
      integer modeliterend
      integer modelstartdate(4)
      integer modelstepsperday
      integer ndaymonth(12,2)
      integer ndaysleap
      integer ndaysnoleap
      integer nmaxdaymonth
      integer nmonthyear
      integer refdate(4)
      integer secondsperday
      integer secondsperhour
      integer secondsperminute
      common /cal_i/ refdate, nmonthyear, ndaymonth, ndaysnoleap, 
     $ndaysleap, nmaxdaymonth, hoursperday, minutesperday, 
     $minutesperhour, secondsperday, secondsperhour, secondsperminute, 
     $modelstartdate, modelenddate, modeliter0, modeliterend, 
     $modelintsteps, modelstepsperday

      character*(max_len_fnam) argosfile
      character*(max_len_fnam) argotfile
      character*(max_len_fnam) ctdsfile
      character*(max_len_fnam) ctdtfile
      character*(max_len_fnam) ersfile
      character*(max_len_fnam) scatxdatfile
      character*(max_len_fnam) scatydatfile
      character*(max_len_fnam) sdatfile
      character*(max_len_fnam) sssdatfile
      character*(max_len_fnam) sstdatfile
      character*(max_len_fnam) tdatfile
      character*(max_len_fnam) topexfile
      character*(max_len_fnam) topexmeanfile
      character*(max_len_fnam) udriftfile
      character*(max_len_fnam) vdriftfile
      character*(max_len_fnam) xbtfile
      common /cost_data_c/ tdatfile, sdatfile, scatxdatfile, 
     $scatydatfile, sstdatfile, sssdatfile, topexmeanfile, topexfile, 
     $ersfile, ctdtfile, ctdsfile, xbtfile, argotfile, argosfile, 
     $udriftfile, vdriftfile

      double precision argosobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision argotobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdsobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ctdtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ersmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ersobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatydat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision scatymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision sssdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sssmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sstmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauxmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tauymask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tdat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tpmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmean(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpmeanmask(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tpobs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision udriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vdriftdat(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xbtobs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /cost_data_r/ tdat, scatxdat, scatydat, sstdat, sssdat, 
     $sstmask, sssmask, tauxmask, tauymask, scatxmask, scatymask, sdat, 
     $tpmean, tpmeanmask, tpobs, tpmask, ersobs, ersmask, ctdtobs, 
     $ctdsobs, xbtobs, argotobs, argosobs, udriftdat, vdriftdat

      integer ndaysrec
      integer nmonsrec
      common /cost_i/ nmonsrec, ndaysrec

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

      integer cost_iprec
      character*(2) cost_yftype
      common /prec_type_cost/ cost_iprec, cost_yftype

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adfctile
      integer bi
      integer bj
      double precision cmask(1-olx:snx+olx,1-oly:sny+oly)
      logical doglobalread
      character*(80) fnametheta
      integer i
      integer iltheta
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit
      integer levmon
      integer levoff
      double precision spval

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      spval = -9990.
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        iltheta = ilnblnk(tbarfile)
        write(unit=fnametheta(1:80),fmt='(2a,i10.10)') tbarfile(1:
     $iltheta),'.',optimcycle
      endif
      do irec = nmonsrec, 1, -1
        call active_read_xyz( fnametheta,tbar,irec,doglobalread,ladinit,
     $optimcycle,mythid,xx_tbar_mean_dummy )
        levoff = mod(modelstartdate(1)/100,100)
        levmon = irec-1+levoff
        levmon = mod(levmon-1,12)+1
        call mdsreadfield( tdatfile,cost_iprec,cost_yftype,nr,tdat,
     $levmon,mythid )
        do bj = jtlo, jthi
          adfctile = 0.d0
          do bi = itlo, ithi
            adfctile = 0.d0
            adfctile = adfctile+adobjf_temp(bi,bj)
            do k = 1, nr
              do j = jmin, jmax
                do i = imin, imax
                  cmask(i,j) = 1.d0
                  if (tdat(i,j,k,bi,bj) .eq. 0.) then
                    cmask(i,j) = 0.d0
                  endif
                  if (tdat(i,j,k,bi,bj) .lt. spval) then
                    cmask(i,j) = 0.d0
                  endif
                  if (hfacc(i,j,13,bi,bj) .eq. 0.) then
                    cmask(i,j) = 0.d0
                  endif
                end do
              end do
              do j = jmin, jmax
                do i = imin, imax
                  if (hfacc(i,j,k,bi,bj) .ne. 0.) then
                    adtbar(i,j,k,bi,bj) = adtbar(i,j,k,bi,bj)+2*
     $adfctile*wtheta(k,bi,bj)*cosphi(i,j,bi,bj)*cmask(i,j)*(tbar(i,j,k,
     $bi,bj)-tdat(i,j,k,bi,bj))
                  endif
                end do
              end do
            end do
            adfctile = 0.d0
          end do
        end do
        call adactive_read_xyz( fnametheta,irec,doglobalread,ladinit,
     $optimcycle,mythid,adtbar )
      end do

      end


      subroutine adcost_uwind( startrec, endrec, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      double precision tmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /controlvars_r/ tmpfld2d, tmpfld3d

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer endrec
      integer mythid
      integer startrec

C==============================================
C declare local variables
C==============================================
      double precision adfctile
      double precision adtmpx
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnamefld
      integer i
      integer ilfld
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer kk
      logical ladinit
      integer nrec
      double precision tmpx

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile = 0.d0
      adtmpx = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      doglobalread =  .false. 
      ladinit =  .false. 
      nrec = endrec-startrec+1
      if (optimcycle .ge. 0) then
        ilfld = ilnblnk(xx_uwind_file)
        write(unit=fnamefld(1:80),fmt='(2a,i10.10)') xx_uwind_file(1:
     $ilfld),'.',optimcycle
      endif
      do irec = nrec, 1, -1
        call active_read_xy( fnamefld,tmpfld2d,irec,doglobalread,
     $ladinit,optimcycle,mythid,xx_uwind_dummy )
        do bj = jtlo, jthi
          adfctile = 0.d0
          adtmpx = 0.d0
          do bi = itlo, ithi
            adfctile = 0.d0
            adtmpx = 0.d0
            kk = 1
            adfctile = adfctile+adobjf_uwind(bi,bj)
            do j = jmin, jmax
              adtmpx = 0.d0
              do i = imin, imax
                adtmpx = 0.d0
                if (maskw(i,j,kk,bi,bj) .ne. 0.) then
                  tmpx = tmpfld2d(i,j,bi,bj)
                  adtmpx = adtmpx+2*adfctile*wuwind(i,j,bi,bj)*cosphi(i,
     $j,bi,bj)*tmpx
                  adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adtmpx
                  adtmpx = 0.d0
                endif
              end do
            end do
            adfctile = 0.d0
          end do
        end do
        call adactive_read_xy( fnamefld,irec,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      end do

      end


      subroutine adcost_vwind( startrec, endrec, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      double precision tmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /controlvars_r/ tmpfld2d, tmpfld3d

      double precision cosphi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision frame(1-olx:snx+olx,1-oly:sny+oly)
      double precision waqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision watemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wctds(nr,nsx,nsy)
      double precision wctdt(nr,nsx,nsy)
      double precision wers(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision whfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsalt(nr,nsx,nsy)
      double precision wsalt2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wscatx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wscaty(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsfluxmm(1-olx:snx+olx,1-oly:sny+oly)
      double precision wsss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wsst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtauv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wtheta(nr,nsx,nsy)
      double precision wtheta2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wtp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wudrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wuwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvdrift(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision wvwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /cost_weights_r/ frame, cosphi, whflux, wsflux, wtauu, 
     $wtauv, watemp, waqh, wuwind, wvwind, wscatx, wscaty, wtheta, 
     $wtheta2, wsst, wsss, wsalt, wsalt2, wtp, wers, wp, wctdt, wctds, 
     $wudrift, wvdrift, whfluxmm, wsfluxmm

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer endrec
      integer mythid
      integer startrec

C==============================================
C declare local variables
C==============================================
      double precision adfctile
      double precision adtmpx
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnamefld
      integer i
      integer ilfld
      integer imax
      integer imin
      integer irec
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer kk
      logical ladinit
      integer nrec
      double precision tmpx

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfctile = 0.d0
      adtmpx = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1
      jmax = sny
      imin = 1
      imax = snx
      doglobalread =  .false. 
      ladinit =  .false. 
      nrec = endrec-startrec+1
      if (optimcycle .ge. 0) then
        ilfld = ilnblnk(xx_vwind_file)
        write(unit=fnamefld(1:80),fmt='(2a,i10.10)') xx_vwind_file(1:
     $ilfld),'.',optimcycle
      endif
      do irec = nrec, 1, -1
        call active_read_xy( fnamefld,tmpfld2d,irec,doglobalread,
     $ladinit,optimcycle,mythid,xx_vwind_dummy )
        do bj = jtlo, jthi
          adfctile = 0.d0
          adtmpx = 0.d0
          do bi = itlo, ithi
            adfctile = 0.d0
            adtmpx = 0.d0
            kk = 1
            adfctile = adfctile+adobjf_vwind(bi,bj)
            do j = jmin, jmax
              adtmpx = 0.d0
              do i = imin, imax
                adtmpx = 0.d0
                if (masks(i,j,kk,bi,bj) .ne. 0.) then
                  tmpx = tmpfld2d(i,j,bi,bj)
                  adtmpx = adtmpx+2*adfctile*wvwind(i,j,bi,bj)*cosphi(i,
     $j,bi,bj)*tmpx
                  adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adtmpx
                  adtmpx = 0.d0
                endif
              end do
            end do
            adfctile = 0.d0
          end do
        end do
        call adactive_read_xy( fnamefld,irec,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      end do

      end


      subroutine adctrl_getaqh( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adxx_aqh0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_aqh1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_2_r/ adxx_aqh0, adxx_aqh1

      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      logical aqhchanged
      integer aqhcount0
      integer aqhcount1
      double precision aqhfac
      logical aqhfirst
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnameaqh
      integer i
      integer ilaqh
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        ilaqh = ilnblnk(xx_aqh_file)
        write(unit=fnameaqh(1:80),fmt='(2a,i10.10)') xx_aqh_file(1:
     $ilaqh),'.',optimcycle
      endif
      call ctrl_getrec( 'xx_aqh',aqhfac,aqhfirst,aqhchanged,aqhcount0,
     $aqhcount1,mytime,myiter,mythid )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          k = 1
          do j = 1, sny
            do i = 1, snx
              adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              adxx_aqh0(i,j,bi,bj) = adxx_aqh0(i,j,bi,bj)+adaqh(i,j,bi,
     $bj)*aqhfac
              adxx_aqh1(i,j,bi,bj) = adxx_aqh1(i,j,bi,bj)+adaqh(i,j,bi,
     $bj)*(1.d0-aqhfac)
            end do
          end do
        end do
      end do
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adxx_aqh1(i,
     $j,bi,bj)
              adxx_aqh1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnameaqh,aqhcount1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+adxx_aqh0(i,
     $j,bi,bj)
              adxx_aqh0(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnameaqh,aqhcount0,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld2d )

      end


      subroutine adctrl_getatemp( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adxx_atemp0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_atemp1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_1_r/ adxx_atemp0, adxx_atemp1

      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      logical atempchanged
      integer atempcount0
      integer atempcount1
      double precision atempfac
      logical atempfirst
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnameatemp
      integer i
      integer ilatemp
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        ilatemp = ilnblnk(xx_atemp_file)
        write(unit=fnameatemp(1:80),fmt='(2a,i10.10)') xx_atemp_file(1:
     $ilatemp),'.',optimcycle
      endif
      call ctrl_getrec( 'xx_atemp',atempfac,atempfirst,atempchanged,
     $atempcount0,atempcount1,mytime,myiter,mythid )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          k = 1
          do j = 1, sny
            do i = 1, snx
              adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              adxx_atemp0(i,j,bi,bj) = adxx_atemp0(i,j,bi,bj)+adatemp(i,
     $j,bi,bj)*atempfac
              adxx_atemp1(i,j,bi,bj) = adxx_atemp1(i,j,bi,bj)+adatemp(i,
     $j,bi,bj)*(1.d0-atempfac)
            end do
          end do
        end do
      end do
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+
     $adxx_atemp1(i,j,bi,bj)
              adxx_atemp1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnameatemp,atempcount1,doglobalread,
     $ladinit,optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+
     $adxx_atemp0(i,j,bi,bj)
              adxx_atemp0(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnameatemp,atempcount0,doglobalread,
     $ladinit,optimcycle,mythid,adtmpfld2d )

      end


      subroutine adctrl_getuwind( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adxx_uwind0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_uwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_3_r/ adxx_uwind0, adxx_uwind1

      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnameuwind
      integer i
      integer iluwind
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit
      logical uwindchanged
      integer uwindcount0
      integer uwindcount1
      double precision uwindfac
      logical uwindfirst

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        iluwind = ilnblnk(xx_uwind_file)
        write(unit=fnameuwind(1:80),fmt='(2a,i10.10)') xx_uwind_file(1:
     $iluwind),'.',optimcycle
      endif
      call ctrl_getrec( 'xx_uwind',uwindfac,uwindfirst,uwindchanged,
     $uwindcount0,uwindcount1,mytime,myiter,mythid )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          k = 1
          do j = 1, sny
            do i = 1, snx
              aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)*maskw(i,j,k,bi,bj)
              adxx_uwind0(i,j,bi,bj) = adxx_uwind0(i,j,bi,bj)+aduwind(i,
     $j,bi,bj)*uwindfac
              adxx_uwind1(i,j,bi,bj) = adxx_uwind1(i,j,bi,bj)+aduwind(i,
     $j,bi,bj)*(1.d0-uwindfac)
            end do
          end do
        end do
      end do
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+
     $adxx_uwind1(i,j,bi,bj)
              adxx_uwind1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnameuwind,uwindcount1,doglobalread,
     $ladinit,optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+
     $adxx_uwind0(i,j,bi,bj)
              adxx_uwind0(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnameuwind,uwindcount0,doglobalread,
     $ladinit,optimcycle,mythid,adtmpfld2d )

      end


      subroutine adctrl_getvwind( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adxx_vwind0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_vwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_4_r/ adxx_vwind0, adxx_vwind1

      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      logical doglobalread
      character*(80) fnamevwind
      integer i
      integer ilvwind
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit
      logical vwindchanged
      integer vwindcount0
      integer vwindcount1
      double precision vwindfac
      logical vwindfirst

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      if (optimcycle .ge. 0) then
        ilvwind = ilnblnk(xx_vwind_file)
        write(unit=fnamevwind(1:80),fmt='(2a,i10.10)') xx_vwind_file(1:
     $ilvwind),'.',optimcycle
      endif
      call ctrl_getrec( 'xx_vwind',vwindfac,vwindfirst,vwindchanged,
     $vwindcount0,vwindcount1,mytime,myiter,mythid )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          k = 1
          do j = 1, sny
            do i = 1, snx
              advwind(i,j,bi,bj) = advwind(i,j,bi,bj)*masks(i,j,k,bi,bj)
              adxx_vwind0(i,j,bi,bj) = adxx_vwind0(i,j,bi,bj)+advwind(i,
     $j,bi,bj)*vwindfac
              adxx_vwind1(i,j,bi,bj) = adxx_vwind1(i,j,bi,bj)+advwind(i,
     $j,bi,bj)*(1.d0-vwindfac)
            end do
          end do
        end do
      end do
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+
     $adxx_vwind1(i,j,bi,bj)
              adxx_vwind1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnamevwind,vwindcount1,doglobalread,
     $ladinit,optimcycle,mythid,adtmpfld2d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do j = jmin, jmax
            do i = imin, imax
              adtmpfld2d(i,j,bi,bj) = adtmpfld2d(i,j,bi,bj)+
     $adxx_vwind0(i,j,bi,bj)
              adxx_vwind0(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adactive_read_xy( fnamevwind,vwindcount0,doglobalread,
     $ladinit,optimcycle,mythid,adtmpfld2d )

      end


      subroutine adctrl_map( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      character*(max_len_fnam) xx_aqh_file
      character*(max_len_fnam) xx_atemp_file
      character*(max_len_fnam) xx_hflux_file
      character*(max_len_fnam) xx_obcse_file
      character*(max_len_fnam) xx_obcsn_file
      character*(max_len_fnam) xx_obcss_file
      character*(max_len_fnam) xx_obcsw_file
      character*(max_len_fnam) xx_salt_file
      character*(max_len_fnam) xx_sflux_file
      character*(max_len_fnam) xx_tauu_file
      character*(max_len_fnam) xx_tauv_file
      character*(max_len_fnam) xx_theta_file
      character*(max_len_fnam) xx_uwind_file
      character*(max_len_fnam) xx_vwind_file
      common /controlfiles_c/ xx_theta_file, xx_salt_file, 
     $xx_hflux_file, xx_sflux_file, xx_tauu_file, xx_tauv_file, 
     $xx_atemp_file, xx_aqh_file, xx_uwind_file, xx_vwind_file, 
     $xx_obcsn_file, xx_obcss_file, xx_obcsw_file, xx_obcse_file

      double precision tmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /controlvars_r/ tmpfld2d, tmpfld3d

      double precision xx_aqh_dummy
      double precision xx_atemp_dummy
      double precision xx_hflux_dummy
      double precision xx_hflux_mean_dummy
      double precision xx_obcse_dummy
      double precision xx_obcsn_dummy
      double precision xx_obcss_dummy
      double precision xx_obcsw_dummy
      double precision xx_psbar_dummy
      double precision xx_psbar_mean_dummy
      double precision xx_salt_dummy
      double precision xx_sbar_mean_dummy
      double precision xx_sflux_dummy
      double precision xx_sflux_mean_dummy
      double precision xx_tauu_dummy
      double precision xx_tauv_dummy
      double precision xx_taux_mean_dummy
      double precision xx_tauy_mean_dummy
      double precision xx_tbar_mean_dummy
      double precision xx_theta_dummy
      double precision xx_ubar_mean_dummy
      double precision xx_uwind_dummy
      double precision xx_vbar_mean_dummy
      double precision xx_vwind_dummy
      double precision xx_wbar_mean_dummy
      common /ctrl_dummy/ xx_theta_dummy, xx_salt_dummy, xx_hflux_dummy,
     $ xx_sflux_dummy, xx_tauu_dummy, xx_tauv_dummy, xx_atemp_dummy, 
     $xx_aqh_dummy, xx_uwind_dummy, xx_vwind_dummy, xx_obcsn_dummy, 
     $xx_obcss_dummy, xx_obcsw_dummy, xx_obcse_dummy, xx_psbar_dummy, 
     $xx_tbar_mean_dummy, xx_sbar_mean_dummy, xx_ubar_mean_dummy, 
     $xx_vbar_mean_dummy, xx_wbar_mean_dummy, xx_psbar_mean_dummy, 
     $xx_taux_mean_dummy, xx_tauy_mean_dummy, xx_hflux_mean_dummy, 
     $xx_sflux_mean_dummy

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      integer iprint
      integer nfunc
      integer numiter
      integer nupdate
      integer nvars
      integer optimcycle
      common /optiparm_i/ optimcycle, nvars, numiter, nfunc, iprint, 
     $nupdate

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      logical doglobalread
      double precision fac
      character*(80) fnamesalt
      character*(80) fnametheta
      integer i
      integer il
      integer imax
      integer imin
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer k
      logical ladinit

C==============================================
C declare external procedures and functions
C==============================================
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      doglobalread =  .false. 
      ladinit =  .false. 
      fac = 1.d0
      il = ilnblnk(xx_theta_file)
      write(unit=fnametheta(1:80),fmt='(2a,i10.10)') xx_theta_file(1:il)
     $,'.',optimcycle
      call active_read_xyz( fnametheta,tmpfld3d,1,doglobalread,ladinit,
     $optimcycle,mythid,xx_theta_dummy )
      il = ilnblnk(xx_salt_file)
      write(unit=fnamesalt(1:80),fmt='(2a,i10.10)') xx_salt_file(1:il),
     $'.',optimcycle
      call adexch_xyz_rl( mythid,adsalt )
      call adexch_xyz_rl( mythid,adtheta )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do k = 1, nr
            do j = jmin, jmax
              do i = imin, imax
                adtmpfld3d(i,j,k,bi,bj) = adtmpfld3d(i,j,k,bi,bj)+
     $adsalt(i,j,k,bi,bj)*fac
              end do
            end do
          end do
        end do
      end do
      call adactive_read_xyz( fnamesalt,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld3d )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          do k = 1, nr
            do j = jmin, jmax
              do i = imin, imax
                theta(i,j,k,bi,bj) = theta(i,j,k,bi,bj)+fac*tmpfld3d(i,
     $j,k,bi,bj)
                if (theta(i,j,k,bi,bj) .lt. (-2.)) then
                  adtheta(i,j,k,bi,bj) = 0.d0
                endif
                adtmpfld3d(i,j,k,bi,bj) = adtmpfld3d(i,j,k,bi,bj)+
     $adtheta(i,j,k,bi,bj)*fac
              end do
            end do
          end do
        end do
      end do
      call adactive_read_xyz( fnametheta,1,doglobalread,ladinit,
     $optimcycle,mythid,adtmpfld3d )

      end


      subroutine adcycle_tracer( bi, bj, imin, imax, jmin, jmax, k, 
     $adtracer, adgtracer, adgtrnm1 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adgtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtrnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adgtracer(i,j,k,bi,bj) = adgtracer(i,j,k,bi,bj)+adtracer(i,j,
     $k,bi,bj)
          adtracer(i,j,k,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine addiffus( diffa, heffm, deltt, mythid, adheff )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cstice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision csuice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxuice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dytice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyuice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sineice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tngice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tngtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /seaice_grid/ tngtice, tngice, cstice, csuice, sineice, 
     $dxtice, dxuice, dytice, dyuice

C==============================================
C declare arguments
C==============================================
      double precision adheff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision deltt
      double precision diffa(1-olx:snx+olx,1-oly:sny+oly)
      double precision heffm(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adheff1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      double precision deltxx
      double precision deltxx1
      double precision deltyy
      double precision deltyy1
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adheff1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adheff1(i,j,bi,bj) = adheff1(i,j,bi,bj)+adheff(i,j,3,bi,
     $bj)
              adheff(i,j,3,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adexch_xy_rl( mythid,adheff1 )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              deltxx1 = deltt*diffa(i,j)
              deltyy1 = deltt*diffa(i,j)
              deltxx = deltxx1/(dxtice(i,j,bi,bj)*dxtice(i,j,bi,bj)*
     $cstice(i,j,bi,bj)*cstice(i,j,bi,bj))
              deltyy = deltyy1/(dytice(i,j,bi,bj)*dytice(i,j,bi,bj)*
     $cstice(i,j,bi,bj))
              adheff(i,j-1,3,bi,bj) = adheff(i,j-1,3,bi,bj)+adheff1(i,j,
     $bi,bj)*deltyy*csuice(i,j-1,bi,bj)*heffm(i,j-1,bi,bj)
              adheff(i,j+1,3,bi,bj) = adheff(i,j+1,3,bi,bj)+adheff1(i,j,
     $bi,bj)*deltyy*csuice(i,j,bi,bj)*heffm(i,j+1,bi,bj)
              adheff(i-1,j,3,bi,bj) = adheff(i-1,j,3,bi,bj)+adheff1(i,j,
     $bi,bj)*deltxx*heffm(i-1,j,bi,bj)
              adheff(i+1,j,3,bi,bj) = adheff(i+1,j,3,bi,bj)+adheff1(i,j,
     $bi,bj)*deltxx*heffm(i+1,j,bi,bj)
              adheff(i,j,3,bi,bj) = adheff(i,j,3,bi,bj)-adheff1(i,j,bi,
     $bj)*(deltxx*(heffm(i+1,j,bi,bj)+heffm(i-1,j,bi,bj))+deltyy*
     $(csuice(i,j,bi,bj)*heffm(i,j+1,bi,bj)+csuice(i,j-1,bi,bj)*heffm(i,
     $j-1,bi,bj)))
              adheff1(i,j,bi,bj) = 0.d0
            end do
          end do
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adheff1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine addo_fields_blocking_exchanges( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

C==============================================
C declare arguments
C==============================================
      integer mythid

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call adexch_xyz_rl( mythid,advveld )
      call adexch_xyz_rl( mythid,aduveld )
      call adexch_xyz_rl( mythid,adsalt )
      call adexch_xyz_rl( mythid,adtheta )
      call adexch_uv_xyz_rl(  .true. ,mythid,aduvel,advvel )

      end


      subroutine addynamics( myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      real*4 comlev1_bibj_gunm1_5h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadgunm1/ comlev1_bibj_gunm1_5h

      real*4 comlev1_bibj_gvnm1_6h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadgvnm1/ comlev1_bibj_gvnm1_6h

      real*4 comlev1_bibj_kppviscaz_4h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppviscaz/ comlev1_bibj_kppviscaz_4h

      real*4 comlev1_bibj_uvel_2h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduvel/ comlev1_bibj_uvel_2h

      real*4 comlev1_bibj_uveld_8h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduveld/ comlev1_bibj_uveld_8h

      real*4 comlev1_bibj_vvel_3h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvvel/ comlev1_bibj_vvel_3h

      real*4 comlev1_bibj_vveld_7h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvveld/ comlev1_bibj_vveld_7h

      real*4 comlev1_bibj_wvel_1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadwvel/ comlev1_bibj_wvel_1h

      double precision etanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision unm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_cd/ uveld, vveld, etanm1, unm1, vnm1, gucd, gvcd

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adfveruh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),2)
      double precision adfverui(1+snx+olx-(1-olx),1+sny+oly-(1-oly),2)
      double precision adfvervh(1+snx+olx-(1-olx),1+sny+oly-(1-oly),2)
      double precision adfvervi(1+snx+olx-(1-olx),1+sny+oly-(1-oly),2)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kup
      integer max1
      integer max2
      integer max3

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = 1, 2
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            adfveruh(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            adfverui(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            adfvervh(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            adfvervi(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkapparu(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkapparv(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adphihyd(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfy(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          imin = 1-olx+2
          imax = snx+olx-1
          jmin = 1-oly+2
          jmax = sny+oly-1
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                wvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_wvel_1h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_uvel_2h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_vvel_3h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppviscaz(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kppviscaz_4h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do k = 1, nr
            call calc_viscosity( bi,bj,imin,imax,jmin,jmax,k,kapparu,
     $kapparv,mythid )
          end do
          if (implicitviscosity .and. momstepping) then
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gunm1(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_gunm1_5h(ip1,ip2,ip3,ikey)
                end do
              end do
            end do
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gvnm1(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_gvnm1_6h(ip1,ip2,ip3,ikey)
                end do
              end do
            end do
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  vveld(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_vveld_7h(ip1,ip2,ip3,ikey)
                end do
              end do
            end do
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  uveld(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_uveld_8h(ip1,ip2,ip3,ikey)
                end do
              end do
            end do
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparv,recip_hfacs,uveld,adkapparv,aduveld )
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparu,recip_hfacw,vveld,adkapparu,advveld )
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparv,recip_hfacs,gvnm1,adkapparv,adgvnm1 )
            call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,
     $kapparu,recip_hfacw,gunm1,adkapparu,adgunm1 )
          endif
          do k = nr, 1, -1
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            if (momstepping) then
              call adtimestep( bi,bj,imin,imax,jmin,jmax,k,myiter,
     $adphihyd,adphisurfx,adphisurfy )
              if (vectorinvariantmomentum) then
                call admom_vecinv( bi,bj,imin,imax,jmin,jmax,k,kup,
     $kdown,kapparu,kapparv,adphihyd,adkapparu,adkapparv,adfveruh,
     $adfvervh )
              endif
              if ( .not. vectorinvariantmomentum) then
                call admom_fluxform( bi,bj,imin,imax,jmin,jmax,k,kup,
     $kdown,kapparu,kapparv,adphihyd,adkapparu,adkapparv,adfverui,
     $adfvervi )
              endif
            else
              do j = 1-oly, sny+oly
                do i = 1-olx, snx+olx
                  adgvcd(i,j,k,bi,bj) = 0.d0
                  adgucd(i,j,k,bi,bj) = 0.d0
                end do
              end do
            endif
            if (staggertimestep) then
              call adcalc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,mythid,
     $adgt,adgs,adphihyd )
            else
              call adcalc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,mythid,
     $adtheta,adsalt,adphihyd )
            endif
          end do
          do k = nr, 1, -1
            call adcalc_viscosity( bi,bj,imin,imax,jmin,jmax,k,
     $adkapparu,adkapparv )
          end do
          if (implicsurfpress .ne. 1.) then
            call adcalc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,adetan,
     $adphisurfx,adphisurfy )
          endif
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              do k = 1, nr
                adphihyd(i,j,k) = 0.d0
              end do
            end do
          end do
        end do
      end do

      end


      subroutine mddynamics( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_gunm1_5h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadgunm1/ comlev1_bibj_gunm1_5h

      real*4 comlev1_bibj_gvnm1_6h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadgvnm1/ comlev1_bibj_gvnm1_6h

      real*4 comlev1_bibj_kppviscaz_4h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppviscaz/ comlev1_bibj_kppviscaz_4h

      real*4 comlev1_bibj_uvel_2h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduvel/ comlev1_bibj_uvel_2h

      real*4 comlev1_bibj_uveld_8h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduveld/ comlev1_bibj_uveld_8h

      real*4 comlev1_bibj_vvel_3h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvvel/ comlev1_bibj_vvel_3h

      real*4 comlev1_bibj_vveld_7h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvveld/ comlev1_bibj_vveld_7h

      real*4 comlev1_bibj_wvel_1h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadwvel/ comlev1_bibj_wvel_1h

      double precision etanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision unm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_cd/ uveld, vveld, etanm1, unm1, vnm1, gucd, gvcd

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer bi
      integer bj
      double precision fveru(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision fverv(1-olx:snx+olx,1-oly:sny+oly,2)
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kp1
      integer kup
      integer max1
      integer max2
      integer max3
      double precision phihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision phisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision phisurfy(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          phisurfx(i,j) = 0.d0
          phisurfy(i,j) = 0.d0
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              do k = 1, nr
                phihyd(i,j,k) = 0.d0
              end do
              fveru(i,j,1) = 0.d0
              fveru(i,j,2) = 0.d0
              fverv(i,j,1) = 0.d0
              fverv(i,j,2) = 0.d0
            end do
          end do
          imin = 1-olx+2
          imax = snx+olx-1
          jmin = 1-oly+2
          jmax = sny+oly-1
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_wvel_1h(ip1,ip2,ip3,ikey) = wvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          if (implicsurfpress .ne. 1.) then
            call calc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,etan,
     $phisurfx,phisurfy,mythid )
          endif
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_uvel_2h(ip1,ip2,ip3,ikey) = uvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_vvel_3h(ip1,ip2,ip3,ikey) = vvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kppviscaz_4h(ip1,ip2,ip3,ikey) = 
     $kppviscaz(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do k = 1, nr
            call calc_viscosity( bi,bj,imin,imax,jmin,jmax,k,kapparu,
     $kapparv,mythid )
          end do
          do k = 1, nr
            km1 = max(1,k-1)
            kp1 = min(k+1,nr)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            if (staggertimestep) then
              call mdcalc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,gt,gs,
     $phihyd,mythid )
            else
              call mdcalc_phi_hyd( bi,bj,imin,imax,jmin,jmax,k,theta,
     $salt,phihyd,mythid )
            endif
            if (momstepping) then
              if ( .not. vectorinvariantmomentum) then
                call mom_fluxform( bi,bj,imin,imax,jmin,jmax,k,kup,
     $kdown,phihyd,kapparu,kapparv,fveru,fverv,mytime,myiter,mythid )
              endif
              if (vectorinvariantmomentum) then
                call mom_vecinv( bi,bj,imin,imax,jmin,jmax,k,kup,kdown,
     $phihyd,kapparu,kapparv,fveru,fverv,mytime,myiter,mythid )
              endif
              call timestep( bi,bj,imin,imax,jmin,jmax,k,phihyd,
     $phisurfx,phisurfy,myiter,mythid )
            else
              do j = 1-oly, sny+oly
                do i = 1-olx, snx+olx
                  gucd(i,j,k,bi,bj) = 0.
                  gvcd(i,j,k,bi,bj) = 0.
                end do
              end do
            endif
          end do
          if (implicitviscosity .and. momstepping) then
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_gunm1_5h(ip1,ip2,ip3,ikey) = gunm1(ip1-1+
     $1-olx,ip2-1+1-oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparu,
     $recip_hfacw,gunm1,mythid )
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_gvnm1_6h(ip1,ip2,ip3,ikey) = gvnm1(ip1-1+
     $1-olx,ip2-1+1-oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparv,
     $recip_hfacs,gvnm1,mythid )
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_vveld_7h(ip1,ip2,ip3,ikey) = vveld(ip1-1+
     $1-olx,ip2-1+1-oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparu,
     $recip_hfacw,vveld,mythid )
            do ip3 = 1, nr
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_uveld_8h(ip1,ip2,ip3,ikey) = uveld(ip1-1+
     $1-olx,ip2-1+1-oly,ip3,bi,bj)
                end do
              end do
            end do
            call impldiff( bi,bj,imin,imax,jmin,jmax,deltatmom,kapparv,
     $recip_hfacs,uveld,mythid )
          endif
        end do
      end do
      end


      subroutine addynsolver( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision half
      parameter ( half = 0.5d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision one
      parameter ( one = 1.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      double precision zero
      parameter ( zero = 0.d0 )

C==============================================
C declare common blocks
C==============================================
      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      double precision adforcex(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adforcey(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adseaice_dynvars1/ adforcex, adforcey

      double precision adwindx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adwindy(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adwind/ adwindx, adwindy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision uwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_wind_r/ uwind, vwind

      logical seaiceusedynamics
      logical seaiceuselsr
      logical seaicewindoncgrid
      logical seaicewritestate
      common /seaice_parm_l/ seaicewritestate, seaiceusedynamics, 
     $seaiceuselsr, seaicewindoncgrid

      double precision a22
      double precision diff1
      double precision endingyear
      double precision fluxforcingend
      double precision fluxforcingperiod
      double precision fluxforcingstart
      double precision ho
      double precision lsr_error
      double precision seaice_albedo
      double precision seaice_drag
      double precision seaice_drysnowalb
      double precision seaice_dumpfreq
      double precision seaice_emissivity
      double precision seaice_iceconduct
      double precision seaice_latentice
      double precision seaice_latentwater
      double precision seaice_sensheat
      double precision seaice_shortwave
      double precision seaice_snowconduct
      double precision seaice_snowthick
      double precision seaice_strength
      double precision seaice_tavefreq
      double precision seaice_wateralbedo
      double precision seaice_waterdrag
      double precision seaice_wetsnowalb
      double precision sssforcingend
      double precision sssforcingperiod
      double precision sssforcingstart
      double precision sstforcingend
      double precision sstforcingperiod
      double precision sstforcingstart
      double precision startingyear
      double precision windforcingend
      double precision windforcingperiod
      double precision windforcingstart
      common /seaice_parm_rl/ seaice_dumpfreq, seaice_tavefreq, 
     $seaice_drag, seaice_waterdrag, seaice_albedo, seaice_drysnowalb, 
     $seaice_wetsnowalb, seaice_wateralbedo, seaice_strength, 
     $seaice_sensheat, seaice_latentwater, seaice_latentice, 
     $seaice_iceconduct, seaice_snowconduct, seaice_emissivity, 
     $seaice_snowthick, seaice_shortwave, lsr_error, diff1, a22, ho, 
     $windforcingstart, windforcingend, windforcingperiod, 
     $fluxforcingstart, fluxforcingend, fluxforcingperiod, 
     $sstforcingstart, sstforcingend, sstforcingperiod, sssforcingstart,
     $ sssforcingend, sssforcingperiod, startingyear, endingyear

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision aaa
      double precision adaaa
      double precision addairn(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      double precision coswin
      double precision dairn(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer j
      double precision rhoair
      double precision sinwin

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adaaa = 0.d0
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              addairn(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      rhoair = 1.3d0
      sinwin = zero
      coswin = one
      call adostres( mythid )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              adforcey(i,j,bi,bj) = adforcey(i,j,bi,bj)+adwindy(i,j,bi,
     $bj)
              adwindy(i,j,bi,bj) = 0.d0
              adforcex(i,j,bi,bj) = adforcex(i,j,bi,bj)+adwindx(i,j,bi,
     $bj)
              adwindx(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      if (seaicewindoncgrid) then
        do bj = mybylo(mythid), mybyhi(mythid)
          adaaa = 0.d0
          do bi = mybxlo(mythid), mybxhi(mythid)
            adaaa = 0.d0
            do j = 1, sny
              adaaa = 0.d0
              do i = 1, snx
                adaaa = 0.d0
                aaa = sqrt((half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,
     $bj)))**2+(half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))**2)
                dairn(i,j,bi,bj) = rhoair*seaice_drag*(2.7d0+0.142d0*
     $aaa+0.0764d0*aaa*aaa)
                addairn(i,j,bi,bj) = addairn(i,j,bi,bj)+adforcey(i,j,bi,
     $bj)*(sinwin*half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj))+coswin*
     $half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))
                aduwind(i+1,j+1,bi,bj) = aduwind(i+1,j+1,bi,bj)+
     $adforcey(i,j,bi,bj)*dairn(i,j,bi,bj)*sinwin*half
                aduwind(i+1,j,bi,bj) = aduwind(i+1,j,bi,bj)+adforcey(i,
     $j,bi,bj)*dairn(i,j,bi,bj)*sinwin*half
                advwind(i+1,j+1,bi,bj) = advwind(i+1,j+1,bi,bj)+
     $adforcey(i,j,bi,bj)*dairn(i,j,bi,bj)*coswin*half
                advwind(i,j+1,bi,bj) = advwind(i,j+1,bi,bj)+adforcey(i,
     $j,bi,bj)*dairn(i,j,bi,bj)*coswin*half
                adforcey(i,j,bi,bj) = 0.d0
                addairn(i,j,bi,bj) = addairn(i,j,bi,bj)+adforcex(i,j,bi,
     $bj)*(coswin*half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj))-sinwin*
     $half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))
                aduwind(i+1,j+1,bi,bj) = aduwind(i+1,j+1,bi,bj)+
     $adforcex(i,j,bi,bj)*dairn(i,j,bi,bj)*coswin*half
                aduwind(i+1,j,bi,bj) = aduwind(i+1,j,bi,bj)+adforcex(i,
     $j,bi,bj)*dairn(i,j,bi,bj)*coswin*half
                advwind(i+1,j+1,bi,bj) = advwind(i+1,j+1,bi,bj)-
     $adforcex(i,j,bi,bj)*dairn(i,j,bi,bj)*sinwin*half
                advwind(i,j+1,bi,bj) = advwind(i,j+1,bi,bj)-adforcex(i,
     $j,bi,bj)*dairn(i,j,bi,bj)*sinwin*half
                adforcex(i,j,bi,bj) = 0.d0
                adaaa = adaaa+addairn(i,j,bi,bj)*rhoair*seaice_drag*
     $(0.142d0+0.1528d0*aaa)
                addairn(i,j,bi,bj) = 0.d0
                aduwind(i+1,j+1,bi,bj) = aduwind(i+1,j+1,bi,bj)+2*adaaa*
     $1./(2.*sqrt((half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj)))**2+
     $(half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))**2))*half*half*
     $(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj))
                aduwind(i+1,j,bi,bj) = aduwind(i+1,j,bi,bj)+2*adaaa*1./
     $(2.*sqrt((half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj)))**2+
     $(half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))**2))*half*half*
     $(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj))
                advwind(i+1,j+1,bi,bj) = advwind(i+1,j+1,bi,bj)+2*adaaa*
     $1./(2.*sqrt((half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj)))**2+
     $(half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))**2))*half*half*
     $(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj))
                advwind(i,j+1,bi,bj) = advwind(i,j+1,bi,bj)+2*adaaa*1./
     $(2.*sqrt((half*(uwind(i+1,j,bi,bj)+uwind(i+1,j+1,bi,bj)))**2+
     $(half*(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj)))**2))*half*half*
     $(vwind(i,j+1,bi,bj)+vwind(i+1,j+1,bi,bj))
                adaaa = 0.d0
              end do
            end do
          end do
        end do
      else
        do bj = mybylo(mythid), mybyhi(mythid)
          adaaa = 0.d0
          do bi = mybxlo(mythid), mybxhi(mythid)
            adaaa = 0.d0
            do j = 1, sny
              adaaa = 0.d0
              do i = 1, snx
                adaaa = 0.d0
                aaa = sqrt(uwind(i,j,bi,bj)**2+vwind(i,j,bi,bj)**2)
                dairn(i,j,bi,bj) = rhoair*seaice_drag*(2.7d0+0.142d0*
     $aaa+0.0764d0*aaa*aaa)
                addairn(i,j,bi,bj) = addairn(i,j,bi,bj)+adforcey(i,j,bi,
     $bj)*(sinwin*uwind(i,j,bi,bj)+coswin*vwind(i,j,bi,bj))
                aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)+adforcey(i,j,bi,
     $bj)*dairn(i,j,bi,bj)*sinwin
                advwind(i,j,bi,bj) = advwind(i,j,bi,bj)+adforcey(i,j,bi,
     $bj)*dairn(i,j,bi,bj)*coswin
                adforcey(i,j,bi,bj) = 0.d0
                addairn(i,j,bi,bj) = addairn(i,j,bi,bj)+adforcex(i,j,bi,
     $bj)*(coswin*uwind(i,j,bi,bj)-sinwin*vwind(i,j,bi,bj))
                aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)+adforcex(i,j,bi,
     $bj)*dairn(i,j,bi,bj)*coswin
                advwind(i,j,bi,bj) = advwind(i,j,bi,bj)-adforcex(i,j,bi,
     $bj)*dairn(i,j,bi,bj)*sinwin
                adforcex(i,j,bi,bj) = 0.d0
                adaaa = adaaa+addairn(i,j,bi,bj)*rhoair*seaice_drag*
     $(0.142d0+0.1528d0*aaa)
                addairn(i,j,bi,bj) = 0.d0
                aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)+2*adaaa*1./(2.*
     $sqrt(uwind(i,j,bi,bj)**2+vwind(i,j,bi,bj)**2))*uwind(i,j,bi,bj)
                advwind(i,j,bi,bj) = advwind(i,j,bi,bj)+2*adaaa*1./(2.*
     $sqrt(uwind(i,j,bi,bj)**2+vwind(i,j,bi,bj)**2))*vwind(i,j,bi,bj)
                adaaa = 0.d0
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adecco_init( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      integer mythid

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call barrier( mythid )
      call barrier( mythid )
      call barrier( mythid )
      call adctrl_map( mythid )
      call adcost_averagesinit
      call adcost_initvaria

      end


      subroutine adenhance( dkm1, hbl, kbl, diffus, casea, ghat, blmc, 
     $addkm1, adhbl, addiffus, adcasea, adghat, adblmc )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C declare common blocks
C==============================================
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision adblmc(imt,nr,mdiff)
      double precision adcasea(imt)
      double precision addiffus(imt,0:nrp1,mdiff)
      double precision addkm1(imt,mdiff)
      double precision adghat(imt,nr)
      double precision adhbl(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dkm1(imt,mdiff)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer kbl(imt)

C==============================================
C declare local variables
C==============================================
      double precision addelta
      double precision addkmp5
      double precision addstar
      double precision delta
      double precision dkmp5
      double precision dstar
      integer i
      integer ki
      integer md

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addelta = 0.d0
      addkmp5 = 0.d0
      addstar = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        addelta = 0.d0
        addkmp5 = 0.d0
        addstar = 0.d0
        ki = kbl(i)-1
        if (ki .ge. 1 .and. ki .lt. nr) then
          delta = (hbl(i)+zgrid(ki))/(zgrid(ki)-zgrid(ki+1))
          adcasea(i) = adcasea(i)-adghat(i,ki)*ghat(i,ki)
          adghat(i,ki) = adghat(i,ki)*(1.-casea(i))
          do md = 1, mdiff
            addkmp5 = 0.d0
            addstar = 0.d0
            dkmp5 = casea(i)*diffus(i,ki,md)+(1.-casea(i))*blmc(i,ki,md)
            dstar = (1.-delta)**2*dkm1(i,md)+delta**2*dkmp5
            addelta = addelta+adblmc(i,ki,md)*((-diffus(i,ki,md))+dstar)
            addiffus(i,ki,md) = addiffus(i,ki,md)+adblmc(i,ki,md)*(1.-
     $delta)
            addstar = addstar+adblmc(i,ki,md)*delta
            adblmc(i,ki,md) = 0.d0
            addelta = addelta+addstar*((-2)*(1.-delta)*dkm1(i,md)+2*
     $delta*dkmp5)
            addkm1(i,md) = addkm1(i,md)+addstar*(1.-delta)**2
            addkmp5 = addkmp5+addstar*delta**2
            addstar = 0.d0
            adblmc(i,ki,md) = adblmc(i,ki,md)+addkmp5*(1.-casea(i))
            adcasea(i) = adcasea(i)+addkmp5*(diffus(i,ki,md)-blmc(i,ki,
     $md))
            addiffus(i,ki,md) = addiffus(i,ki,md)+addkmp5*casea(i)
            addkmp5 = 0.d0
          end do
          adhbl(i) = adhbl(i)+addelta/(zgrid(ki)-zgrid(ki+1))
          addelta = 0.d0
        endif
      end do

      end


      subroutine adhexf_bulkcdn( umps, adumps, adexf_bulkcdn )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision cdrag_1
      parameter ( cdrag_1 = 0.0027d0 )
      double precision cdrag_3
      parameter ( cdrag_3 = 0.0000764d0 )

C==============================================
C declare arguments
C==============================================
      real*8 adexf_bulkcdn
      double precision adumps
      double precision umps

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      adumps = adumps+adexf_bulkcdn*((-(cdrag_1/(umps*umps)))+cdrag_3)
      adexf_bulkcdn = 0.

      end


      subroutine adhexf_bulkqsat( tkelvin, adtkelvin, adexf_bulkqsat )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision cvapor_exp
      parameter ( cvapor_exp = 5107.4d0 )
      double precision cvapor_fac
      parameter ( cvapor_fac = 640380.d0 )

C==============================================
C declare arguments
C==============================================
      real*8 adexf_bulkqsat
      double precision adtkelvin
      double precision tkelvin

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      adtkelvin = adtkelvin+adexf_bulkqsat*(cvapor_fac*(cvapor_exp/
     $(tkelvin*tkelvin))*exp(cvapor_exp/tkelvin)/(exp(cvapor_exp/
     $tkelvin)*exp(cvapor_exp/tkelvin)))
      adexf_bulkqsat = 0.

      end


      subroutine adhexf_bulkrhn( adstab, adexf_bulkrhn )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision cstanton_1
      parameter ( cstanton_1 = 0.0327d0 )
      double precision cstanton_2
      parameter ( cstanton_2 = 0.018d0 )

C==============================================
C declare arguments
C==============================================
      real*8 adexf_bulkrhn
      double precision adstab

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      adstab = adstab+adexf_bulkrhn*((-cstanton_1)+cstanton_2)
      adexf_bulkrhn = 0.

      end


      subroutine adexf_getffields( mycurrenttime, mycurrentiter, mythid 
     $)
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision atmcp
      parameter ( atmcp = 1005.d0 )
      double precision atmrho
      parameter ( atmrho = 1.2d0 )
      double precision cdalton
      parameter ( cdalton = 0.0346d0 )
      double precision cen2kel
      parameter ( cen2kel = 273.15d0 )
      double precision gravity_mks
      parameter ( gravity_mks = 9.81d0 )
      double precision hu
      parameter ( hu = 10.d0 )
      double precision karman
      parameter ( karman = 0.4d0 )
      double precision czol
      parameter ( czol = hu*karman*gravity_mks )
      double precision exf_half
      parameter ( exf_half = 0.5d0 )
      double precision exf_one
      parameter ( exf_one = 1.d0 )
      double precision exf_two
      parameter ( exf_two = 2.d0 )
      double precision flamb
      parameter ( flamb = 2.5d+6 )
      double precision gamma_blk
      parameter ( gamma_blk = 0.01d0 )
      double precision ht
      parameter ( ht = 2.d0 )
      double precision humid_fac
      parameter ( humid_fac = 0.606d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer niter_bulk
      parameter ( niter_bulk = 2 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision pi
      parameter ( pi = 3.1415926535898d0 )
      double precision psim_fac
      parameter ( psim_fac = 5.d0 )
      double precision saltsat
      parameter ( saltsat = 0.98d0 )
      double precision umin
      parameter ( umin = 0.5d0 )
      double precision zolmin
      parameter ( zolmin = -100.d0 )
      double precision zref
      parameter ( zref = 10.d0 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      double precision adevap(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_evap/ adevap

      double precision adhflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_hsflux_r/ adhflux, adsflux

      double precision adustress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advstress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_stress_r/ adustress, advstress

      double precision comlev1_exf_1_cw_6h(7680)
      common /cadcw/ comlev1_exf_1_cw_6h

      double precision comlev1_exf_1_qstar_3h(7680)
      common /cadqstar/ comlev1_exf_1_qstar_3h

      double precision comlev1_exf_2_qstar_3h(15360)
      common /cadqstas/ comlev1_exf_2_qstar_3h

      double precision comlev1_exf_2_rdn_1h(15360)
      common /cadrdn/ comlev1_exf_2_rdn_1h

      double precision comlev1_exf_2_sh_5h(15360)
      common /cadsh/ comlev1_exf_2_sh_5h

      double precision comlev1_exf_1_sh_1h(7680)
      common /cadsi/ comlev1_exf_1_sh_1h

      double precision comlev1_exf_1_sw_7h(7680)
      common /cadsw/ comlev1_exf_1_sw_7h

      double precision comlev1_exf_1_tau_5h(7680)
      common /cadtau/ comlev1_exf_1_tau_5h

      double precision comlev1_exf_1_tstar_4h(7680)
      common /cadtstar/ comlev1_exf_1_tstar_4h

      double precision comlev1_exf_2_tstar_4h(15360)
      common /cadtstas/ comlev1_exf_2_tstar_4h

      double precision comlev1_exf_2_us_6h(15360)
      common /cadus/ comlev1_exf_2_us_6h

      double precision comlev1_exf_1_ustar_2h(7680)
      common /cadustas/ comlev1_exf_1_ustar_2h

      double precision comlev1_exf_2_ustar_2h(15360)
      common /cadustat/ comlev1_exf_2_ustar_2h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision aqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_temp_r/ atemp, aqh, lwflux, precip

      double precision uwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_wind_r/ uwind, vwind

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

C==============================================
C declare arguments
C==============================================
      integer mycurrentiter
      double precision mycurrenttime
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adcw
      double precision addelq
      double precision addeltap
      double precision adhelp_h
      double precision adhelp_hh
      double precision adhelp_i
      double precision adhelp_j
      double precision adhelp_k
      double precision adhfl
      double precision adhl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adhs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adhtol
      double precision adhuol
      double precision adpsimh
      double precision adpsixh
      double precision adqstar
      double precision adrd
      double precision adrdn
      double precision adrdnh
      double precision adrdni
      double precision adre
      double precision adrh
      double precision adsh
      double precision adshn
      double precision adssq
      double precision adssttmp
      double precision adstable
      double precision adsw
      double precision adt0
      double precision adtau
      double precision adtstar
      double precision adus
      double precision adustar
      double precision adustmp
      double precision aduzn
      double precision adx
      double precision adxsq
      double precision aln
      integer bi
      integer bj
      double precision cw
      double precision delq
      double precision deltap
      double precision help_h
      double precision help_i
      double precision help_j
      double precision help_k
      double precision htol
      double precision huol
      integer i
      integer ikey_1
      integer ikey_2
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer iter
      integer j
      integer k
      integer max1
      integer max2
      integer max3
      double precision psimh
      double precision psixh
      double precision qstar
      double precision rd
      double precision rdn
      double precision re
      double precision rh
      double precision sh
      double precision shn
      double precision ssq
      double precision ssttmp
      double precision stable
      double precision sw
      double precision t0
      double precision tau
      double precision tstar
      double precision us
      double precision ustar
      double precision ustmp
      double precision uzn
      double precision x
      double precision xsq
      double precision xsqh
      double precision xsqi

C==============================================
C declare external procedures and functions
C==============================================
      double precision exf_bulkcdn
      external exf_bulkcdn
      double precision exf_bulkqsat
      external exf_bulkqsat
      double precision exf_bulkrhn
      external exf_bulkrhn
      integer ilnblnk
      external ilnblnk

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcw = 0.d0
      addelq = 0.d0
      addeltap = 0.d0
      adhelp_h = 0.d0
      adhelp_i = 0.d0
      adhelp_j = 0.d0
      adhelp_k = 0.d0
      adhfl = 0.d0
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adhl(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adhs(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      adhtol = 0.d0
      adhuol = 0.d0
      adpsimh = 0.d0
      adpsixh = 0.d0
      adqstar = 0.d0
      adrd = 0.d0
      adrdn = 0.d0
      adre = 0.d0
      adrh = 0.d0
      adsh = 0.d0
      adshn = 0.d0
      adssq = 0.d0
      adssttmp = 0.d0
      adstable = 0.d0
      adsw = 0.d0
      adt0 = 0.d0
      adtau = 0.d0
      adtstar = 0.d0
      adus = 0.d0
      adustar = 0.d0
      adustmp = 0.d0
      aduzn = 0.d0
      adx = 0.d0
      adxsq = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      aln = log(ht/zref)
      call exf_set_uwind( mycurrenttime,mycurrentiter,mythid )
      call exf_set_vwind( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getuwind( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getvwind( mycurrenttime,mycurrentiter,mythid )
      call exf_set_atemp( mycurrenttime,mycurrentiter,mythid )
      call exf_set_aqh( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getatemp( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getaqh( mycurrenttime,mycurrentiter,mythid )
      call adexch_xy_rl( mythid,advstress )
      call adexch_xy_rl( mythid,adustress )
      call adexch_xy_rl( mythid,adsflux )
      call adexch_xy_rl( mythid,adhflux )
      do bj = mybylo(mythid), mybyhi(mythid)
        adhfl = 0.d0
        do bi = mybxlo(mythid), mybxhi(mythid)
          adhfl = 0.d0
          do j = 1, sny
            adhfl = 0.d0
            do i = 1, snx
              adhfl = 0.d0
              adsflux(i,j,bi,bj) = adsflux(i,j,bi,bj)*maskc(i,j,1,bi,bj)
              adhflux(i,j,bi,bj) = adhflux(i,j,bi,bj)*maskc(i,j,1,bi,bj)
              adevap(i,j,bi,bj) = adevap(i,j,bi,bj)+adsflux(i,j,bi,bj)
              adsflux(i,j,bi,bj) = 0.d0
              adhfl = adhfl+adhflux(i,j,bi,bj)
              adhflux(i,j,bi,bj) = 0.d0
              adlwflux(i,j,bi,bj) = adlwflux(i,j,bi,bj)+adhfl
              adhl(i,j,bi,bj) = adhl(i,j,bi,bj)-adhfl
              adhs(i,j,bi,bj) = adhs(i,j,bi,bj)-adhfl
              adhfl = 0.d0
            end do
          end do
        end do
      end do
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          k = 1
          do j = sny+oly, 1-oly, -1
            do i = snx+olx, 1-olx, -1
              act1 = bi-mybxlo(mythid)
              max1 = mybxhi(mythid)-mybxlo(mythid)+1
              act2 = bj-mybylo(mythid)
              max2 = mybyhi(mythid)-mybylo(mythid)+1
              act3 = mythid-1
              max3 = ntx*nty
              act4 = ikey_dynamics-1
              ikey_1 = i+snx*(j-1)+snx*sny*act1+snx*sny*max1*act2+snx*
     $sny*max1*max2*act3+snx*sny*max1*max2*max3*act4
              ustmp = uwind(i,j,bi,bj)*uwind(i,j,bi,bj)+vwind(i,j,bi,bj)
     $*vwind(i,j,bi,bj)
              if (atemp(i,j,bi,bj) .ne. 0.d0) then
                t0 = atemp(i,j,bi,bj)*(exf_one+humid_fac*aqh(i,j,bi,bj))
                ssttmp = theta(i,j,k,bi,bj)
                help_h = exf_bulkqsat(ssttmp+cen2kel)
                ssq = saltsat*help_h/atmrho
                deltap = atemp(i,j,bi,bj)+gamma_blk*ht-ssttmp-cen2kel
                delq = aqh(i,j,bi,bj)-ssq
                stable = exf_half+sign(exf_half,deltap)
                help_i = exf_bulkrhn(stable)
                ustar = comlev1_exf_1_ustar_2h(ikey_1)
                qstar = comlev1_exf_1_qstar_3h(ikey_1)
                tstar = comlev1_exf_1_tstar_4h(ikey_1)
                tau = comlev1_exf_1_tau_5h(ikey_1)
                cw = comlev1_exf_1_cw_6h(ikey_1)
                sw = comlev1_exf_1_sw_7h(ikey_1)
                adsw = adsw+advstress(i,j,bi,bj)*tau
                adtau = adtau+advstress(i,j,bi,bj)*sw
                advstress(i,j,bi,bj) = 0.d0
                adcw = adcw+adustress(i,j,bi,bj)*tau
                adtau = adtau+adustress(i,j,bi,bj)*cw
                adustress(i,j,bi,bj) = 0.d0
                adqstar = adqstar-adevap(i,j,bi,bj)*(recip_rhonil*tau/
     $ustar)
                adtau = adtau-adevap(i,j,bi,bj)*(recip_rhonil*qstar/
     $ustar)
                adustar = adustar+adevap(i,j,bi,bj)*(recip_rhonil*tau*
     $qstar/(ustar*ustar))
                adevap(i,j,bi,bj) = 0.d0
                adqstar = adqstar+adhl(i,j,bi,bj)*(flamb*tau/ustar)
                adtau = adtau+adhl(i,j,bi,bj)*(flamb*qstar/ustar)
                adustar = adustar-adhl(i,j,bi,bj)*(flamb*tau*qstar/
     $(ustar*ustar))
                adhl(i,j,bi,bj) = 0.d0
                adtau = adtau+adhs(i,j,bi,bj)*(atmcp*tstar/ustar)
                adtstar = adtstar+adhs(i,j,bi,bj)*(atmcp*tau/ustar)
                adustar = adustar-adhs(i,j,bi,bj)*(atmcp*tau*tstar/
     $(ustar*ustar))
                adhs(i,j,bi,bj) = 0.d0
                do iter = niter_bulk, 1, -1
                  ikey_2 = iter+niter_bulk*(i-1)+snx*niter_bulk*(j-1)+
     $snx*niter_bulk*sny*act1+snx*niter_bulk*sny*max1*act2+snx*
     $niter_bulk*sny*max1*max2*act3+snx*niter_bulk*sny*max1*max2*max3*
     $act4
                  rdn = comlev1_exf_2_rdn_1h(ikey_2)
                  ustar = comlev1_exf_2_ustar_2h(ikey_2)
                  qstar = comlev1_exf_2_qstar_3h(ikey_2)
                  tstar = comlev1_exf_2_tstar_4h(ikey_2)
                  sh = comlev1_exf_2_sh_5h(ikey_2)
                  us = comlev1_exf_2_us_6h(ikey_2)
                  huol = czol*(tstar/t0+qstar/(exf_one/humid_fac+aqh(i,
     $j,bi,bj)))/ustar**2
                  huol = max(huol,zolmin)
                  stable = exf_half+sign(exf_half,huol)
                  htol = huol*ht/hu
                  xsq = max(sqrt(abs(exf_one-16.*huol)),exf_one)
                  x = sqrt(xsq)
                  psimh = (-(psim_fac*huol*stable))+(exf_one-stable)*
     $log((exf_one+x*(exf_two+x))*(exf_one+xsq)/8.)-exf_two*atan(x)+pi*
     $exf_half
                  xsq = max(sqrt(abs(exf_one-16.*htol)),exf_one)
                  psixh = (-(psim_fac*htol*stable))+(exf_one-stable)*
     $exf_two*log((exf_one+xsq)/exf_two)
                  rd = rdn/(exf_one-rdn/karman*psimh)
                  shn = sh*rd/rdn
                  uzn = max(shn,umin)
                  rdn = sqrt(exf_bulkcdn(uzn))
                  rd = rdn/(exf_one-rdn/karman*psimh)
                  help_j = exf_bulkrhn(stable)
                  help_k = exf_bulkrhn(stable)
                  rh = help_j/(exf_one+help_k/karman*(aln-psixh))
                  re = cdalton/(exf_one+cdalton/karman*(aln-psixh))
                  ustar = rd*sh
                  tau = atmrho*ustar**2
                  adsh = adsh-adtau*(tau*us/(sh*sh))
                  adus = adus+adtau*(tau/sh)
                  adtau = adtau*(us/sh)
                  adustar = adustar+2*adtau*atmrho*ustar
                  adtau = 0.d0
                  addeltap = addeltap+adtstar*rh
                  adrh = adrh+adtstar*deltap
                  adtstar = 0.d0
                  addelq = addelq+adqstar*re
                  adre = adre+adqstar*delq
                  adqstar = 0.d0
                  adrd = adrd+adustar*sh
                  adsh = adsh+adustar*rd
                  adustar = 0.d0
                  adpsixh = adpsixh+adre*(cdalton*(cdalton/karman)/
     $((exf_one+cdalton/karman*(aln-psixh))*(exf_one+cdalton/karman*
     $(aln-psixh))))
                  adre = 0.d0
                  adhelp_j = adhelp_j+adrh/(exf_one+help_k/karman*(aln-
     $psixh))
                  adhelp_k = adhelp_k-adrh*(help_j/karman*(aln-psixh)/
     $((exf_one+help_k/karman*(aln-psixh))*(exf_one+help_k/karman*(aln-
     $psixh))))
                  adpsixh = adpsixh+adrh*(help_j*(help_k/karman)/
     $((exf_one+help_k/karman*(aln-psixh))*(exf_one+help_k/karman*(aln-
     $psixh))))
                  adrh = 0.d0
                  call adhexf_bulkrhn( adstable,adhelp_k )
                  adhelp_k = 0.d0
                  call adhexf_bulkrhn( adstable,adhelp_j )
                  adhelp_j = 0.d0
                  adpsimh = adpsimh+adrd*(rdn*(rdn/karman)/((exf_one-
     $rdn/karman*psimh)*(exf_one-rdn/karman*psimh)))
                  adrdn = adrdn+adrd*(1/(exf_one-rdn/karman*psimh)+rdn/
     $karman*psimh/((exf_one-rdn/karman*psimh)*(exf_one-rdn/karman*
     $psimh)))
                  adrd = 0.d0
                  adrdnh = adrdn*(1./(2.*sqrt(exf_bulkcdn(uzn))))
                  call adhexf_bulkcdn( uzn,aduzn,adrdnh )
                  adrdnh = 0.d0
                  adrdn = 0.d0
                  adshn = adshn+aduzn*(0.5+sign(0.5d0,shn-umin))
                  aduzn = 0.d0
                  rdn = comlev1_exf_2_rdn_1h(ikey_2)
                  rd = rdn/(exf_one-rdn/karman*psimh)
                  adrd = adrd+adshn*(sh/rdn)
                  adrdn = adrdn-adshn*(sh*rd/(rdn*rdn))
                  adsh = adsh+adshn*(rd/rdn)
                  adshn = 0.d0
                  rdn = comlev1_exf_2_rdn_1h(ikey_2)
                  adpsimh = adpsimh+adrd*(rdn*(rdn/karman)/((exf_one-
     $rdn/karman*psimh)*(exf_one-rdn/karman*psimh)))
                  adrdn = adrdn+adrd*(1/(exf_one-rdn/karman*psimh)+rdn/
     $karman*psimh/((exf_one-rdn/karman*psimh)*(exf_one-rdn/karman*
     $psimh)))
                  adrd = 0.d0
                  adhtol = adhtol-adpsixh*psim_fac*stable
                  adstable = adstable-adpsixh*(psim_fac*htol+exf_two*
     $log((exf_one+xsq)/exf_two))
                  adxsq = adxsq+adpsixh*(exf_one-stable)*exf_two*(1./
     $((exf_one+xsq)/exf_two)/exf_two)
                  adpsixh = 0.d0
                  xsqh = abs(exf_one-16.*htol)
                  adhtol = adhtol+(-16)*adxsq*(0.5+sign(0.5d0,sqrt(xsqh)
     $-exf_one))*(1./(2.*sqrt(xsqh)))*sign(1.d0,exf_one-16.*htol)
                  adxsq = 0.d0
                  xsq = max(sqrt(abs(exf_one-16.*huol)),exf_one)
                  adhuol = adhuol-adpsimh*psim_fac*stable
                  adstable = adstable-adpsimh*(psim_fac*huol+
     $log((exf_one+x*(exf_two+x))*(exf_one+xsq)/8.))
                  adx = adx+adpsimh*((exf_one-stable)*1./((exf_one+x*
     $(exf_two+x))*(exf_one+xsq)/8.)*((x+exf_two+x)*(exf_one+xsq)/8.)-
     $exf_two*(1./(1.+x**2)))
                  adxsq = adxsq+adpsimh*(exf_one-stable)*1./((exf_one+x*
     $(exf_two+x))*(exf_one+xsq)/8.)*((exf_one+x*(exf_two+x))/8.)
                  adpsimh = 0.d0
                  xsq = max(sqrt(abs(exf_one-16.*huol)),exf_one)
                  adxsq = adxsq+adx*(1./(2.*sqrt(xsq)))
                  adx = 0.d0
                  xsqi = abs(exf_one-16.*huol)
                  adhuol = adhuol+(-16)*adxsq*(0.5+sign(0.5d0,sqrt(xsqi)
     $-exf_one))*(1./(2.*sqrt(xsqi)))*sign(1.d0,exf_one-16.*huol)
                  adxsq = 0.d0
                  adhuol = adhuol+adhtol*(ht/hu)
                  adhtol = 0.d0
                  adstable = 0.d0
                  ustar = comlev1_exf_2_ustar_2h(ikey_2)
                  huol = czol*(tstar/t0+qstar/(exf_one/humid_fac+aqh(i,
     $j,bi,bj)))/ustar**2
                  adhuol = adhuol*(0.5+sign(0.5d0,huol-zolmin))
                  ustar = comlev1_exf_2_ustar_2h(ikey_2)
                  adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)-adhuol*(czol*
     $(qstar/((exf_one/humid_fac+aqh(i,j,bi,bj))*(exf_one/humid_fac+
     $aqh(i,j,bi,bj))))/ustar**2)
                  adqstar = adqstar+adhuol*(czol/(exf_one/humid_fac+
     $aqh(i,j,bi,bj))/ustar**2)
                  adt0 = adt0-adhuol*(czol*(tstar/(t0*t0))/ustar**2)
                  adtstar = adtstar+adhuol*(czol/t0/ustar**2)
                  adustar = adustar-adhuol*(2*czol*(tstar/t0+qstar/
     $(exf_one/humid_fac+aqh(i,j,bi,bj)))*ustar/(ustar**2*ustar**2))
                  adhuol = 0.d0
                end do
                addelq = addelq+adqstar*cdalton
                adqstar = 0.d0
                addeltap = addeltap+adtstar*help_i
                adhelp_i = adhelp_i+adtstar*deltap
                adtstar = 0.d0
                call adhexf_bulkrhn( adstable,adhelp_i )
                adhelp_i = 0.d0
                sh = comlev1_exf_1_sh_1h(ikey_1)
                rdn = sqrt(exf_bulkcdn(sh))
                adrdn = adrdn+adustar*sh
                adsh = adsh+adustar*rdn
                adustar = 0.d0
                sh = comlev1_exf_1_sh_1h(ikey_1)
                adrdni = adrdn*(1./(2.*sqrt(exf_bulkcdn(sh))))
                call adhexf_bulkcdn( sh,adsh,adrdni )
                adrdni = 0.d0
                adrdn = 0.d0
                adstable = 0.d0
                adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)+addelq
                adssq = adssq-addelq
                addelq = 0.d0
                adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)+addeltap
                adssttmp = adssttmp-addeltap
                addeltap = 0.d0
                adhelp_h = adhelp_h+adssq*(saltsat/atmrho)
                adssq = 0.d0
                adhelp_hh = 0.d0
                call adhexf_bulkqsat( ssttmp+cen2kel,adhelp_hh,adhelp_h 
     $)
                adssttmp = adssttmp+adhelp_hh
                adhelp_h = 0.d0
                adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adssttmp
                adssttmp = 0.d0
                adaqh(i,j,bi,bj) = adaqh(i,j,bi,bj)+adt0*atemp(i,j,bi,
     $bj)*humid_fac
                adatemp(i,j,bi,bj) = adatemp(i,j,bi,bj)+adt0*(exf_one+
     $humid_fac*aqh(i,j,bi,bj))
                adt0 = 0.d0
              else
                adhl(i,j,bi,bj) = 0.d0
                adhs(i,j,bi,bj) = 0.d0
                adhflux(i,j,bi,bj) = 0.d0
                advstress(i,j,bi,bj) = 0.d0
                adustress(i,j,bi,bj) = 0.d0
              endif
              if (ustmp .ne. 0.d0) then
                us = sqrt(ustmp)
              else
                us = 0.d0
              endif
              adus = adus+adsh*(0.5+sign(0.5d0,us-umin))
              adsh = 0.d0
              if (ustmp .ne. 0.d0) then
                us = sqrt(ustmp)
                adus = adus-adsw*(vwind(i,j,bi,bj)/(us*us))
                advwind(i,j,bi,bj) = advwind(i,j,bi,bj)+adsw/us
                adsw = 0.d0
                adus = adus-adcw*(uwind(i,j,bi,bj)/(us*us))
                aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)+adcw/us
                adcw = 0.d0
                adustmp = adustmp+adus*(1./(2.*sqrt(ustmp)))
                adus = 0.d0
              else
                adsw = 0.d0
                adcw = 0.d0
                adus = 0.d0
              endif
              aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)+2*adustmp*uwind(i,
     $j,bi,bj)
              advwind(i,j,bi,bj) = advwind(i,j,bi,bj)+2*adustmp*vwind(i,
     $j,bi,bj)
              adustmp = 0.d0
              adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+2.2d-7*
     $adlwflux(i,j,bi,bj)*(theta(i,j,k,bi,bj)+cen2kel)**3
              adlwflux(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adctrl_getaqh( mycurrenttime,mycurrentiter,mythid )
      call adctrl_getatemp( mycurrenttime,mycurrentiter,mythid )
      call adexf_set_lwflux( mythid )
      call adexf_set_aqh( mythid )
      call adexf_set_atemp( mythid )
      call adctrl_getvwind( mycurrenttime,mycurrentiter,mythid )
      call adctrl_getuwind( mycurrenttime,mycurrentiter,mythid )
      call adexf_set_vwind( mythid )
      call adexf_set_uwind( mythid )

      end


      subroutine mdexf_getffields( mycurrenttime, mycurrentiter, mythid 
     $)
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision atmcp
      parameter ( atmcp = 1005.d0 )
      double precision atmrho
      parameter ( atmrho = 1.2d0 )
      double precision cdalton
      parameter ( cdalton = 0.0346d0 )
      double precision cen2kel
      parameter ( cen2kel = 273.15d0 )
      double precision gravity_mks
      parameter ( gravity_mks = 9.81d0 )
      double precision hu
      parameter ( hu = 10.d0 )
      double precision karman
      parameter ( karman = 0.4d0 )
      double precision czol
      parameter ( czol = hu*karman*gravity_mks )
      double precision exf_half
      parameter ( exf_half = 0.5d0 )
      double precision exf_one
      parameter ( exf_one = 1.d0 )
      double precision exf_two
      parameter ( exf_two = 2.d0 )
      double precision flamb
      parameter ( flamb = 2.5d+6 )
      double precision gamma_blk
      parameter ( gamma_blk = 0.01d0 )
      double precision ht
      parameter ( ht = 2.d0 )
      double precision humid_fac
      parameter ( humid_fac = 0.606d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer niter_bulk
      parameter ( niter_bulk = 2 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision pi
      parameter ( pi = 3.1415926535898d0 )
      double precision psim_fac
      parameter ( psim_fac = 5.d0 )
      double precision saltsat
      parameter ( saltsat = 0.98d0 )
      double precision umin
      parameter ( umin = 0.5d0 )
      double precision zolmin
      parameter ( zolmin = -100.d0 )
      double precision zref
      parameter ( zref = 10.d0 )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_exf_1_cw_6h(7680)
      common /cadcw/ comlev1_exf_1_cw_6h

      double precision comlev1_exf_1_qstar_3h(7680)
      common /cadqstar/ comlev1_exf_1_qstar_3h

      double precision comlev1_exf_2_qstar_3h(15360)
      common /cadqstas/ comlev1_exf_2_qstar_3h

      double precision comlev1_exf_2_rdn_1h(15360)
      common /cadrdn/ comlev1_exf_2_rdn_1h

      double precision comlev1_exf_2_sh_5h(15360)
      common /cadsh/ comlev1_exf_2_sh_5h

      double precision comlev1_exf_1_sh_1h(7680)
      common /cadsi/ comlev1_exf_1_sh_1h

      double precision comlev1_exf_1_sw_7h(7680)
      common /cadsw/ comlev1_exf_1_sw_7h

      double precision comlev1_exf_1_tau_5h(7680)
      common /cadtau/ comlev1_exf_1_tau_5h

      double precision comlev1_exf_1_tstar_4h(7680)
      common /cadtstar/ comlev1_exf_1_tstar_4h

      double precision comlev1_exf_2_tstar_4h(15360)
      common /cadtstas/ comlev1_exf_2_tstar_4h

      double precision comlev1_exf_2_us_6h(15360)
      common /cadus/ comlev1_exf_2_us_6h

      double precision comlev1_exf_1_ustar_2h(7680)
      common /cadustas/ comlev1_exf_1_ustar_2h

      double precision comlev1_exf_2_ustar_2h(15360)
      common /cadustat/ comlev1_exf_2_ustar_2h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision aqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_temp_r/ atemp, aqh, lwflux, precip

      double precision uwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_wind_r/ uwind, vwind

      double precision evap(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_evap/ evap

      double precision hflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_hsflux_r/ hflux, sflux

      double precision lwdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_rad_down_r/ swdown, lwdown, swdown0, swdown1, lwdown0,
     $ lwdown1

      double precision ustress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vstress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_stress_r/ ustress, vstress

      double precision swflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_swflux_r/ swflux

      double precision runoff(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_runoff_r/ runoff

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

C==============================================
C declare arguments
C==============================================
      integer mycurrentiter
      double precision mycurrenttime
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision aln
      integer bi
      integer bj
      double precision cw
      double precision delq
      double precision deltap
      double precision help_h
      double precision help_i
      double precision help_j
      double precision help_k
      double precision hfl
      double precision hl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hs(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision htol
      double precision huol
      integer i
      integer ikey_1
      integer ikey_2
      integer iter
      integer j
      integer k
      integer max1
      integer max2
      integer max3
      double precision psimh
      double precision psixh
      double precision qstar
      double precision rd
      double precision rdn
      double precision re
      double precision rh
      double precision sh
      double precision shn
      double precision ssq
      double precision ssttmp
      double precision stable
      double precision sw
      double precision t0
      double precision tau
      double precision tstar
      double precision us
      double precision ustar
      double precision ustmp
      double precision uzn
      double precision x
      double precision xsq

C==============================================
C declare external procedures and functions
C==============================================
      double precision exf_bulkcdn
      external exf_bulkcdn
      double precision exf_bulkqsat
      external exf_bulkqsat
      double precision exf_bulkrhn
      external exf_bulkrhn
      integer ilnblnk
      external ilnblnk

C**********************************************
C executable statements of routine
C**********************************************
      aln = log(ht/zref)
      call exf_set_uwind( mycurrenttime,mycurrentiter,mythid )
      call exf_set_vwind( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getuwind( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getvwind( mycurrenttime,mycurrentiter,mythid )
      call exf_set_atemp( mycurrenttime,mycurrentiter,mythid )
      call exf_set_aqh( mycurrenttime,mycurrentiter,mythid )
      call exf_set_lwflux( mycurrenttime,mycurrentiter,mythid )
      call exf_set_precip( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getatemp( mycurrenttime,mycurrentiter,mythid )
      call ctrl_getaqh( mycurrenttime,mycurrentiter,mythid )
      call exf_set_swflux( mycurrenttime,mycurrentiter,mythid )
      call exf_set_swdown( mycurrenttime,mycurrentiter,mythid )
      call exf_set_lwdown( mycurrenttime,mycurrentiter,mythid )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          k = 1
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              act1 = bi-mybxlo(mythid)
              max1 = mybxhi(mythid)-mybxlo(mythid)+1
              act2 = bj-mybylo(mythid)
              max2 = mybyhi(mythid)-mybylo(mythid)+1
              act3 = mythid-1
              max3 = ntx*nty
              act4 = ikey_dynamics-1
              ikey_1 = i+snx*(j-1)+snx*sny*act1+snx*sny*max1*act2+snx*
     $sny*max1*max2*act3+snx*sny*max1*max2*max3*act4
              lwflux(i,j,bi,bj) = 5.5d-8*(theta(i,j,k,bi,bj)+cen2kel)**
     $4-lwdown(i,j,bi,bj)
              swflux(i,j,bi,bj) = -(0.9d0*swdown(i,j,bi,bj))
              ustmp = uwind(i,j,bi,bj)*uwind(i,j,bi,bj)+vwind(i,j,bi,bj)
     $*vwind(i,j,bi,bj)
              if (ustmp .ne. 0.d0) then
                us = sqrt(ustmp)
                cw = uwind(i,j,bi,bj)/us
                sw = vwind(i,j,bi,bj)/us
              else
                us = 0.d0
                cw = 0.d0
                sw = 0.d0
              endif
              sh = max(us,umin)
              if (atemp(i,j,bi,bj) .ne. 0.d0) then
                t0 = atemp(i,j,bi,bj)*(exf_one+humid_fac*aqh(i,j,bi,bj))
                ssttmp = theta(i,j,k,bi,bj)
                help_h = exf_bulkqsat(ssttmp+cen2kel)
                ssq = saltsat*help_h/atmrho
                deltap = atemp(i,j,bi,bj)+gamma_blk*ht-ssttmp-cen2kel
                delq = aqh(i,j,bi,bj)-ssq
                stable = exf_half+sign(exf_half,deltap)
                comlev1_exf_1_sh_1h(ikey_1) = sh
                rdn = sqrt(exf_bulkcdn(sh))
                ustar = rdn*sh
                help_i = exf_bulkrhn(stable)
                tstar = help_i*deltap
                qstar = cdalton*delq
                do iter = 1, niter_bulk
                  ikey_2 = iter+niter_bulk*(i-1)+snx*niter_bulk*(j-1)+
     $snx*niter_bulk*sny*act1+snx*niter_bulk*sny*max1*act2+snx*
     $niter_bulk*sny*max1*max2*act3+snx*niter_bulk*sny*max1*max2*max3*
     $act4
                  comlev1_exf_2_rdn_1h(ikey_2) = rdn
                  comlev1_exf_2_ustar_2h(ikey_2) = ustar
                  comlev1_exf_2_qstar_3h(ikey_2) = qstar
                  comlev1_exf_2_tstar_4h(ikey_2) = tstar
                  comlev1_exf_2_sh_5h(ikey_2) = sh
                  comlev1_exf_2_us_6h(ikey_2) = us
                  huol = czol*(tstar/t0+qstar/(exf_one/humid_fac+aqh(i,
     $j,bi,bj)))/ustar**2
                  huol = max(huol,zolmin)
                  stable = exf_half+sign(exf_half,huol)
                  htol = huol*ht/hu
                  xsq = max(sqrt(abs(exf_one-16.*huol)),exf_one)
                  x = sqrt(xsq)
                  psimh = (-(psim_fac*huol*stable))+(exf_one-stable)*
     $log((exf_one+x*(exf_two+x))*(exf_one+xsq)/8.)-exf_two*atan(x)+pi*
     $exf_half
                  xsq = max(sqrt(abs(exf_one-16.*htol)),exf_one)
                  psixh = (-(psim_fac*htol*stable))+(exf_one-stable)*
     $exf_two*log((exf_one+xsq)/exf_two)
                  rd = rdn/(exf_one-rdn/karman*psimh)
                  shn = sh*rd/rdn
                  uzn = max(shn,umin)
                  rdn = sqrt(exf_bulkcdn(uzn))
                  rd = rdn/(exf_one-rdn/karman*psimh)
                  help_j = exf_bulkrhn(stable)
                  help_k = exf_bulkrhn(stable)
                  rh = help_j/(exf_one+help_k/karman*(aln-psixh))
                  re = cdalton/(exf_one+cdalton/karman*(aln-psixh))
                  ustar = rd*sh
                  qstar = re*delq
                  tstar = rh*deltap
                  tau = atmrho*ustar**2
                  tau = tau*us/sh
                end do
                comlev1_exf_1_ustar_2h(ikey_1) = ustar
                comlev1_exf_1_qstar_3h(ikey_1) = qstar
                comlev1_exf_1_tstar_4h(ikey_1) = tstar
                comlev1_exf_1_tau_5h(ikey_1) = tau
                comlev1_exf_1_cw_6h(ikey_1) = cw
                comlev1_exf_1_sw_7h(ikey_1) = sw
                hs(i,j,bi,bj) = atmcp*tau*tstar/ustar
                hl(i,j,bi,bj) = flamb*tau*qstar/ustar
                evap(i,j,bi,bj) = -(recip_rhonil*tau*qstar/ustar)
                ustress(i,j,bi,bj) = tau*cw
                vstress(i,j,bi,bj) = tau*sw
              else
                ustress(i,j,bi,bj) = 0.d0
                vstress(i,j,bi,bj) = 0.d0
                hflux(i,j,bi,bj) = 0.d0
                hs(i,j,bi,bj) = 0.d0
                hl(i,j,bi,bj) = 0.d0
              endif
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              hfl = 0.d0
              hfl = hfl-hs(i,j,bi,bj)
              hfl = hfl-hl(i,j,bi,bj)
              hfl = hfl+lwflux(i,j,bi,bj)
              hflux(i,j,bi,bj) = hfl
              sflux(i,j,bi,bj) = evap(i,j,bi,bj)-precip(i,j,bi,bj)
              sflux(i,j,bi,bj) = sflux(i,j,bi,bj)-runoff(i,j,bi,bj)
              hflux(i,j,bi,bj) = hflux(i,j,bi,bj)*maskc(i,j,1,bi,bj)
              sflux(i,j,bi,bj) = sflux(i,j,bi,bj)*maskc(i,j,1,bi,bj)
            end do
          end do
        end do
      end do
      call exch_xy_rl( hflux,mythid )
      call exch_xy_rl( sflux,mythid )
      call exch_xy_rl( ustress,mythid )
      call exch_xy_rl( vstress,mythid )
      call exch_xy_rl( swflux,mythid )
      end


      subroutine adexf_getforcing( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call adexf_mapfields( mythid )
      call adexf_getffields( mytime,myiter,mythid )

      end


      subroutine mdexf_getforcing( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C**********************************************
C executable statements of routine
C**********************************************
      call mdexf_getffields( mytime,myiter,mythid )
      call mdexf_mapfields( mythid )
      end


      subroutine adexf_mapfields( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adhflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_hsflux_r/ adhflux, adsflux

      double precision adustress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advstress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_stress_r/ adustress, advstress

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      real*4 comlev1_bibj_ustress_34h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadustress/ comlev1_bibj_ustress_34h

      real*4 comlev1_bibj_ustress_33h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadustrest/ comlev1_bibj_ustress_33h

      real*4 comlev1_bibj_vstress_36h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadvstress/ comlev1_bibj_vstress_36h

      real*4 comlev1_bibj_vstress_35h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadvstrest/ comlev1_bibj_vstress_35h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision exf_inscal_apressure
      double precision exf_inscal_hfl
      double precision exf_inscal_runoff
      double precision exf_inscal_sfl
      double precision exf_inscal_sss
      double precision exf_inscal_sst
      double precision exf_inscal_swf
      double precision exf_inscal_ust
      double precision exf_inscal_vst
      double precision exf_outscal_apressure
      double precision exf_outscal_hfl
      double precision exf_outscal_sfl
      double precision exf_outscal_sss
      double precision exf_outscal_sst
      double precision exf_outscal_swf
      double precision exf_outscal_ust
      double precision exf_outscal_vst
      common /exf_param_scal/ exf_inscal_hfl, exf_inscal_ust, 
     $exf_inscal_vst, exf_inscal_swf, exf_inscal_sst, exf_inscal_sss, 
     $exf_inscal_apressure, exf_inscal_sfl, exf_inscal_runoff, 
     $exf_outscal_hfl, exf_outscal_ust, exf_outscal_vst, 
     $exf_outscal_swf, exf_outscal_sst, exf_outscal_sss, 
     $exf_outscal_apressure, exf_outscal_sfl

      double precision ustress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vstress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_stress_r/ ustress, vstress

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer bi
      integer bj
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer max1
      integer max2
      integer max3

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      call adexch_xy_rs( mythid,adqsw )
      call adexch_xy_rs( mythid,adfv )
      call adexch_xy_rs( mythid,adfu )
      call adexch_xy_rs( mythid,adempmr )
      call adexch_xy_rs( mythid,adqnet )
      do bj = jtlo, jthi
        do bi = itlo, ithi
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              ustress(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_ustress_34h(ip1,ip2,ikey)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              vstress(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_vstress_36h(ip1,ip2,ikey)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              adqsw(i,j,bi,bj) = 0.d0
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              advstress(i,j,bi,bj) = advstress(i,j,bi,bj)+adfv(i,j,bi,
     $bj)*exf_outscal_vst
              adfv(i,j,bi,bj) = 0.d0
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (vstress(i,j,bi,bj) .lt. (-2.d0)) then
                advstress(i,j,bi,bj) = 0.d0
              endif
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              vstress(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_vstress_35h(ip1,ip2,ikey)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (vstress(i,j,bi,bj) .gt. 2.d0) then
                advstress(i,j,bi,bj) = 0.d0
              endif
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              adustress(i,j,bi,bj) = adustress(i,j,bi,bj)+adfu(i,j,bi,
     $bj)*exf_outscal_ust
              adfu(i,j,bi,bj) = 0.d0
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (ustress(i,j,bi,bj) .lt. (-2.d0)) then
                adustress(i,j,bi,bj) = 0.d0
              endif
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              ustress(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_ustress_33h(ip1,ip2,ikey)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (ustress(i,j,bi,bj) .gt. 2.d0) then
                adustress(i,j,bi,bj) = 0.d0
              endif
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              adsflux(i,j,bi,bj) = adsflux(i,j,bi,bj)+adempmr(i,j,bi,bj)
     $*exf_outscal_sfl
              adempmr(i,j,bi,bj) = 0.d0
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              adhflux(i,j,bi,bj) = adhflux(i,j,bi,bj)+adqnet(i,j,bi,bj)*
     $exf_outscal_hfl
              adqnet(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine mdexf_mapfields( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_ustress_34h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadustress/ comlev1_bibj_ustress_34h

      real*4 comlev1_bibj_ustress_33h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadustrest/ comlev1_bibj_ustress_33h

      real*4 comlev1_bibj_vstress_36h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadvstress/ comlev1_bibj_vstress_36h

      real*4 comlev1_bibj_vstress_35h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadvstrest/ comlev1_bibj_vstress_35h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision hflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_hsflux_r/ hflux, sflux

      double precision exf_inscal_apressure
      double precision exf_inscal_hfl
      double precision exf_inscal_runoff
      double precision exf_inscal_sfl
      double precision exf_inscal_sss
      double precision exf_inscal_sst
      double precision exf_inscal_swf
      double precision exf_inscal_ust
      double precision exf_inscal_vst
      double precision exf_outscal_apressure
      double precision exf_outscal_hfl
      double precision exf_outscal_sfl
      double precision exf_outscal_sss
      double precision exf_outscal_sst
      double precision exf_outscal_swf
      double precision exf_outscal_ust
      double precision exf_outscal_vst
      common /exf_param_scal/ exf_inscal_hfl, exf_inscal_ust, 
     $exf_inscal_vst, exf_inscal_swf, exf_inscal_sst, exf_inscal_sss, 
     $exf_inscal_apressure, exf_inscal_sfl, exf_inscal_runoff, 
     $exf_outscal_hfl, exf_outscal_ust, exf_outscal_vst, 
     $exf_outscal_swf, exf_outscal_sst, exf_outscal_sss, 
     $exf_outscal_apressure, exf_outscal_sfl

      double precision ustress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vstress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_stress_r/ ustress, vstress

      double precision swflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_swflux_r/ swflux

      double precision dqdt(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /ffields/ fu, fv, qnet, qsw, dqdt, empmr, sst, sss

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer bi
      integer bj
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ithi
      integer itlo
      integer j
      integer jmax
      integer jmin
      integer jthi
      integer jtlo
      integer max1
      integer max2
      integer max3

C**********************************************
C executable statements of routine
C**********************************************
      jtlo = mybylo(mythid)
      jthi = mybyhi(mythid)
      itlo = mybxlo(mythid)
      ithi = mybxhi(mythid)
      jmin = 1-oly
      jmax = sny+oly
      imin = 1-olx
      imax = snx+olx
      do bj = jtlo, jthi
        do bi = itlo, ithi
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do j = jmin, jmax
            do i = imin, imax
              qnet(i,j,bi,bj) = exf_outscal_hfl*hflux(i,j,bi,bj)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              empmr(i,j,bi,bj) = exf_outscal_sfl*sflux(i,j,bi,bj)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_ustress_33h(ip1,ip2,ikey) = ustress(ip1-1+1-
     $olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (ustress(i,j,bi,bj) .gt. 2.d0) then
                ustress(i,j,bi,bj) = 2.d0
              endif
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_ustress_34h(ip1,ip2,ikey) = ustress(ip1-1+1-
     $olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (ustress(i,j,bi,bj) .lt. (-2.d0)) then
                ustress(i,j,bi,bj) = -2.d0
              endif
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              fu(i,j,bi,bj) = exf_outscal_ust*ustress(i,j,bi,bj)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_vstress_35h(ip1,ip2,ikey) = vstress(ip1-1+1-
     $olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (vstress(i,j,bi,bj) .gt. 2.d0) then
                vstress(i,j,bi,bj) = 2.d0
              endif
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_vstress_36h(ip1,ip2,ikey) = vstress(ip1-1+1-
     $olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              if (vstress(i,j,bi,bj) .lt. (-2.d0)) then
                vstress(i,j,bi,bj) = -2.d0
              endif
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              fv(i,j,bi,bj) = exf_outscal_vst*vstress(i,j,bi,bj)
            end do
          end do
          do j = jmin, jmax
            do i = imin, imax
              qsw(i,j,bi,bj) = exf_outscal_swf*swflux(i,j,bi,bj)
            end do
          end do
        end do
      end do
      call exch_xy_rs( qnet,mythid )
      call exch_xy_rs( empmr,mythid )
      call exch_xy_rs( fu,mythid )
      call exch_xy_rs( fv,mythid )
      call exch_xy_rs( qsw,mythid )
      end


      subroutine adexf_set_aqh( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(128) apressurefile
      character*(128) aqhfile
      character*(128) atempfile
      character*(128) evapfile
      character*(128) hfluxfile
      character*(128) lwdownfile
      character*(128) lwfluxfile
      character*(128) precipfile
      character*(128) runofffile
      character*(128) sfluxfile
      character*(128) swdownfile
      character*(128) swfluxfile
      character*(128) ustressfile
      character*(128) uwindfile
      character*(128) vstressfile
      character*(128) vwindfile
      common /exf_param_c/ hfluxfile, atempfile, aqhfile, sfluxfile, 
     $evapfile, precipfile, runofffile, ustressfile, vstressfile, 
     $uwindfile, vwindfile, swfluxfile, lwfluxfile, swdownfile, 
     $lwdownfile, apressurefile

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (aqhfile .ne. ' ') then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1, sny
              do i = 1, snx
                adaqh(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adexf_set_atemp( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(128) apressurefile
      character*(128) aqhfile
      character*(128) atempfile
      character*(128) evapfile
      character*(128) hfluxfile
      character*(128) lwdownfile
      character*(128) lwfluxfile
      character*(128) precipfile
      character*(128) runofffile
      character*(128) sfluxfile
      character*(128) swdownfile
      character*(128) swfluxfile
      character*(128) ustressfile
      character*(128) uwindfile
      character*(128) vstressfile
      character*(128) vwindfile
      common /exf_param_c/ hfluxfile, atempfile, aqhfile, sfluxfile, 
     $evapfile, precipfile, runofffile, ustressfile, vstressfile, 
     $uwindfile, vwindfile, swfluxfile, lwfluxfile, swdownfile, 
     $lwdownfile, apressurefile

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (atempfile .ne. ' ') then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1, sny
              do i = 1, snx
                adatemp(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adexf_set_lwflux( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(128) apressurefile
      character*(128) aqhfile
      character*(128) atempfile
      character*(128) evapfile
      character*(128) hfluxfile
      character*(128) lwdownfile
      character*(128) lwfluxfile
      character*(128) precipfile
      character*(128) runofffile
      character*(128) sfluxfile
      character*(128) swdownfile
      character*(128) swfluxfile
      character*(128) ustressfile
      character*(128) uwindfile
      character*(128) vstressfile
      character*(128) vwindfile
      common /exf_param_c/ hfluxfile, atempfile, aqhfile, sfluxfile, 
     $evapfile, precipfile, runofffile, ustressfile, vstressfile, 
     $uwindfile, vwindfile, swfluxfile, lwfluxfile, swdownfile, 
     $lwdownfile, apressurefile

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (lwfluxfile .ne. ' ') then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1, sny
              do i = 1, snx
                adlwflux(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adexf_set_uwind( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(128) apressurefile
      character*(128) aqhfile
      character*(128) atempfile
      character*(128) evapfile
      character*(128) hfluxfile
      character*(128) lwdownfile
      character*(128) lwfluxfile
      character*(128) precipfile
      character*(128) runofffile
      character*(128) sfluxfile
      character*(128) swdownfile
      character*(128) swfluxfile
      character*(128) ustressfile
      character*(128) uwindfile
      character*(128) vstressfile
      character*(128) vwindfile
      common /exf_param_c/ hfluxfile, atempfile, aqhfile, sfluxfile, 
     $evapfile, precipfile, runofffile, ustressfile, vstressfile, 
     $uwindfile, vwindfile, swfluxfile, lwfluxfile, swdownfile, 
     $lwdownfile, apressurefile

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (uwindfile .ne. ' ') then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1, sny
              do i = 1, snx
                aduwind(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adexf_set_vwind( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      character*(128) apressurefile
      character*(128) aqhfile
      character*(128) atempfile
      character*(128) evapfile
      character*(128) hfluxfile
      character*(128) lwdownfile
      character*(128) lwfluxfile
      character*(128) precipfile
      character*(128) runofffile
      character*(128) sfluxfile
      character*(128) swdownfile
      character*(128) swfluxfile
      character*(128) ustressfile
      character*(128) uwindfile
      character*(128) vstressfile
      character*(128) vwindfile
      common /exf_param_c/ hfluxfile, atempfile, aqhfile, sfluxfile, 
     $evapfile, precipfile, runofffile, ustressfile, vstressfile, 
     $uwindfile, vwindfile, swfluxfile, lwfluxfile, swdownfile, 
     $lwdownfile, apressurefile

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (vwindfile .ne. ' ') then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1, sny
              do i = 1, snx
                advwind(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_s( imin, imax, jmin, jmax, bi, bj, 
     $klev )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,
     $bj)+adgs(i,j,klev,bi,bj)*maskc(i,j,klev,bi,bj)
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_surf( bi, bj, imin, imax, jmin, 
     $jmax )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp
      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adempmr(i,j,bi,bj) = adempmr(i,j,bi,bj)+35.*
     $adsurfacetendencys(i,j,bi,bj)*recip_drf(1)
          adsalt(i,j,1,bi,bj) = adsalt(i,j,1,bi,bj)-
     $adsurfacetendencys(i,j,bi,bj)*lambdasaltclimrelax
          adsurfacetendencys(i,j,bi,bj) = 0.d0
          adqnet(i,j,bi,bj) = adqnet(i,j,bi,bj)-adsurfacetendencyt(i,j,
     $bi,bj)*recip_cp*recip_rhonil*recip_drf(1)
          adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)-
     $adsurfacetendencyt(i,j,bi,bj)*lambdathetaclimrelax
          adsurfacetendencyt(i,j,bi,bj) = 0.d0
          adfv(i,j,bi,bj) = adfv(i,j,bi,bj)+adsurfacetendencyv(i,j,bi,
     $bj)*horivertratio*recip_rhonil*recip_drf(1)
          adsurfacetendencyv(i,j,bi,bj) = 0.d0
          adfu(i,j,bi,bj) = adfu(i,j,bi,bj)+adsurfacetendencyu(i,j,bi,
     $bj)*horivertratio*recip_rhonil*recip_drf(1)
          adsurfacetendencyu(i,j,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine adexternal_forcing_t( imin, imax, jmin, jmax, bi, bj, 
     $klev, mycurrenttime )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision minusone
      parameter ( minusone = -1. )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer two
      parameter ( two = 2 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp
      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev
      double precision mycurrenttime

C==============================================
C declare local variables
C==============================================
      double precision adswfracbh(two)
      integer i
      integer ip1
      integer j
      integer mythid
      double precision swfracb(two)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip1 = 1, two
        adswfracbh(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      swfracb(1) = abs(rf(klev))
      swfracb(2) = abs(rf(klev+1))
      call swfrac( two,minusone,mycurrenttime,mythid,swfracb )
      do j = jmin, jmax
        do i = imin, imax
          adqsw(i,j,bi,bj) = adqsw(i,j,bi,bj)-adgt(i,j,klev,bi,bj)*
     $maskc(i,j,klev,bi,bj)*(swfracb(1)-swfracb(2))*recip_cp*
     $recip_rhonil*recip_drf(klev)
        end do
      end do
      swfracb(1) = abs(rf(klev))
      swfracb(2) = abs(rf(klev+1))
      call adswfrac( two,minusone,mycurrenttime,swfracb,adswfracbh )
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)+adgt(i,j,klev,bi,bj)*maskc(i,j,klev,bi,bj)
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_u( imin, imax, jmin, jmax, bi, bj, 
     $klev )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencyu(i,j,bi,bj) = adsurfacetendencyu(i,j,bi,
     $bj)+adgu(i,j,klev,bi,bj)*fofacmom*maskw(i,j,klev,bi,bj)
          end do
        end do
      endif

      end


      subroutine adexternal_forcing_v( imin, imax, jmin, jmax, bi, bj, 
     $klev )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer klev

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (klev .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adsurfacetendencyv(i,j,bi,bj) = adsurfacetendencyv(i,j,bi,
     $bj)+adgv(i,j,klev,bi,bj)*fofacmom*masks(i,j,klev,bi,bj)
          end do
        end do
      endif

      end


      subroutine adfind_alpha( bi, bj, imin, imax, jmin, jmax, k, kref, 
     $eqn, adalphaloc )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision eosc(9,nr+1)
      double precision eosrefs(nr+1)
      double precision eosreft(nr+1)
      double precision eossig0(nr+1)
      common /parm_eos_nl/ eosc, eossig0, eosreft, eosrefs

C==============================================
C declare arguments
C==============================================
      double precision adalphaloc(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      character*(*) eqn
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer kref

C==============================================
C declare local variables
C==============================================
      double precision adsp
      double precision adtp
      integer i
      integer j
      double precision refsalt
      double precision reftemp
      double precision sp
      double precision tp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adsp = 0.d0
      adtp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (eqn .eq. 'LINEAR') then
        do j = jmin, jmax
          do i = imin, imax
            adalphaloc(i,j) = 0.d0
          end do
        end do
      else if (eqn .eq. 'POLY3') then
        reftemp = eosreft(kref)
        refsalt = eosrefs(kref)
        do j = jmin, jmax
          adsp = 0.d0
          adtp = 0.d0
          do i = imin, imax
            adsp = 0.d0
            adtp = 0.d0
            tp = theta(i,j,k,bi,bj)-reftemp
            sp = salt(i,j,k,bi,bj)-refsalt
            adsp = adsp+adalphaloc(i,j)*(2.*eosc(7,kref)*tp+eosc(8,kref)
     $*sp+eosc(4,kref)+eosc(8,kref)*sp)
            adtp = adtp+adalphaloc(i,j)*(3.*eosc(6,kref)*tp+2.*(eosc(7,
     $kref)*sp+eosc(3,kref))+3.*eosc(6,kref)*tp)
            adalphaloc(i,j) = 0.d0
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsp
            adsp = 0.d0
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtp
            adtp = 0.d0
          end do
        end do
      endif

      end


      subroutine adfind_beta( bi, bj, imin, imax, jmin, jmax, k, kref, 
     $eqn, adbetaloc )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision eosc(9,nr+1)
      double precision eosrefs(nr+1)
      double precision eosreft(nr+1)
      double precision eossig0(nr+1)
      common /parm_eos_nl/ eosc, eossig0, eosreft, eosrefs

C==============================================
C declare arguments
C==============================================
      double precision adbetaloc(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      character*(*) eqn
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer kref

C==============================================
C declare local variables
C==============================================
      double precision adsp
      double precision adtp
      integer i
      integer j
      double precision refsalt
      double precision reftemp
      double precision sp
      double precision tp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adsp = 0.d0
      adtp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (eqn .eq. 'LINEAR') then
        do j = jmin, jmax
          do i = imin, imax
            adbetaloc(i,j) = 0.d0
          end do
        end do
      else if (eqn .eq. 'POLY3') then
        reftemp = eosreft(kref)
        refsalt = eosrefs(kref)
        do j = jmin, jmax
          adsp = 0.d0
          adtp = 0.d0
          do i = imin, imax
            adsp = 0.d0
            adtp = 0.d0
            tp = theta(i,j,k,bi,bj)-reftemp
            sp = salt(i,j,k,bi,bj)-refsalt
            adsp = adsp+adbetaloc(i,j)*(3.*eosc(9,kref)*sp+2.*eosc(5,
     $kref)+3.*eosc(9,kref)*sp+2.*eosc(8,kref)*tp)
            adtp = adtp+adbetaloc(i,j)*(eosc(7,kref)*tp+2.*eosc(8,kref)*
     $sp+eosc(4,kref)+eosc(7,kref)*tp)
            adbetaloc(i,j) = 0.d0
            adsalt(i,j,k,bi,bj) = adsalt(i,j,k,bi,bj)+adsp
            adsp = 0.d0
            adtheta(i,j,k,bi,bj) = adtheta(i,j,k,bi,bj)+adtp
            adtp = 0.d0
          end do
        end do
      endif

      end


      subroutine adfind_rho( bi, bj, imin, imax, jmin, jmax, k, kref, 
     $eqn, tfld, sfld, adtfld, adsfld, adrholoc )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      double precision eosc(9,nr+1)
      double precision eosrefs(nr+1)
      double precision eosreft(nr+1)
      double precision eossig0(nr+1)
      common /parm_eos_nl/ eosc, eossig0, eosreft, eosrefs

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adrholoc(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      character*(*) eqn
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer kref
      double precision sfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision tfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision addeltasig
      double precision adsp
      double precision adtp
      integer i
      integer j
      double precision refsalt
      double precision reftemp
      double precision sp
      double precision tp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addeltasig = 0.d0
      adsp = 0.d0
      adtp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (eqn .eq. 'LINEAR') then
        do j = jmin, jmax
          do i = imin, imax
            adsfld(i,j,k,bi,bj) = adsfld(i,j,k,bi,bj)+adrholoc(i,j)*
     $rhonil*sbeta
            adtfld(i,j,k,bi,bj) = adtfld(i,j,k,bi,bj)-adrholoc(i,j)*
     $rhonil*talpha
            adrholoc(i,j) = 0.d0
          end do
        end do
      else if (eqn .eq. 'POLY3') then
        reftemp = eosreft(kref)
        refsalt = eosrefs(kref)
        do j = jmin, jmax
          addeltasig = 0.d0
          adsp = 0.d0
          adtp = 0.d0
          do i = imin, imax
            addeltasig = 0.d0
            adsp = 0.d0
            adtp = 0.d0
            tp = tfld(i,j,k,bi,bj)-reftemp
            sp = sfld(i,j,k,bi,bj)-refsalt
            addeltasig = addeltasig+adrholoc(i,j)
            adrholoc(i,j) = 0.d0
            adsp = adsp+addeltasig*((eosc(9,kref)*sp+eosc(5,kref))*sp+
     $eosc(2,kref)+(eosc(9,kref)*sp+eosc(5,kref)+eosc(9,kref)*sp)*sp+
     $(eosc(7,kref)*tp+eosc(8,kref)*sp+eosc(4,kref)+eosc(8,kref)*sp)*tp)
            adtp = adtp+addeltasig*((eosc(6,kref)*tp+eosc(7,kref)*sp+
     $eosc(3,kref))*tp+(eosc(8,kref)*sp+eosc(4,kref))*sp+eosc(1,kref)+
     $(eosc(6,kref)*tp+eosc(7,kref)*sp+eosc(3,kref)+eosc(6,kref)*tp)*tp)
            addeltasig = 0.d0
            adsfld(i,j,k,bi,bj) = adsfld(i,j,k,bi,bj)+adsp
            adsp = 0.d0
            adtfld(i,j,k,bi,bj) = adtfld(i,j,k,bi,bj)+adtp
            adtp = 0.d0
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adrholoc(i,j) = 0.d0
        end do
      end do

      end


      subroutine adfreeze( bi, bj, imin, imax, jmin, jmax, k )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      double precision tfreezing

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      tfreezing = -1.9
      do j = jmin, jmax
        do i = imin, imax
          if (gt(i,j,k,bi,bj) .lt. tfreezing) then
            adgt(i,j,k,bi,bj) = 0.d0
          endif
        end do
      end do

      end


      subroutine adgad_biharm_x( bi, bj, xa, diffk4, addel2t, addfx )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addel2t(1-olx:snx+olx,1-oly:sny+oly)
      double precision addfx(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision diffk4
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          addel2t(i-1,j) = addel2t(i-1,j)-addfx(i,j)*diffk4*xa(i,j)*
     $recip_dxc(i,j,bi,bj)*sqcosfacu(j,bi,bj)
          addel2t(i,j) = addel2t(i,j)+addfx(i,j)*diffk4*xa(i,j)*
     $recip_dxc(i,j,bi,bj)*sqcosfacu(j,bi,bj)
          addfx(i,j) = 0.d0
        end do
        addfx(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_biharm_y( bi, bj, ya, diffk4, addel2t, addfy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addel2t(1-olx:snx+olx,1-oly:sny+oly)
      double precision addfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision diffk4
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          addel2t(i,j-1) = addel2t(i,j-1)-addfy(i,j)*diffk4*ya(i,j)*
     $recip_dyc(i,j,bi,bj)
          addel2t(i,j) = addel2t(i,j)+addfy(i,j)*diffk4*ya(i,j)*
     $recip_dyc(i,j,bi,bj)
          addfy(i,j) = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        addfy(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_c2_adv_r( bi, bj, k, rtrans, tracer, adrtrans, 
     $adtracer, adwt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwt(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer km1

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      km1 = max(1,k-1)
      if (k .eq. 1 .or. k .gt. nr) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adwt(i,j) = 0.d0
          end do
        end do
      else
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adrtrans(i,j) = adrtrans(i,j)+0.5d0*adwt(i,j)*maskc(i,j,km1,
     $bi,bj)*(tracer(i,j,k,bi,bj)+tracer(i,j,km1,bi,bj))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5d0*adwt(i,
     $j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5d0*
     $adwt(i,j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adwt(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine adgad_c2_adv_x( utrans, tracer, adutrans, adtracer, 
     $adut )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adut(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adtracer(i-1,j) = adtracer(i-1,j)+0.5d0*adut(i,j)*utrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*adut(i,j)*utrans(i,j)
          adutrans(i,j) = adutrans(i,j)+0.5d0*adut(i,j)*(tracer(i,j)+
     $tracer(i-1,j))
          adut(i,j) = 0.d0
        end do
        adut(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_c2_adv_y( vtrans, tracer, advtrans, adtracer, 
     $advt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision advt(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adtracer(i,j-1) = adtracer(i,j-1)+0.5d0*advt(i,j)*vtrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*advt(i,j)*vtrans(i,j)
          advtrans(i,j) = advtrans(i,j)+0.5d0*advt(i,j)*(tracer(i,j)+
     $tracer(i,j-1))
          advt(i,j) = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        advt(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_c4_adv_r( bi, bj, k, rtrans, tracer, adrtrans, 
     $adtracer, adwt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwt(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adrj
      double precision adrjjm
      double precision adrjjp
      double precision adrjm
      double precision adrjp
      integer i
      integer j
      integer km1
      integer km2
      integer kp1
      double precision maskp1
      double precision rj
      double precision rjjm
      double precision rjjp
      double precision rjm
      double precision rjp
      double precision wth
      double precision wti
      double precision wtj

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adrj = 0.d0
      adrjjm = 0.d0
      adrjjp = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      km2 = max(1,k-2)
      km1 = max(1,k-1)
      kp1 = min(nr,k+1)
      maskp1 = 1.
      if (k .ge. nr) then
        maskp1 = 0.
      endif
      if (k .eq. 1 .or. k .gt. nr) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adwt(i,j) = 0.d0
          end do
        end do
      else if (k .eq. 2) then
        rjjm = 0.
        do j = 1-oly, sny+oly
          adrj = 0.d0
          adrjjp = 0.d0
          adrjp = 0.d0
          do i = 1-olx, snx+olx
            adrj = 0.d0
            adrjjp = 0.d0
            adrjp = 0.d0
            rjp = tracer(i,j,kp1,bi,bj)-tracer(i,j,k,bi,bj)
            rj = tracer(i,j,k,bi,bj)-tracer(i,j,km1,bi,bj)
            rjjp = (rjp-rj)*maskc(i,j,kp1,bi,bj)*maskp1
            wth = abs(rtrans(i,j))
            adrjjm = adrjjm+adwt(i,j)*maskc(i,j,km1,bi,bj)*((-(0.5d0*
     $rtrans(i,j)*onesixth))+0.5d0*wth*onesixth)
            adrjjp = adrjjp-adwt(i,j)*maskc(i,j,km1,bi,bj)*(0.5d0*
     $rtrans(i,j)*onesixth+0.5d0*wth*onesixth)
            adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*maskc(i,j,km1,bi,bj)
     $*(0.5d0*(tracer(i,j,k,bi,bj)+tracer(i,j,km1,bi,bj))-0.5d0*
     $onesixth*(rjjm+rjjp))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5d0*adwt(i,
     $j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5d0*
     $adwt(i,j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adrtrans(i,j) = adrtrans(i,j)+0.5d0*adwt(i,j)*maskc(i,j,km1,
     $bi,bj)*onesixth*(rjjm-rjjp)*sign(1.d0,rtrans(i,j))
            adwt(i,j) = 0.d0
            adrj = adrj-adrjjp*maskc(i,j,kp1,bi,bj)*maskp1
            adrjp = adrjp+adrjjp*maskc(i,j,kp1,bi,bj)*maskp1
            adrjjp = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrj
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrj
            adrj = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-adrjp
            adtracer(i,j,kp1,bi,bj) = adtracer(i,j,kp1,bi,bj)+adrjp
            adrjp = 0.d0
          end do
        end do
      else if (k .eq. nr) then
        rjjp = 0.
        do j = 1-oly, sny+oly
          adrj = 0.d0
          adrjjm = 0.d0
          adrjm = 0.d0
          do i = 1-olx, snx+olx
            adrj = 0.d0
            adrjjm = 0.d0
            adrjm = 0.d0
            rj = tracer(i,j,k,bi,bj)-tracer(i,j,km1,bi,bj)
            rjm = tracer(i,j,km1,bi,bj)-tracer(i,j,km2,bi,bj)
            rjjm = (rj-rjm)*maskc(i,j,km2,bi,bj)
            wti = abs(rtrans(i,j))
            adrjjm = adrjjm+adwt(i,j)*maskc(i,j,km1,bi,bj)*((-(0.5d0*
     $rtrans(i,j)*onesixth))+0.5d0*wti*onesixth)
            adrjjp = adrjjp-adwt(i,j)*maskc(i,j,km1,bi,bj)*(0.5d0*
     $rtrans(i,j)*onesixth+0.5d0*wti*onesixth)
            adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*maskc(i,j,km1,bi,bj)
     $*(0.5d0*(tracer(i,j,k,bi,bj)+tracer(i,j,km1,bi,bj))-0.5d0*
     $onesixth*(rjjm+rjjp))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5d0*adwt(i,
     $j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5d0*
     $adwt(i,j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adrtrans(i,j) = adrtrans(i,j)+0.5d0*adwt(i,j)*maskc(i,j,km1,
     $bi,bj)*onesixth*(rjjm-rjjp)*sign(1.d0,rtrans(i,j))
            adwt(i,j) = 0.d0
            adrj = adrj+adrjjm*maskc(i,j,km2,bi,bj)
            adrjm = adrjm-adrjjm*maskc(i,j,km2,bi,bj)
            adrjjm = 0.d0
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+adrjm
            adtracer(i,j,km2,bi,bj) = adtracer(i,j,km2,bi,bj)-adrjm
            adrjm = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrj
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrj
            adrj = 0.d0
          end do
        end do
      else
        do j = 1-oly, sny+oly
          adrj = 0.d0
          adrjjm = 0.d0
          adrjjp = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          do i = 1-olx, snx+olx
            adrj = 0.d0
            adrjjm = 0.d0
            adrjjp = 0.d0
            adrjm = 0.d0
            adrjp = 0.d0
            rjp = tracer(i,j,kp1,bi,bj)-tracer(i,j,k,bi,bj)
            rj = tracer(i,j,k,bi,bj)-tracer(i,j,km1,bi,bj)
            rjm = tracer(i,j,km1,bi,bj)-tracer(i,j,km2,bi,bj)
            rjjp = (rjp-rj)*maskc(i,j,kp1,bi,bj)
            rjjm = (rj-rjm)*maskc(i,j,km2,bi,bj)
            wtj = abs(rtrans(i,j))
            adrjjm = adrjjm+adwt(i,j)*maskc(i,j,km1,bi,bj)*((-(0.5d0*
     $rtrans(i,j)*onesixth))+0.5d0*wtj*onesixth*(1.d0-maskc(i,j,km2,bi,
     $bj)*maskc(i,j,kp1,bi,bj)))
            adrjjp = adrjjp-adwt(i,j)*maskc(i,j,km1,bi,bj)*(0.5d0*
     $rtrans(i,j)*onesixth+0.5d0*wtj*onesixth*(1.d0-maskc(i,j,km2,bi,bj)
     $*maskc(i,j,kp1,bi,bj)))
            adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*maskc(i,j,km1,bi,bj)
     $*(0.5d0*(tracer(i,j,k,bi,bj)+tracer(i,j,km1,bi,bj))-0.5d0*
     $onesixth*(rjjm+rjjp))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5d0*adwt(i,
     $j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5d0*
     $adwt(i,j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adrtrans(i,j) = adrtrans(i,j)+0.5d0*adwt(i,j)*maskc(i,j,km1,
     $bi,bj)*onesixth*(rjjm-rjjp)*(1.d0-maskc(i,j,km2,bi,bj)*maskc(i,j,
     $kp1,bi,bj))*sign(1.d0,rtrans(i,j))
            adwt(i,j) = 0.d0
            adrj = adrj+adrjjm*maskc(i,j,km2,bi,bj)
            adrjm = adrjm-adrjjm*maskc(i,j,km2,bi,bj)
            adrjjm = 0.d0
            adrj = adrj-adrjjp*maskc(i,j,kp1,bi,bj)
            adrjp = adrjp+adrjjp*maskc(i,j,kp1,bi,bj)
            adrjjp = 0.d0
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+adrjm
            adtracer(i,j,km2,bi,bj) = adtracer(i,j,km2,bi,bj)-adrjm
            adrjm = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrj
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrj
            adrj = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-adrjp
            adtracer(i,j,kp1,bi,bj) = adtracer(i,j,kp1,bi,bj)+adrjp
            adrjp = 0.d0
          end do
        end do
      endif

      end


      subroutine adgad_c4_adv_x( bi, bj, k, utrans, tracer, adutrans, 
     $adtracer, adut )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adut(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adrj
      double precision adrjjm
      double precision adrjjp
      double precision adrjm
      double precision adrjp
      integer i
      integer j
      double precision rj
      double precision rjjm
      double precision rjjp
      double precision rjm
      double precision rjp
      double precision uth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adrj = 0.d0
      adrjjm = 0.d0
      adrjjp = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        adrj = 0.d0
        adrjjm = 0.d0
        adrjjp = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        do i = 1-olx+2, snx+olx-1
          adrj = 0.d0
          adrjjm = 0.d0
          adrjjp = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          rjp = tracer(i+1,j)-tracer(i,j)
          rj = tracer(i,j)-tracer(i-1,j)
          rjm = tracer(i-1,j)-tracer(i-2,j)
          rjjp = (rjp-rj)*maskw(i+1,j,k,bi,bj)
          rjjm = (rj-rjm)*maskw(i-1,j,k,bi,bj)
          uth = abs(utrans(i,j))
          adrjjm = adrjjm-adut(i,j)*(0.5d0*utrans(i,j)*onesixth+0.5d0*
     $uth*onesixth*(1.d0-maskw(i-1,j,k,bi,bj)*maskw(i+1,j,k,bi,bj)))
          adrjjp = adrjjp+adut(i,j)*((-(0.5d0*utrans(i,j)*onesixth))+
     $0.5d0*uth*onesixth*(1.d0-maskw(i-1,j,k,bi,bj)*maskw(i+1,j,k,bi,bj)
     $))
          adtracer(i-1,j) = adtracer(i-1,j)+0.5d0*adut(i,j)*utrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*adut(i,j)*utrans(i,j)
          adutrans(i,j) = adutrans(i,j)+0.5d0*adut(i,j)*(tracer(i,j)+
     $tracer(i-1,j)-onesixth*(rjjp+rjjm))
          adutrans(i,j) = adutrans(i,j)+0.5d0*adut(i,j)*onesixth*(rjjp-
     $rjjm)*(1.d0-maskw(i-1,j,k,bi,bj)*maskw(i+1,j,k,bi,bj))*sign(1.d0,
     $utrans(i,j))
          adut(i,j) = 0.d0
          adrj = adrj+adrjjm*maskw(i-1,j,k,bi,bj)
          adrjm = adrjm-adrjjm*maskw(i-1,j,k,bi,bj)
          adrjjm = 0.d0
          adrj = adrj-adrjjp*maskw(i+1,j,k,bi,bj)
          adrjp = adrjp+adrjjp*maskw(i+1,j,k,bi,bj)
          adrjjp = 0.d0
          adtracer(i-2,j) = adtracer(i-2,j)-adrjm
          adtracer(i-1,j) = adtracer(i-1,j)+adrjm
          adrjm = 0.d0
          adtracer(i-1,j) = adtracer(i-1,j)-adrj
          adtracer(i,j) = adtracer(i,j)+adrj
          adrj = 0.d0
          adtracer(i+1,j) = adtracer(i+1,j)+adrjp
          adtracer(i,j) = adtracer(i,j)-adrjp
          adrjp = 0.d0
        end do
        adut(snx+olx,j) = 0.d0
        adut(2-olx,j) = 0.d0
        adut(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_c4_adv_y( bi, bj, k, vtrans, tracer, advtrans, 
     $adtracer, advt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision advt(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adrj
      double precision adrjjm
      double precision adrjjp
      double precision adrjm
      double precision adrjp
      integer i
      integer j
      double precision rj
      double precision rjjm
      double precision rjjp
      double precision rjm
      double precision rjp
      double precision vth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adrj = 0.d0
      adrjjm = 0.d0
      adrjjp = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+2, sny+oly-1
        adrj = 0.d0
        adrjjm = 0.d0
        adrjjp = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        do i = 1-olx, snx+olx
          adrj = 0.d0
          adrjjm = 0.d0
          adrjjp = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          rjp = tracer(i,j+1)-tracer(i,j)
          rj = tracer(i,j)-tracer(i,j-1)
          rjm = tracer(i,j-1)-tracer(i,j-2)
          rjjp = (rjp-rj)*masks(i,j+1,k,bi,bj)
          rjjm = (rj-rjm)*masks(i,j-1,k,bi,bj)
          vth = abs(vtrans(i,j))
          adrjjm = adrjjm-advt(i,j)*(0.5d0*vtrans(i,j)*onesixth+0.5d0*
     $vth*onesixth*(1.d0-masks(i,j-1,k,bi,bj)*masks(i,j+1,k,bi,bj)))
          adrjjp = adrjjp+advt(i,j)*((-(0.5d0*vtrans(i,j)*onesixth))+
     $0.5d0*vth*onesixth*(1.d0-masks(i,j-1,k,bi,bj)*masks(i,j+1,k,bi,bj)
     $))
          adtracer(i,j-1) = adtracer(i,j-1)+0.5d0*advt(i,j)*vtrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*advt(i,j)*vtrans(i,j)
          advtrans(i,j) = advtrans(i,j)+0.5d0*advt(i,j)*(tracer(i,j)+
     $tracer(i,j-1)-onesixth*(rjjp+rjjm))
          advtrans(i,j) = advtrans(i,j)+0.5d0*advt(i,j)*onesixth*(rjjp-
     $rjjm)*(1.d0-masks(i,j-1,k,bi,bj)*masks(i,j+1,k,bi,bj))*sign(1.d0,
     $vtrans(i,j))
          advt(i,j) = 0.d0
          adrj = adrj+adrjjm*masks(i,j-1,k,bi,bj)
          adrjm = adrjm-adrjjm*masks(i,j-1,k,bi,bj)
          adrjjm = 0.d0
          adrj = adrj-adrjjp*masks(i,j+1,k,bi,bj)
          adrjp = adrjp+adrjjp*masks(i,j+1,k,bi,bj)
          adrjjp = 0.d0
          adtracer(i,j-2) = adtracer(i,j-2)-adrjm
          adtracer(i,j-1) = adtracer(i,j-1)+adrjm
          adrjm = 0.d0
          adtracer(i,j-1) = adtracer(i,j-1)-adrj
          adtracer(i,j) = adtracer(i,j)+adrj
          adrj = 0.d0
          adtracer(i,j+1) = adtracer(i,j+1)+adrjp
          adtracer(i,j) = adtracer(i,j)-adrjp
          adrjp = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        advt(i,sny+oly) = 0.d0
        advt(i,2-oly) = 0.d0
        advt(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_calc_rhs( bi, bj, imin, imax, jmin, jmax, k, km1,
     $ kup, kdown, xa, ya, utrans, vtrans, rtrans, maskup, diffkh, 
     $diffk4, kappart, tracer, traceridentity, advectionscheme, mythid, 
     $adutrans, advtrans, adrtrans, adkappart, adtracer, adfvert, 
     $adgtracer )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer enum_centered_2nd
      parameter ( enum_centered_2nd = 2 )
      integer enum_centered_4th
      parameter ( enum_centered_4th = 4 )
      integer enum_dst3
      parameter ( enum_dst3 = 30 )
      integer enum_dst3_flux_limit
      parameter ( enum_dst3_flux_limit = 33 )
      integer enum_flux_limit
      parameter ( enum_flux_limit = 77 )
      integer enum_upwind_3rd
      parameter ( enum_upwind_3rd = 3 )
      integer gad_salinity
      parameter ( gad_salinity = 102 )
      integer gad_temperature
      parameter ( gad_temperature = 101 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adfvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adgtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      integer advectionscheme
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision diffk4
      double precision diffkh
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer mythid
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer traceridentity
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adaf(1-olx:snx+olx,1-oly:sny+oly)
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision addf4(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision adlocalt(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j
      double precision localt(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adaf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addf4(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adlocalt(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          localt(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          localt(i,j) = tracer(i,j,k,bi,bj)
        end do
      end do
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adfmer(i,j+1) = adfmer(i,j+1)-adgtracer(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)
          adfmer(i,j) = adfmer(i,j)+adgtracer(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)
          adfvert(i,j,kdown) = adfvert(i,j,kdown)+adgtracer(i,j,k,bi,bj)
     $*recip_hfacc(i,j,k,bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)*rkfac
          adfvert(i,j,kup) = adfvert(i,j,kup)-adgtracer(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)*rkfac
          adfzon(i+1,j) = adfzon(i+1,j)-adgtracer(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)
          adfzon(i,j) = adfzon(i,j)+adgtracer(i,j,k,bi,bj)*
     $recip_hfacc(i,j,k,bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)
        end do
      end do
      if (usekpp) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addf(i,j) = addf(i,j)+adfvert(i,j,kup)*maskup(i,j)
          end do
        end do
        if (traceridentity .eq. gad_temperature) then
          call adkpp_transport_t( imin,imax,jmin,jmax,bi,bj,k,km1,
     $kappart,adkappart,addf )
        else if (traceridentity .eq. gad_salinity) then
          call adkpp_transport_s( imin,imax,jmin,jmax,bi,bj,k,km1,
     $kappart,adkappart,addf )
        endif
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addf(i,j) = 0.d0
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          addf(i,j) = addf(i,j)+adfvert(i,j,kup)*maskup(i,j)
        end do
      end do
      if (usegmredi) then
        call adgmredi_rtransport( imin,imax,jmin,jmax,bi,bj,k,tracer,
     $adtracer,addf )
      endif
      if (implicitdiffusion) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addf(i,j) = 0.d0
          end do
        end do
      else
        call adgad_diff_r( bi,bj,k,kappart,tracer,adkappart,adtracer,
     $addf )
      endif
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adaf(i,j) = adaf(i,j)+adfvert(i,j,kup)
          end do
        end do
        if (k .ge. 2) then
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adrtrans(i,j) = adrtrans(i,j)+adaf(i,j)*(maskc(i,j,k,bi,
     $bj)-maskc(i,j,k-1,bi,bj))*tracer(i,j,k,bi,bj)
              adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adaf(i,j)*
     $(maskc(i,j,k,bi,bj)-maskc(i,j,k-1,bi,bj))*rtrans(i,j)
            end do
          end do
          if (advectionscheme .eq. enum_centered_2nd) then
            call adgad_c2_adv_r( bi,bj,k,rtrans,tracer,adrtrans,
     $adtracer,adaf )
          else if (advectionscheme .eq. enum_flux_limit) then
            call adgad_fluxlimit_adv_r( bi,bj,k,deltattracer,rtrans,
     $wvel,tracer,adrtrans,adwvel,adtracer,adaf )
          else if (advectionscheme .eq. enum_upwind_3rd) then
            call adgad_u3_adv_r( bi,bj,k,rtrans,tracer,adrtrans,
     $adtracer,adaf )
          else if (advectionscheme .eq. enum_centered_4th) then
            call adgad_c4_adv_r( bi,bj,k,rtrans,tracer,adrtrans,
     $adtracer,adaf )
          else if (advectionscheme .eq. enum_dst3) then
            call adgad_dst3_adv_r( bi,bj,k,deltattracer,rtrans,wvel,
     $tracer,adrtrans,adwvel,adtracer,adaf )
          else if (advectionscheme .eq. enum_dst3_flux_limit) then
            call adgad_dst3fl_adv_r( bi,bj,k,deltattracer,rtrans,wvel,
     $tracer,adrtrans,adwvel,adtracer,adaf )
          endif
        else
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adrtrans(i,j) = adrtrans(i,j)+adaf(i,j)*tracer(i,j,k,bi,
     $bj)
              adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adaf(i,j)*
     $rtrans(i,j)
              adaf(i,j) = 0.d0
            end do
          end do
        endif
      endif
      if (diffk4 .ne. 0.) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addf(i,j) = addf(i,j)+adfmer(i,j)
          end do
        end do
        call adgad_biharm_y( bi,bj,ya,diffk4,addf4,addf )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          addf(i,j) = addf(i,j)+adfmer(i,j)
        end do
      end do
      if (usegmredi) then
        call adgmredi_ytransport( imin,imax,jmin,jmax,bi,bj,k,ya,tracer,
     $mythid,adtracer,addf )
      endif
      if (diffkh .ne. 0.) then
        call adgad_diff_y( bi,bj,ya,diffkh,adlocalt,addf )
      else
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addf(i,j) = 0.d0
          end do
        end do
      endif
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adaf(i,j) = adaf(i,j)+adfmer(i,j)
          end do
        end do
        if (advectionscheme .eq. enum_centered_2nd) then
          call adgad_c2_adv_y( vtrans,localt,advtrans,adlocalt,adaf )
        else if (advectionscheme .eq. enum_flux_limit) then
          call adgad_fluxlimit_adv_y( bi,bj,k,deltattracer,vtrans,vvel,
     $localt,advtrans,advvel,adlocalt,adaf )
        else if (advectionscheme .eq. enum_upwind_3rd) then
          call adgad_u3_adv_y( bi,bj,k,vtrans,localt,advtrans,adlocalt,
     $adaf )
        else if (advectionscheme .eq. enum_centered_4th) then
          call adgad_c4_adv_y( bi,bj,k,vtrans,localt,advtrans,adlocalt,
     $adaf )
        else if (advectionscheme .eq. enum_dst3) then
          call adgad_dst3_adv_y( bi,bj,k,deltattracer,vtrans,vvel,
     $localt,advtrans,advvel,adlocalt,adaf )
        else if (advectionscheme .eq. enum_dst3_flux_limit) then
          call adgad_dst3fl_adv_y( bi,bj,k,deltattracer,vtrans,vvel,
     $localt,advtrans,advvel,adlocalt,adaf )
        endif
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adfmer(i,j) = 0.d0
        end do
      end do
      if (diffk4 .ne. 0.) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addf(i,j) = addf(i,j)+adfzon(i,j)
          end do
        end do
        call adgad_biharm_x( bi,bj,xa,diffk4,addf4,addf )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          addf(i,j) = addf(i,j)+adfzon(i,j)
        end do
      end do
      if (usegmredi) then
        call adgmredi_xtransport( imin,imax,jmin,jmax,bi,bj,k,xa,tracer,
     $mythid,adtracer,addf )
      endif
      if (diffkh .ne. 0.) then
        call adgad_diff_x( bi,bj,xa,diffkh,adlocalt,addf )
      endif
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adaf(i,j) = adaf(i,j)+adfzon(i,j)
          end do
        end do
        if (advectionscheme .eq. enum_centered_2nd) then
          call adgad_c2_adv_x( utrans,localt,adutrans,adlocalt,adaf )
        else if (advectionscheme .eq. enum_flux_limit) then
          call adgad_fluxlimit_adv_x( bi,bj,k,deltattracer,utrans,uvel,
     $localt,adutrans,aduvel,adlocalt,adaf )
        else if (advectionscheme .eq. enum_upwind_3rd) then
          call adgad_u3_adv_x( bi,bj,k,utrans,localt,adutrans,adlocalt,
     $adaf )
        else if (advectionscheme .eq. enum_centered_4th) then
          call adgad_c4_adv_x( bi,bj,k,utrans,localt,adutrans,adlocalt,
     $adaf )
        else if (advectionscheme .eq. enum_dst3) then
          call adgad_dst3_adv_x( bi,bj,k,deltattracer,utrans,uvel,
     $localt,adutrans,aduvel,adlocalt,adaf )
        else if (advectionscheme .eq. enum_dst3_flux_limit) then
          call adgad_dst3fl_adv_x( bi,bj,k,deltattracer,utrans,uvel,
     $localt,adutrans,aduvel,adlocalt,adaf )
        endif
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adfzon(i,j) = 0.d0
        end do
      end do
      if (diffk4 .ne. 0.) then
        call adgad_del2( bi,bj,k,adfzon,adfmer,addf4 )
        call adgad_grad_y( bi,bj,ya,adlocalt,adfmer )
        call adgad_grad_x( bi,bj,xa,adlocalt,adfzon )
      endif
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adgtracer(i,j,k,bi,bj) = 0.d0
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adlocalt(i,j)
          adlocalt(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adfvert(i,j,kup) = 0.d0
        end do
      end do

      end


      subroutine mdgad_calc_rhs( bi, bj, imin, imax, jmin, jmax, k, km1,
     $ kup, kdown, xa, ya, utrans, vtrans, rtrans, maskup, diffkh, 
     $diffk4, kappart, tracer, traceridentity, advectionscheme, fvert, 
     $gtracer, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer enum_centered_2nd
      parameter ( enum_centered_2nd = 2 )
      integer enum_centered_4th
      parameter ( enum_centered_4th = 4 )
      integer enum_dst3
      parameter ( enum_dst3 = 30 )
      integer enum_dst3_flux_limit
      parameter ( enum_dst3_flux_limit = 33 )
      integer enum_flux_limit
      parameter ( enum_flux_limit = 77 )
      integer enum_upwind_3rd
      parameter ( enum_upwind_3rd = 3 )
      integer gad_salinity
      parameter ( gad_salinity = 102 )
      integer gad_temperature
      parameter ( gad_temperature = 101 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer advectionscheme
      integer bi
      integer bj
      double precision diffk4
      double precision diffkh
      double precision fvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision gtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer mythid
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer traceridentity
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision af(1-olx:snx+olx,1-oly:sny+oly)
      double precision df(1-olx:snx+olx,1-oly:sny+oly)
      double precision df4(1-olx:snx+olx,1-oly:sny+oly)
      double precision fmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision fzon(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer j
      double precision localt(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      fvert(1,1,kdown) = fvert(1,1,kdown)
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          fzon(i,j) = 0.d0
          fmer(i,j) = 0.d0
          fvert(i,j,kup) = 0.d0
          df(i,j) = 0.d0
          df4(i,j) = 0.d0
          localt(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          localt(i,j) = tracer(i,j,k,bi,bj)
        end do
      end do
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            gtracer(i,j,k,bi,bj) = 0.d0
          end do
        end do
      endif
      if (diffk4 .ne. 0.) then
        call gad_grad_x( bi,bj,k,xa,localt,fzon,mythid )
        call gad_grad_y( bi,bj,k,ya,localt,fmer,mythid )
        call gad_del2( bi,bj,k,fzon,fmer,df4,mythid )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          fzon(i,j) = 0.d0
        end do
      end do
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        if (advectionscheme .eq. enum_centered_2nd) then
          call gad_c2_adv_x( bi,bj,k,utrans,localt,af,mythid )
        else if (advectionscheme .eq. enum_flux_limit) then
          call gad_fluxlimit_adv_x( bi,bj,k,deltattracer,utrans,uvel,
     $localt,af,mythid )
        else if (advectionscheme .eq. enum_upwind_3rd) then
          call gad_u3_adv_x( bi,bj,k,utrans,localt,af,mythid )
        else if (advectionscheme .eq. enum_centered_4th) then
          call gad_c4_adv_x( bi,bj,k,utrans,localt,af,mythid )
        else if (advectionscheme .eq. enum_dst3) then
          call gad_dst3_adv_x( bi,bj,k,deltattracer,utrans,uvel,localt,
     $af,mythid )
        else if (advectionscheme .eq. enum_dst3_flux_limit) then
          call gad_dst3fl_adv_x( bi,bj,k,deltattracer,utrans,uvel,
     $localt,af,mythid )
        endif
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            fzon(i,j) = fzon(i,j)+af(i,j)
          end do
        end do
      endif
      if (diffkh .ne. 0.) then
        call gad_diff_x( bi,bj,k,xa,diffkh,localt,df,mythid )
      else
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            df(i,j) = 0.d0
          end do
        end do
      endif
      if (usegmredi) then
        call mdgmredi_xtransport( imin,imax,jmin,jmax,bi,bj,k,xa,tracer,
     $df,mythid )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          fzon(i,j) = fzon(i,j)+df(i,j)
        end do
      end do
      if (diffk4 .ne. 0.) then
        call gad_biharm_x( bi,bj,k,xa,df4,diffk4,df,mythid )
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            fzon(i,j) = fzon(i,j)+df(i,j)
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          fmer(i,j) = 0.d0
        end do
      end do
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        if (advectionscheme .eq. enum_centered_2nd) then
          call gad_c2_adv_y( bi,bj,k,vtrans,localt,af,mythid )
        else if (advectionscheme .eq. enum_flux_limit) then
          call gad_fluxlimit_adv_y( bi,bj,k,deltattracer,vtrans,vvel,
     $localt,af,mythid )
        else if (advectionscheme .eq. enum_upwind_3rd) then
          call gad_u3_adv_y( bi,bj,k,vtrans,localt,af,mythid )
        else if (advectionscheme .eq. enum_centered_4th) then
          call gad_c4_adv_y( bi,bj,k,vtrans,localt,af,mythid )
        else if (advectionscheme .eq. enum_dst3) then
          call gad_dst3_adv_y( bi,bj,k,deltattracer,vtrans,vvel,localt,
     $af,mythid )
        else if (advectionscheme .eq. enum_dst3_flux_limit) then
          call gad_dst3fl_adv_y( bi,bj,k,deltattracer,vtrans,vvel,
     $localt,af,mythid )
        endif
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            fmer(i,j) = fmer(i,j)+af(i,j)
          end do
        end do
      endif
      if (diffkh .ne. 0.) then
        call gad_diff_y( bi,bj,k,ya,diffkh,localt,df,mythid )
      else
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            df(i,j) = 0.d0
          end do
        end do
      endif
      if (usegmredi) then
        call mdgmredi_ytransport( imin,imax,jmin,jmax,bi,bj,k,ya,tracer,
     $df,mythid )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          fmer(i,j) = fmer(i,j)+df(i,j)
        end do
      end do
      if (diffk4 .ne. 0.) then
        call gad_biharm_y( bi,bj,k,ya,df4,diffk4,df,mythid )
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            fmer(i,j) = fmer(i,j)+df(i,j)
          end do
        end do
      endif
      if (( .not. multidimadvection) .or. advectionscheme .eq. 
     $enum_centered_2nd .or. advectionscheme .eq. enum_upwind_3rd .or. 
     $advectionscheme .eq. enum_centered_4th) then
        if (k .ge. 2) then
          if (advectionscheme .eq. enum_centered_2nd) then
            call gad_c2_adv_r( bi,bj,k,rtrans,tracer,af,mythid )
          else if (advectionscheme .eq. enum_flux_limit) then
            call gad_fluxlimit_adv_r( bi,bj,k,deltattracer,rtrans,wvel,
     $tracer,af,mythid )
          else if (advectionscheme .eq. enum_upwind_3rd) then
            call gad_u3_adv_r( bi,bj,k,rtrans,tracer,af,mythid )
          else if (advectionscheme .eq. enum_centered_4th) then
            call gad_c4_adv_r( bi,bj,k,rtrans,tracer,af,mythid )
          else if (advectionscheme .eq. enum_dst3) then
            call gad_dst3_adv_r( bi,bj,k,deltattracer,rtrans,wvel,
     $tracer,af,mythid )
          else if (advectionscheme .eq. enum_dst3_flux_limit) then
            call gad_dst3fl_adv_r( bi,bj,k,deltattracer,rtrans,wvel,
     $tracer,af,mythid )
          endif
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              af(i,j) = af(i,j)+(maskc(i,j,k,bi,bj)-maskc(i,j,k-1,bi,bj)
     $)*rtrans(i,j)*tracer(i,j,k,bi,bj)
            end do
          end do
        else
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              af(i,j) = rtrans(i,j)*tracer(i,j,k,bi,bj)
            end do
          end do
        endif
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            fvert(i,j,kup) = fvert(i,j,kup)+af(i,j)
          end do
        end do
      endif
      if (implicitdiffusion) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            df(i,j) = 0.d0
          end do
        end do
      else
        call gad_diff_r( bi,bj,k,kappart,tracer,df,mythid )
      endif
      if (usegmredi) then
        call gmredi_rtransport( imin,imax,jmin,jmax,bi,bj,k,tracer,df,
     $mythid )
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          fvert(i,j,kup) = fvert(i,j,kup)+df(i,j)*maskup(i,j)
        end do
      end do
      if (usekpp) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            df(i,j) = 0.d0
          end do
        end do
        if (traceridentity .eq. gad_temperature) then
          call kpp_transport_t( imin,imax,jmin,jmax,bi,bj,k,km1,kappart,
     $df )
        else if (traceridentity .eq. gad_salinity) then
          call kpp_transport_s( imin,imax,jmin,jmax,bi,bj,k,km1,kappart,
     $df )
        endif
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            fvert(i,j,kup) = fvert(i,j,kup)+df(i,j)*maskup(i,j)
          end do
        end do
      endif
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          gtracer(i,j,k,bi,bj) = gtracer(i,j,k,bi,bj)-recip_hfacc(i,j,k,
     $bi,bj)*recip_drf(k)*recip_ra(i,j,bi,bj)*(fzon(i+1,j)-fzon(i,j)+
     $fmer(i,j+1)-fmer(i,j)+(fvert(i,j,kup)-fvert(i,j,kdown))*rkfac)
        end do
      end do
      end


      subroutine adgad_del2( bi, bj, k, addtdx, addtdy, addel2 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addel2(1-olx:snx+olx,1-oly:sny+oly)
      double precision addtdx(1-olx:snx+olx,1-oly:sny+oly)
      double precision addtdy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx
          addtdy(i,j+1) = addtdy(i,j+1)+addel2(i,j)*recip_ra(i,j,bi,bj)*
     $recip_drf(k)*recip_hfacc(i,j,k,bi,bj)
          addtdy(i,j) = addtdy(i,j)-addel2(i,j)*recip_ra(i,j,bi,bj)*
     $recip_drf(k)*recip_hfacc(i,j,k,bi,bj)
          addel2(i,j) = addel2(i,j)*recip_ra(i,j,bi,bj)*recip_drf(k)*
     $recip_hfacc(i,j,k,bi,bj)
        end do
      end do
      do j = 1-oly, sny+oly
        addel2(snx+olx,j) = 0.d0
        do i = 1-olx, snx+olx-1
          addtdx(i+1,j) = addtdx(i+1,j)+addel2(i,j)
          addtdx(i,j) = addtdx(i,j)-addel2(i,j)
          addel2(i,j) = 0.d0
        end do
      end do

      end


      subroutine adgad_diff_r( bi, bj, k, kappar, tracer, adkappar, 
     $adtracer, addfr )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addfr(1-olx:snx+olx,1-oly:sny+oly)
      double precision adkappar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision kappar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer km1

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      km1 = max(1,k-1)
      if (k .eq. 1 .or. k .gt. nr) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            addfr(i,j) = 0.d0
          end do
        end do
      else
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adkappar(i,j,k) = adkappar(i,j,k)-addfr(i,j)*ra(i,j,bi,bj)*
     $recip_drc(k)*(tracer(i,j,km1,bi,bj)-tracer(i,j,k,bi,bj))*rkfac
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+addfr(i,j)*
     $ra(i,j,bi,bj)*kappar(i,j,k)*recip_drc(k)*rkfac
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-addfr(i,j)
     $*ra(i,j,bi,bj)*kappar(i,j,k)*recip_drc(k)*rkfac
            addfr(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine adgad_diff_x( bi, bj, xa, diffkh, adtracer, addfx )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision diffkh
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adtracer(i-1,j) = adtracer(i-1,j)+addfx(i,j)*diffkh*xa(i,j)*
     $recip_dxc(i,j,bi,bj)*cosfacu(j,bi,bj)
          adtracer(i,j) = adtracer(i,j)-addfx(i,j)*diffkh*xa(i,j)*
     $recip_dxc(i,j,bi,bj)*cosfacu(j,bi,bj)
          addfx(i,j) = 0.d0
        end do
        addfx(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_diff_y( bi, bj, ya, diffkh, adtracer, addfy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addfy(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision diffkh
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adtracer(i,j-1) = adtracer(i,j-1)+addfy(i,j)*diffkh*ya(i,j)*
     $recip_dyc(i,j,bi,bj)
          adtracer(i,j) = adtracer(i,j)-addfy(i,j)*diffkh*ya(i,j)*
     $recip_dyc(i,j,bi,bj)
          addfy(i,j) = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        addfy(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_dst3_adv_r( bi_arg, bj_arg, k, dtarg, rtrans, 
     $wvel, tracer, adrtrans, adwvel, adtracer, adwt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwt(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi_arg
      integer bj_arg
      double precision dtarg
      integer k
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcfl
      double precision add0
      double precision add1
      double precision adpsim
      double precision adpsip
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision adthetam
      double precision adthetap
      integer bi
      integer bj
      double precision cfl
      double precision d0
      double precision d1
      integer i
      integer j
      integer km1
      integer km2
      integer kp1
      double precision psim
      double precision psip
      double precision rj
      double precision rjm
      double precision rjp
      double precision thetam
      double precision thetap
      double precision wth
      double precision wti

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcfl = 0.d0
      add0 = 0.d0
      add1 = 0.d0
      adpsim = 0.d0
      adpsip = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0
      adthetam = 0.d0
      adthetap = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if ( .not. multidimadvection) then
        bi = bi_arg
        bj = bj_arg
      else
        bi = 1
        bj = 1
      endif
      km2 = max(1,k-2)
      km1 = max(1,k-1)
      kp1 = min(nr,k+1)
      do j = 1-oly, sny+oly
        adcfl = 0.d0
        add0 = 0.d0
        add1 = 0.d0
        adpsim = 0.d0
        adpsip = 0.d0
        adrj = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        adthetam = 0.d0
        adthetap = 0.d0
        do i = 1-olx, snx+olx
          adcfl = 0.d0
          add0 = 0.d0
          add1 = 0.d0
          adpsim = 0.d0
          adpsip = 0.d0
          adrj = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          adthetam = 0.d0
          adthetap = 0.d0
          rjp = (tracer(i,j,k,bi,bj)-tracer(i,j,kp1,bi,bj))*maskc(i,j,
     $kp1,bi_arg,bj_arg)
          rj = (tracer(i,j,km1,bi,bj)-tracer(i,j,k,bi,bj))*maskc(i,j,k,
     $bi_arg,bj_arg)*maskc(i,j,km1,bi_arg,bj_arg)
          rjm = (tracer(i,j,km2,bi,bj)-tracer(i,j,km1,bi,bj))*maskc(i,j,
     $km1,bi_arg,bj_arg)
          cfl = abs(wvel(i,j,k,bi_arg,bj_arg)*dtarg*recip_drc(k))
          d0 = (2.-cfl)*(1.-cfl)*onesixth
          d1 = (1.-cfl*cfl)*onesixth
          thetap = rjm/(9.9999999999999d-21+rj)
          psip = d0+d1*thetap
          thetam = rjp/(9.9999999999999d-21+rj)
          psim = d0+d1*thetam
          wth = abs(rtrans(i,j))
          wti = abs(rtrans(i,j))
          adpsim = adpsim+0.5*adwt(i,j)*(rtrans(i,j)+wti)*rj
          adpsip = adpsip-0.5*adwt(i,j)*(rtrans(i,j)-wth)*rj
          adrj = adrj+adwt(i,j)*(0.5*(rtrans(i,j)+wti)*psim-0.5*
     $(rtrans(i,j)-wth)*psip)
          adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*(0.5*(tracer(i,j,k,bi,
     $bj)+psim*rj)+0.5*(tracer(i,j,km1,bi,bj)-psip*rj))
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5*adwt(i,j)*
     $(rtrans(i,j)+wti)
          adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5*adwt(i,
     $j)*(rtrans(i,j)-wth)
          adrtrans(i,j) = adrtrans(i,j)+0.5*adwt(i,j)*(tracer(i,j,k,bi,
     $bj)+psim*rj)*sign(1.d0,rtrans(i,j))
          adrtrans(i,j) = adrtrans(i,j)+(-0.5)*adwt(i,j)*(tracer(i,j,
     $km1,bi,bj)-psip*rj)*sign(1.d0,rtrans(i,j))
          adwt(i,j) = 0.d0
          add0 = add0+adpsim
          add1 = add1+adpsim*thetam
          adthetam = adthetam+adpsim*d1
          adpsim = 0.d0
          adrj = adrj-adthetam*(rjp/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjp = adrjp+adthetam/(9.9999999999999d-21+rj)
          adthetam = 0.d0
          add0 = add0+adpsip
          add1 = add1+adpsip*thetap
          adthetap = adthetap+adpsip*d1
          adpsip = 0.d0
          adrj = adrj-adthetap*(rjm/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjm = adrjm+adthetap/(9.9999999999999d-21+rj)
          adthetap = 0.d0
          adcfl = adcfl-2*add1*cfl*onesixth
          add1 = 0.d0
          adcfl = adcfl-add0*(2.-cfl+1.-cfl)*onesixth
          add0 = 0.d0
          adwvel(i,j,k,bi_arg,bj_arg) = adwvel(i,j,k,bi_arg,bj_arg)+
     $adcfl*dtarg*recip_drc(k)*sign(1.d0,wvel(i,j,k,bi_arg,bj_arg)*
     $dtarg*recip_drc(k))
          adcfl = 0.d0
          adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrjm*
     $maskc(i,j,km1,bi_arg,bj_arg)
          adtracer(i,j,km2,bi,bj) = adtracer(i,j,km2,bi,bj)+adrjm*
     $maskc(i,j,km1,bi_arg,bj_arg)
          adrjm = 0.d0
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-adrj*maskc(i,j,
     $k,bi_arg,bj_arg)*maskc(i,j,km1,bi_arg,bj_arg)
          adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+adrj*
     $maskc(i,j,k,bi_arg,bj_arg)*maskc(i,j,km1,bi_arg,bj_arg)
          adrj = 0.d0
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrjp*maskc(i,j,
     $kp1,bi_arg,bj_arg)
          adtracer(i,j,kp1,bi,bj) = adtracer(i,j,kp1,bi,bj)-adrjp*
     $maskc(i,j,kp1,bi_arg,bj_arg)
          adrjp = 0.d0
        end do
      end do

      end


      subroutine adgad_dst3_adv_x( bi, bj, k, deltat, utrans, uvel, 
     $tracer, adutrans, aduvel, adtracer, adut )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adut(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision deltat
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcfl
      double precision add0
      double precision add1
      double precision adpsim
      double precision adpsip
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision adthetam
      double precision adthetap
      double precision cfl
      double precision d0
      double precision d1
      integer i
      integer j
      double precision psim
      double precision psip
      double precision rj
      double precision rjm
      double precision rjp
      double precision thetam
      double precision thetap
      double precision uth
      double precision uti

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcfl = 0.d0
      add0 = 0.d0
      add1 = 0.d0
      adpsim = 0.d0
      adpsip = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0
      adthetam = 0.d0
      adthetap = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        adcfl = 0.d0
        add0 = 0.d0
        add1 = 0.d0
        adpsim = 0.d0
        adpsip = 0.d0
        adrj = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        adthetam = 0.d0
        adthetap = 0.d0
        do i = 1-olx+2, snx+olx-1
          adcfl = 0.d0
          add0 = 0.d0
          add1 = 0.d0
          adpsim = 0.d0
          adpsip = 0.d0
          adrj = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          adthetam = 0.d0
          adthetap = 0.d0
          rjp = (tracer(i+1,j)-tracer(i,j))*maskw(i+1,j,k,bi,bj)
          rj = (tracer(i,j)-tracer(i-1,j))*maskw(i,j,k,bi,bj)
          rjm = (tracer(i-1,j)-tracer(i-2,j))*maskw(i-1,j,k,bi,bj)
          cfl = abs(uvel(i,j,k,bi,bj)*deltat*recip_dxc(i,j,bi,bj))
          d0 = (2.-cfl)*(1.-cfl)*onesixth
          d1 = (1.-cfl*cfl)*onesixth
          thetap = rjm/(9.9999999999999d-21+rj)
          psip = d0+d1*thetap
          thetam = rjp/(9.9999999999999d-21+rj)
          psim = d0+d1*thetam
          uth = abs(utrans(i,j))
          uti = abs(utrans(i,j))
          adpsim = adpsim-0.5*adut(i,j)*(utrans(i,j)-uth)*rj
          adpsip = adpsip+0.5*adut(i,j)*(utrans(i,j)+uti)*rj
          adrj = adrj+adut(i,j)*(0.5*(utrans(i,j)+uti)*psip-0.5*
     $(utrans(i,j)-uth)*psim)
          adtracer(i-1,j) = adtracer(i-1,j)+0.5*adut(i,j)*(utrans(i,j)+
     $uti)
          adtracer(i,j) = adtracer(i,j)+0.5*adut(i,j)*(utrans(i,j)-uth)
          adutrans(i,j) = adutrans(i,j)+adut(i,j)*(0.5*(tracer(i-1,j)+
     $psip*rj)+0.5*(tracer(i,j)-psim*rj))
          adutrans(i,j) = adutrans(i,j)+0.5*adut(i,j)*(tracer(i-1,j)+
     $psip*rj)*sign(1.d0,utrans(i,j))
          adutrans(i,j) = adutrans(i,j)+(-0.5)*adut(i,j)*(tracer(i,j)-
     $psim*rj)*sign(1.d0,utrans(i,j))
          adut(i,j) = 0.d0
          add0 = add0+adpsim
          add1 = add1+adpsim*thetam
          adthetam = adthetam+adpsim*d1
          adpsim = 0.d0
          adrj = adrj-adthetam*(rjp/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjp = adrjp+adthetam/(9.9999999999999d-21+rj)
          adthetam = 0.d0
          add0 = add0+adpsip
          add1 = add1+adpsip*thetap
          adthetap = adthetap+adpsip*d1
          adpsip = 0.d0
          adrj = adrj-adthetap*(rjm/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjm = adrjm+adthetap/(9.9999999999999d-21+rj)
          adthetap = 0.d0
          adcfl = adcfl-2*add1*cfl*onesixth
          add1 = 0.d0
          adcfl = adcfl-add0*(2.-cfl+1.-cfl)*onesixth
          add0 = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adcfl*deltat*
     $recip_dxc(i,j,bi,bj)*sign(1.d0,uvel(i,j,k,bi,bj)*deltat*
     $recip_dxc(i,j,bi,bj))
          adcfl = 0.d0
          adtracer(i-2,j) = adtracer(i-2,j)-adrjm*maskw(i-1,j,k,bi,bj)
          adtracer(i-1,j) = adtracer(i-1,j)+adrjm*maskw(i-1,j,k,bi,bj)
          adrjm = 0.d0
          adtracer(i-1,j) = adtracer(i-1,j)-adrj*maskw(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*maskw(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i+1,j) = adtracer(i+1,j)+adrjp*maskw(i+1,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*maskw(i+1,j,k,bi,bj)
          adrjp = 0.d0
        end do
        adut(snx+olx,j) = 0.d0
        adut(2-olx,j) = 0.d0
        adut(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_dst3_adv_y( bi, bj, k, deltat, vtrans, vvel, 
     $tracer, advtrans, advvel, adtracer, advt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision advt(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision deltat
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcfl
      double precision add0
      double precision add1
      double precision adpsim
      double precision adpsip
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision adthetam
      double precision adthetap
      double precision cfl
      double precision d0
      double precision d1
      integer i
      integer j
      double precision psim
      double precision psip
      double precision rj
      double precision rjm
      double precision rjp
      double precision thetam
      double precision thetap
      double precision vth
      double precision vti

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcfl = 0.d0
      add0 = 0.d0
      add1 = 0.d0
      adpsim = 0.d0
      adpsip = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0
      adthetam = 0.d0
      adthetap = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+2, sny+oly-1
        adcfl = 0.d0
        add0 = 0.d0
        add1 = 0.d0
        adpsim = 0.d0
        adpsip = 0.d0
        adrj = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        adthetam = 0.d0
        adthetap = 0.d0
        do i = 1-olx, snx+olx
          adcfl = 0.d0
          add0 = 0.d0
          add1 = 0.d0
          adpsim = 0.d0
          adpsip = 0.d0
          adrj = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          adthetam = 0.d0
          adthetap = 0.d0
          rjp = (tracer(i,j+1)-tracer(i,j))*masks(i,j+1,k,bi,bj)
          rj = (tracer(i,j)-tracer(i,j-1))*masks(i,j,k,bi,bj)
          rjm = (tracer(i,j-1)-tracer(i,j-2))*masks(i,j-1,k,bi,bj)
          cfl = abs(vvel(i,j,k,bi,bj)*deltat*recip_dyc(i,j,bi,bj))
          d0 = (2.-cfl)*(1.-cfl)*onesixth
          d1 = (1.-cfl*cfl)*onesixth
          thetap = rjm/(9.9999999999999d-21+rj)
          psip = d0+d1*thetap
          thetam = rjp/(9.9999999999999d-21+rj)
          psim = d0+d1*thetam
          vth = abs(vtrans(i,j))
          vti = abs(vtrans(i,j))
          adpsim = adpsim-0.5*advt(i,j)*(vtrans(i,j)-vth)*rj
          adpsip = adpsip+0.5*advt(i,j)*(vtrans(i,j)+vti)*rj
          adrj = adrj+advt(i,j)*(0.5*(vtrans(i,j)+vti)*psip-0.5*
     $(vtrans(i,j)-vth)*psim)
          adtracer(i,j-1) = adtracer(i,j-1)+0.5*advt(i,j)*(vtrans(i,j)+
     $vti)
          adtracer(i,j) = adtracer(i,j)+0.5*advt(i,j)*(vtrans(i,j)-vth)
          advtrans(i,j) = advtrans(i,j)+advt(i,j)*(0.5*(tracer(i,j-1)+
     $psip*rj)+0.5*(tracer(i,j)-psim*rj))
          advtrans(i,j) = advtrans(i,j)+0.5*advt(i,j)*(tracer(i,j-1)+
     $psip*rj)*sign(1.d0,vtrans(i,j))
          advtrans(i,j) = advtrans(i,j)+(-0.5)*advt(i,j)*(tracer(i,j)-
     $psim*rj)*sign(1.d0,vtrans(i,j))
          advt(i,j) = 0.d0
          add0 = add0+adpsim
          add1 = add1+adpsim*thetam
          adthetam = adthetam+adpsim*d1
          adpsim = 0.d0
          adrj = adrj-adthetam*(rjp/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjp = adrjp+adthetam/(9.9999999999999d-21+rj)
          adthetam = 0.d0
          add0 = add0+adpsip
          add1 = add1+adpsip*thetap
          adthetap = adthetap+adpsip*d1
          adpsip = 0.d0
          adrj = adrj-adthetap*(rjm/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjm = adrjm+adthetap/(9.9999999999999d-21+rj)
          adthetap = 0.d0
          adcfl = adcfl-2*add1*cfl*onesixth
          add1 = 0.d0
          adcfl = adcfl-add0*(2.-cfl+1.-cfl)*onesixth
          add0 = 0.d0
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adcfl*deltat*
     $recip_dyc(i,j,bi,bj)*sign(1.d0,vvel(i,j,k,bi,bj)*deltat*
     $recip_dyc(i,j,bi,bj))
          adcfl = 0.d0
          adtracer(i,j-2) = adtracer(i,j-2)-adrjm*masks(i,j-1,k,bi,bj)
          adtracer(i,j-1) = adtracer(i,j-1)+adrjm*masks(i,j-1,k,bi,bj)
          adrjm = 0.d0
          adtracer(i,j-1) = adtracer(i,j-1)-adrj*masks(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*masks(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i,j+1) = adtracer(i,j+1)+adrjp*masks(i,j+1,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*masks(i,j+1,k,bi,bj)
          adrjp = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        advt(i,sny+oly) = 0.d0
        advt(i,2-oly) = 0.d0
        advt(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_dst3fl_adv_r( bi_arg, bj_arg, k, dtarg, rtrans, 
     $wvel, tracer, adrtrans, adwvel, adtracer, adwt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwt(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi_arg
      integer bj_arg
      double precision dtarg
      integer k
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcfl
      double precision add0
      double precision add1
      double precision adpsim
      double precision adpsip
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision adthetam
      double precision adthetap
      integer bi
      integer bj
      double precision cfl
      double precision d0
      double precision d1
      integer i
      integer j
      integer km1
      integer km2
      integer kp1
      double precision psim
      double precision psip
      double precision rj
      double precision rjm
      double precision rjp
      double precision thetam
      double precision thetap
      double precision wth
      double precision wti

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcfl = 0.d0
      add0 = 0.d0
      add1 = 0.d0
      adpsim = 0.d0
      adpsip = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0
      adthetam = 0.d0
      adthetap = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if ( .not. multidimadvection) then
        bi = bi_arg
        bj = bj_arg
      else
        bi = 1
        bj = 1
      endif
      km2 = max(1,k-2)
      km1 = max(1,k-1)
      kp1 = min(nr,k+1)
      do j = 1-oly, sny+oly
        adcfl = 0.d0
        add0 = 0.d0
        add1 = 0.d0
        adpsim = 0.d0
        adpsip = 0.d0
        adrj = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        adthetam = 0.d0
        adthetap = 0.d0
        do i = 1-olx, snx+olx
          adcfl = 0.d0
          add0 = 0.d0
          add1 = 0.d0
          adpsim = 0.d0
          adpsip = 0.d0
          adrj = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          adthetam = 0.d0
          adthetap = 0.d0
          rjp = (tracer(i,j,k,bi,bj)-tracer(i,j,kp1,bi,bj))*maskc(i,j,
     $kp1,bi_arg,bj_arg)
          rj = (tracer(i,j,km1,bi,bj)-tracer(i,j,k,bi,bj))*maskc(i,j,k,
     $bi_arg,bj_arg)*maskc(i,j,km1,bi_arg,bj_arg)
          rjm = (tracer(i,j,km2,bi,bj)-tracer(i,j,km1,bi,bj))*maskc(i,j,
     $km1,bi_arg,bj_arg)
          cfl = abs(wvel(i,j,k,bi_arg,bj_arg)*dtarg*recip_drc(k))
          d0 = (2.d0-cfl)*(1.-cfl)*onesixth
          d1 = (1.d0-cfl*cfl)*onesixth
          thetap = rjm/(9.9999999999999d-21+rj)
          psip = d0+d1*thetap
          psip = max(0.d0,min(min(1.d0,psip),(1.d0-cfl)/
     $(9.9999999999999d-21+cfl)*thetap))
          thetam = rjp/(9.9999999999999d-21+rj)
          psim = d0+d1*thetam
          psim = max(0.d0,min(min(1.d0,psim),(1.d0-cfl)/
     $(9.9999999999999d-21+cfl)*thetam))
          wth = abs(rtrans(i,j))
          wti = abs(rtrans(i,j))
          adpsim = adpsim+0.5*adwt(i,j)*(rtrans(i,j)+wti)*rj
          adpsip = adpsip-0.5*adwt(i,j)*(rtrans(i,j)-wth)*rj
          adrj = adrj+adwt(i,j)*(0.5*(rtrans(i,j)+wti)*psim-0.5*
     $(rtrans(i,j)-wth)*psip)
          adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*(0.5*(tracer(i,j,k,bi,
     $bj)+psim*rj)+0.5*(tracer(i,j,km1,bi,bj)-psip*rj))
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5*adwt(i,j)*
     $(rtrans(i,j)+wti)
          adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5*adwt(i,
     $j)*(rtrans(i,j)-wth)
          adrtrans(i,j) = adrtrans(i,j)+0.5*adwt(i,j)*(tracer(i,j,k,bi,
     $bj)+psim*rj)*sign(1.d0,rtrans(i,j))
          adrtrans(i,j) = adrtrans(i,j)+(-0.5)*adwt(i,j)*(tracer(i,j,
     $km1,bi,bj)-psip*rj)*sign(1.d0,rtrans(i,j))
          adwt(i,j) = 0.d0
          psim = d0+d1*thetam
          adcfl = adcfl+adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psim),
     $(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5-sign(0.5d0,
     $psim-1.d0))*((-1)/(9.9999999999999d-21+cfl)-(1.d0-cfl)/
     $((9.9999999999999d-21+cfl)*(9.9999999999999d-21+cfl)))*thetam
          adthetam = adthetam+adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,
     $psim),(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5-
     $sign(0.5d0,psim-1.d0))*((1.d0-cfl)/(9.9999999999999d-21+cfl))
          adpsim = adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psim),(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5+sign(0.5d0,(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetam-min(1.d0,psim)))*(0.5-
     $sign(0.5d0,psim-1.d0))
          add0 = add0+adpsim
          add1 = add1+adpsim*thetam
          adthetam = adthetam+adpsim*d1
          adpsim = 0.d0
          adrj = adrj-adthetam*(rjp/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjp = adrjp+adthetam/(9.9999999999999d-21+rj)
          adthetam = 0.d0
          psip = d0+d1*thetap
          adcfl = adcfl+adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psip),
     $(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5-sign(0.5d0,
     $psip-1.d0))*((-1)/(9.9999999999999d-21+cfl)-(1.d0-cfl)/
     $((9.9999999999999d-21+cfl)*(9.9999999999999d-21+cfl)))*thetap
          adthetap = adthetap+adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,
     $psip),(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5-
     $sign(0.5d0,psip-1.d0))*((1.d0-cfl)/(9.9999999999999d-21+cfl))
          adpsip = adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psip),(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5+sign(0.5d0,(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetap-min(1.d0,psip)))*(0.5-
     $sign(0.5d0,psip-1.d0))
          add0 = add0+adpsip
          add1 = add1+adpsip*thetap
          adthetap = adthetap+adpsip*d1
          adpsip = 0.d0
          adrj = adrj-adthetap*(rjm/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjm = adrjm+adthetap/(9.9999999999999d-21+rj)
          adthetap = 0.d0
          adcfl = adcfl-2*add1*cfl*onesixth
          add1 = 0.d0
          adcfl = adcfl-add0*(2.d0-cfl+1.-cfl)*onesixth
          add0 = 0.d0
          adwvel(i,j,k,bi_arg,bj_arg) = adwvel(i,j,k,bi_arg,bj_arg)+
     $adcfl*dtarg*recip_drc(k)*sign(1.d0,wvel(i,j,k,bi_arg,bj_arg)*
     $dtarg*recip_drc(k))
          adcfl = 0.d0
          adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrjm*
     $maskc(i,j,km1,bi_arg,bj_arg)
          adtracer(i,j,km2,bi,bj) = adtracer(i,j,km2,bi,bj)+adrjm*
     $maskc(i,j,km1,bi_arg,bj_arg)
          adrjm = 0.d0
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-adrj*maskc(i,j,
     $k,bi_arg,bj_arg)*maskc(i,j,km1,bi_arg,bj_arg)
          adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+adrj*
     $maskc(i,j,k,bi_arg,bj_arg)*maskc(i,j,km1,bi_arg,bj_arg)
          adrj = 0.d0
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrjp*maskc(i,j,
     $kp1,bi_arg,bj_arg)
          adtracer(i,j,kp1,bi,bj) = adtracer(i,j,kp1,bi,bj)-adrjp*
     $maskc(i,j,kp1,bi_arg,bj_arg)
          adrjp = 0.d0
        end do
      end do

      end


      subroutine adgad_dst3fl_adv_x( bi, bj, k, deltat, utrans, uvel, 
     $tracer, adutrans, aduvel, adtracer, adut )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adut(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision deltat
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcfl
      double precision add0
      double precision add1
      double precision adpsim
      double precision adpsip
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision adthetam
      double precision adthetap
      double precision cfl
      double precision d0
      double precision d1
      integer i
      integer j
      double precision psim
      double precision psip
      double precision rj
      double precision rjm
      double precision rjp
      double precision thetam
      double precision thetap
      double precision uth
      double precision uti

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcfl = 0.d0
      add0 = 0.d0
      add1 = 0.d0
      adpsim = 0.d0
      adpsip = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0
      adthetam = 0.d0
      adthetap = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        adcfl = 0.d0
        add0 = 0.d0
        add1 = 0.d0
        adpsim = 0.d0
        adpsip = 0.d0
        adrj = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        adthetam = 0.d0
        adthetap = 0.d0
        do i = 1-olx+2, snx+olx-1
          adcfl = 0.d0
          add0 = 0.d0
          add1 = 0.d0
          adpsim = 0.d0
          adpsip = 0.d0
          adrj = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          adthetam = 0.d0
          adthetap = 0.d0
          rjp = (tracer(i+1,j)-tracer(i,j))*maskw(i+1,j,k,bi,bj)
          rj = (tracer(i,j)-tracer(i-1,j))*maskw(i,j,k,bi,bj)
          rjm = (tracer(i-1,j)-tracer(i-2,j))*maskw(i-1,j,k,bi,bj)
          cfl = abs(uvel(i,j,k,bi,bj)*deltat*recip_dxc(i,j,bi,bj))
          d0 = (2.d0-cfl)*(1.d0-cfl)*onesixth
          d1 = (1.d0-cfl*cfl)*onesixth
          thetap = rjm/(9.9999999999999d-21+rj)
          psip = d0+d1*thetap
          psip = max(0.d0,min(min(1.d0,psip),(1.d0-cfl)/
     $(9.9999999999999d-21+cfl)*thetap))
          thetam = rjp/(9.9999999999999d-21+rj)
          psim = d0+d1*thetam
          psim = max(0.d0,min(min(1.d0,psim),(1.d0-cfl)/
     $(9.9999999999999d-21+cfl)*thetam))
          uth = abs(utrans(i,j))
          uti = abs(utrans(i,j))
          adpsim = adpsim-0.5*adut(i,j)*(utrans(i,j)-uth)*rj
          adpsip = adpsip+0.5*adut(i,j)*(utrans(i,j)+uti)*rj
          adrj = adrj+adut(i,j)*(0.5*(utrans(i,j)+uti)*psip-0.5*
     $(utrans(i,j)-uth)*psim)
          adtracer(i-1,j) = adtracer(i-1,j)+0.5*adut(i,j)*(utrans(i,j)+
     $uti)
          adtracer(i,j) = adtracer(i,j)+0.5*adut(i,j)*(utrans(i,j)-uth)
          adutrans(i,j) = adutrans(i,j)+adut(i,j)*(0.5*(tracer(i-1,j)+
     $psip*rj)+0.5*(tracer(i,j)-psim*rj))
          adutrans(i,j) = adutrans(i,j)+0.5*adut(i,j)*(tracer(i-1,j)+
     $psip*rj)*sign(1.d0,utrans(i,j))
          adutrans(i,j) = adutrans(i,j)+(-0.5)*adut(i,j)*(tracer(i,j)-
     $psim*rj)*sign(1.d0,utrans(i,j))
          adut(i,j) = 0.d0
          psim = d0+d1*thetam
          adcfl = adcfl+adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psim),
     $(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5-sign(0.5d0,
     $psim-1.d0))*((-1)/(9.9999999999999d-21+cfl)-(1.d0-cfl)/
     $((9.9999999999999d-21+cfl)*(9.9999999999999d-21+cfl)))*thetam
          adthetam = adthetam+adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,
     $psim),(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5-
     $sign(0.5d0,psim-1.d0))*((1.d0-cfl)/(9.9999999999999d-21+cfl))
          adpsim = adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psim),(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5+sign(0.5d0,(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetam-min(1.d0,psim)))*(0.5-
     $sign(0.5d0,psim-1.d0))
          add0 = add0+adpsim
          add1 = add1+adpsim*thetam
          adthetam = adthetam+adpsim*d1
          adpsim = 0.d0
          adrj = adrj-adthetam*(rjp/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjp = adrjp+adthetam/(9.9999999999999d-21+rj)
          adthetam = 0.d0
          psip = d0+d1*thetap
          adcfl = adcfl+adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psip),
     $(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5-sign(0.5d0,
     $psip-1.d0))*((-1)/(9.9999999999999d-21+cfl)-(1.d0-cfl)/
     $((9.9999999999999d-21+cfl)*(9.9999999999999d-21+cfl)))*thetap
          adthetap = adthetap+adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,
     $psip),(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5-
     $sign(0.5d0,psip-1.d0))*((1.d0-cfl)/(9.9999999999999d-21+cfl))
          adpsip = adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psip),(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5+sign(0.5d0,(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetap-min(1.d0,psip)))*(0.5-
     $sign(0.5d0,psip-1.d0))
          add0 = add0+adpsip
          add1 = add1+adpsip*thetap
          adthetap = adthetap+adpsip*d1
          adpsip = 0.d0
          adrj = adrj-adthetap*(rjm/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjm = adrjm+adthetap/(9.9999999999999d-21+rj)
          adthetap = 0.d0
          adcfl = adcfl-2*add1*cfl*onesixth
          add1 = 0.d0
          adcfl = adcfl-add0*(2.d0-cfl+1.d0-cfl)*onesixth
          add0 = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adcfl*deltat*
     $recip_dxc(i,j,bi,bj)*sign(1.d0,uvel(i,j,k,bi,bj)*deltat*
     $recip_dxc(i,j,bi,bj))
          adcfl = 0.d0
          adtracer(i-2,j) = adtracer(i-2,j)-adrjm*maskw(i-1,j,k,bi,bj)
          adtracer(i-1,j) = adtracer(i-1,j)+adrjm*maskw(i-1,j,k,bi,bj)
          adrjm = 0.d0
          adtracer(i-1,j) = adtracer(i-1,j)-adrj*maskw(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*maskw(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i+1,j) = adtracer(i+1,j)+adrjp*maskw(i+1,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*maskw(i+1,j,k,bi,bj)
          adrjp = 0.d0
        end do
        adut(snx+olx,j) = 0.d0
        adut(2-olx,j) = 0.d0
        adut(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_dst3fl_adv_y( bi, bj, k, deltat, vtrans, vvel, 
     $tracer, advtrans, advvel, adtracer, advt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision advt(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision deltat
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcfl
      double precision add0
      double precision add1
      double precision adpsim
      double precision adpsip
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision adthetam
      double precision adthetap
      double precision cfl
      double precision d0
      double precision d1
      integer i
      integer j
      double precision psim
      double precision psip
      double precision rj
      double precision rjm
      double precision rjp
      double precision thetam
      double precision thetap
      double precision vth
      double precision vti

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcfl = 0.d0
      add0 = 0.d0
      add1 = 0.d0
      adpsim = 0.d0
      adpsip = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0
      adthetam = 0.d0
      adthetap = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+2, sny+oly-1
        adcfl = 0.d0
        add0 = 0.d0
        add1 = 0.d0
        adpsim = 0.d0
        adpsip = 0.d0
        adrj = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        adthetam = 0.d0
        adthetap = 0.d0
        do i = 1-olx, snx+olx
          adcfl = 0.d0
          add0 = 0.d0
          add1 = 0.d0
          adpsim = 0.d0
          adpsip = 0.d0
          adrj = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          adthetam = 0.d0
          adthetap = 0.d0
          rjp = (tracer(i,j+1)-tracer(i,j))*masks(i,j+1,k,bi,bj)
          rj = (tracer(i,j)-tracer(i,j-1))*masks(i,j,k,bi,bj)
          rjm = (tracer(i,j-1)-tracer(i,j-2))*masks(i,j-1,k,bi,bj)
          cfl = abs(vvel(i,j,k,bi,bj)*deltat*recip_dyc(i,j,bi,bj))
          d0 = (2.d0-cfl)*(1.d0-cfl)*onesixth
          d1 = (1.d0-cfl*cfl)*onesixth
          thetap = rjm/(9.9999999999999d-21+rj)
          psip = d0+d1*thetap
          psip = max(0.d0,min(min(1.d0,psip),(1.d0-cfl)/
     $(9.9999999999999d-21+cfl)*thetap))
          thetam = rjp/(9.9999999999999d-21+rj)
          psim = d0+d1*thetam
          psim = max(0.d0,min(min(1.d0,psim),(1.d0-cfl)/
     $(9.9999999999999d-21+cfl)*thetam))
          vth = abs(vtrans(i,j))
          vti = abs(vtrans(i,j))
          adpsim = adpsim-0.5*advt(i,j)*(vtrans(i,j)-vth)*rj
          adpsip = adpsip+0.5*advt(i,j)*(vtrans(i,j)+vti)*rj
          adrj = adrj+advt(i,j)*(0.5*(vtrans(i,j)+vti)*psip-0.5*
     $(vtrans(i,j)-vth)*psim)
          adtracer(i,j-1) = adtracer(i,j-1)+0.5*advt(i,j)*(vtrans(i,j)+
     $vti)
          adtracer(i,j) = adtracer(i,j)+0.5*advt(i,j)*(vtrans(i,j)-vth)
          advtrans(i,j) = advtrans(i,j)+advt(i,j)*(0.5*(tracer(i,j-1)+
     $psip*rj)+0.5*(tracer(i,j)-psim*rj))
          advtrans(i,j) = advtrans(i,j)+0.5*advt(i,j)*(tracer(i,j-1)+
     $psip*rj)*sign(1.d0,vtrans(i,j))
          advtrans(i,j) = advtrans(i,j)+(-0.5)*advt(i,j)*(tracer(i,j)-
     $psim*rj)*sign(1.d0,vtrans(i,j))
          advt(i,j) = 0.d0
          psim = d0+d1*thetam
          adcfl = adcfl+adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psim),
     $(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5-sign(0.5d0,
     $psim-1.d0))*((-1)/(9.9999999999999d-21+cfl)-(1.d0-cfl)/
     $((9.9999999999999d-21+cfl)*(9.9999999999999d-21+cfl)))*thetam
          adthetam = adthetam+adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,
     $psim),(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5-
     $sign(0.5d0,psim-1.d0))*((1.d0-cfl)/(9.9999999999999d-21+cfl))
          adpsim = adpsim*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psim),(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetam)))*(0.5+sign(0.5d0,(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetam-min(1.d0,psim)))*(0.5-
     $sign(0.5d0,psim-1.d0))
          add0 = add0+adpsim
          add1 = add1+adpsim*thetam
          adthetam = adthetam+adpsim*d1
          adpsim = 0.d0
          adrj = adrj-adthetam*(rjp/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjp = adrjp+adthetam/(9.9999999999999d-21+rj)
          adthetam = 0.d0
          psip = d0+d1*thetap
          adcfl = adcfl+adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psip),
     $(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5-sign(0.5d0,
     $psip-1.d0))*((-1)/(9.9999999999999d-21+cfl)-(1.d0-cfl)/
     $((9.9999999999999d-21+cfl)*(9.9999999999999d-21+cfl)))*thetap
          adthetap = adthetap+adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,
     $psip),(1.d0-cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5-
     $sign(0.5d0,psip-1.d0))*((1.d0-cfl)/(9.9999999999999d-21+cfl))
          adpsip = adpsip*(0.5-sign(0.5d0,0.d0-min(min(1.d0,psip),(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetap)))*(0.5+sign(0.5d0,(1.d0-
     $cfl)/(9.9999999999999d-21+cfl)*thetap-min(1.d0,psip)))*(0.5-
     $sign(0.5d0,psip-1.d0))
          add0 = add0+adpsip
          add1 = add1+adpsip*thetap
          adthetap = adthetap+adpsip*d1
          adpsip = 0.d0
          adrj = adrj-adthetap*(rjm/((9.9999999999999d-21+rj)*
     $(9.9999999999999d-21+rj)))
          adrjm = adrjm+adthetap/(9.9999999999999d-21+rj)
          adthetap = 0.d0
          adcfl = adcfl-2*add1*cfl*onesixth
          add1 = 0.d0
          adcfl = adcfl-add0*(2.d0-cfl+1.d0-cfl)*onesixth
          add0 = 0.d0
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adcfl*deltat*
     $recip_dyc(i,j,bi,bj)*sign(1.d0,vvel(i,j,k,bi,bj)*deltat*
     $recip_dyc(i,j,bi,bj))
          adcfl = 0.d0
          adtracer(i,j-2) = adtracer(i,j-2)-adrjm*masks(i,j-1,k,bi,bj)
          adtracer(i,j-1) = adtracer(i,j-1)+adrjm*masks(i,j-1,k,bi,bj)
          adrjm = 0.d0
          adtracer(i,j-1) = adtracer(i,j-1)-adrj*masks(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*masks(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i,j+1) = adtracer(i,j+1)+adrjp*masks(i,j+1,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*masks(i,j+1,k,bi,bj)
          adrjp = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        advt(i,sny+oly) = 0.d0
        advt(i,2-oly) = 0.d0
        advt(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_fluxlimit_adv_r( bi_arg, bj_arg, k, dtarg, 
     $rtrans, wvel, tracer, adrtrans, adwvel, adtracer, adwt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwt(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi_arg
      integer bj_arg
      double precision dtarg
      integer k
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcr
      double precision adrj
      double precision adrjm
      double precision adrjp
      integer bi
      integer bj
      double precision cr
      integer i
      integer j
      integer km1
      integer km2
      integer kp1
      double precision rj
      double precision rjm
      double precision rjp
      double precision wth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcr = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if ( .not. multidimadvection) then
        bi = bi_arg
        bj = bj_arg
      else
        bi = 1
        bj = 1
      endif
      km2 = max(1,k-2)
      km1 = max(1,k-1)
      kp1 = min(nr,k+1)
      if (k .gt. nr) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adwt(i,j) = 0.d0
          end do
        end do
      else
        do j = sny+oly, 1-oly, -1
          do i = snx+olx, 1-olx, -1
            rjp = (tracer(i,j,kp1,bi,bj)-tracer(i,j,k,bi,bj))*maskc(i,j,
     $kp1,bi_arg,bj_arg)
            rj = tracer(i,j,k,bi,bj)-tracer(i,j,km1,bi,bj)
            rjm = (tracer(i,j,km1,bi,bj)-tracer(i,j,km2,bi,bj))*maskc(i,
     $j,km2,bi_arg,bj_arg)
            if (rj .ne. 0.) then
              if (rtrans(i,j) .lt. 0.) then
                cr = rjm/rj
              else
                cr = rjp/rj
              endif
            else
              if (rtrans(i,j) .lt. 0.) then
                cr = rjm*1.e+20
              else
                cr = rjp*1.e+20
              endif
            endif
            cr = max(0.d0,max(min(1.d0,2.d0*cr),min(2.d0,cr)))
            wth = abs(rtrans(i,j))
            adcr = adcr+0.5d0*adwt(i,j)*maskc(i,j,km1,bi_arg,bj_arg)*((-
     $wth)+rtrans(i,j)*wvel(i,j,k,bi_arg,bj_arg)*dtarg*recip_drc(k))*rj
            adrj = adrj+0.5d0*adwt(i,j)*maskc(i,j,km1,bi_arg,bj_arg)*
     $(wth*(1-cr)+rtrans(i,j)*wvel(i,j,k,bi_arg,bj_arg)*dtarg*
     $recip_drc(k)*cr)
            adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*maskc(i,j,km1,
     $bi_arg,bj_arg)*(0.5d0*(tracer(i,j,k,bi,bj)+tracer(i,j,km1,bi,bj))+
     $0.5d0*wvel(i,j,k,bi_arg,bj_arg)*dtarg*recip_drc(k)*cr*rj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5d0*adwt(i,
     $j)*maskc(i,j,km1,bi_arg,bj_arg)*rtrans(i,j)
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5d0*
     $adwt(i,j)*maskc(i,j,km1,bi_arg,bj_arg)*rtrans(i,j)
            adwvel(i,j,k,bi_arg,bj_arg) = adwvel(i,j,k,bi_arg,bj_arg)+
     $0.5d0*adwt(i,j)*maskc(i,j,km1,bi_arg,bj_arg)*rtrans(i,j)*dtarg*
     $recip_drc(k)*cr*rj
            adrtrans(i,j) = adrtrans(i,j)+0.5d0*adwt(i,j)*maskc(i,j,km1,
     $bi_arg,bj_arg)*(1-cr)*rj*sign(1.d0,rtrans(i,j))
            adwt(i,j) = 0.d0
            if (rj .ne. 0.) then
              if (rtrans(i,j) .lt. 0.) then
                cr = rjm/rj
              else
                cr = rjp/rj
              endif
            else
              if (rtrans(i,j) .lt. 0.) then
                cr = rjm*1.e+20
              else
                cr = rjp*1.e+20
              endif
            endif
            adcr = adcr*(0.5-sign(0.5d0,0.d0-max(min(1.d0,2.d0*cr),
     $min(2.d0,cr))))*(2*(0.5+sign(0.5d0,min(1.d0,2.d0*cr)-min(2.d0,cr))
     $)*(0.5-sign(0.5d0,2.d0*cr-1.d0))+(0.5-sign(0.5d0,min(1.d0,2.d0*cr)
     $-min(2.d0,cr)))*(0.5-sign(0.5d0,cr-2.d0)))
            if (rj .ne. 0.) then
              if (rtrans(i,j) .lt. 0.) then
                adrj = adrj-adcr*(rjm/(rj*rj))
                adrjm = adrjm+adcr/rj
                adcr = 0.d0
              else
                adrj = adrj-adcr*(rjp/(rj*rj))
                adrjp = adrjp+adcr/rj
                adcr = 0.d0
              endif
            else
              if (rtrans(i,j) .lt. 0.) then
                adrjm = adrjm+1.e+20*adcr
                adcr = 0.d0
              else
                adrjp = adrjp+1.e+20*adcr
                adcr = 0.d0
              endif
            endif
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+adrjm*
     $maskc(i,j,km2,bi_arg,bj_arg)
            adtracer(i,j,km2,bi,bj) = adtracer(i,j,km2,bi,bj)-adrjm*
     $maskc(i,j,km2,bi_arg,bj_arg)
            adrjm = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrj
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrj
            adrj = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-adrjp*maskc(i,
     $j,kp1,bi_arg,bj_arg)
            adtracer(i,j,kp1,bi,bj) = adtracer(i,j,kp1,bi,bj)+adrjp*
     $maskc(i,j,kp1,bi_arg,bj_arg)
            adrjp = 0.d0
          end do
        end do
      endif

      end


      subroutine adgad_fluxlimit_adv_x( bi, bj, k, deltat, utrans, uvel,
     $ tracer, adutrans, aduvel, adtracer, adut )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adut(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision deltat
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcr
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision cr
      integer i
      integer j
      double precision rj
      double precision rjm
      double precision rjp
      double precision uth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcr = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = sny+oly, 1-oly, -1
        do i = snx+olx-1, 1-olx+2, -1
          rjp = (tracer(i+1,j)-tracer(i,j))*maskw(i+1,j,k,bi,bj)
          rj = (tracer(i,j)-tracer(i-1,j))*maskw(i,j,k,bi,bj)
          rjm = (tracer(i-1,j)-tracer(i-2,j))*maskw(i-1,j,k,bi,bj)
          if (rj .ne. 0.) then
            if (utrans(i,j) .gt. 0) then
              cr = rjm/rj
            else
              cr = rjp/rj
            endif
          else
            if (utrans(i,j) .gt. 0) then
              cr = rjm*1.e+20
            else
              cr = rjp*1.e+20
            endif
          endif
          cr = max(0.d0,max(min(1.d0,2.d0*cr),min(2.d0,cr)))
          uth = abs(utrans(i,j))
          adcr = adcr-0.5*adut(i,j)*((-uth)+utrans(i,j)*uvel(i,j,k,bi,
     $bj)*deltat*recip_dxc(i,j,bi,bj))*rj
          adrj = adrj-0.5*adut(i,j)*((1-cr)*uth+utrans(i,j)*uvel(i,j,k,
     $bi,bj)*deltat*recip_dxc(i,j,bi,bj)*cr)
          adtracer(i-1,j) = adtracer(i-1,j)+0.5d0*adut(i,j)*utrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*adut(i,j)*utrans(i,j)
          adutrans(i,j) = adutrans(i,j)+adut(i,j)*(0.5d0*(tracer(i,j)+
     $tracer(i-1,j))-0.5*uvel(i,j,k,bi,bj)*deltat*recip_dxc(i,j,bi,bj)*
     $cr*rj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-0.5*adut(i,j)*
     $utrans(i,j)*deltat*recip_dxc(i,j,bi,bj)*cr*rj
          adutrans(i,j) = adutrans(i,j)-0.5*adut(i,j)*(1-cr)*rj*
     $sign(1.d0,utrans(i,j))
          adut(i,j) = 0.d0
          if (rj .ne. 0.) then
            if (utrans(i,j) .gt. 0) then
              cr = rjm/rj
            else
              cr = rjp/rj
            endif
          else
            if (utrans(i,j) .gt. 0) then
              cr = rjm*1.e+20
            else
              cr = rjp*1.e+20
            endif
          endif
          adcr = adcr*(0.5-sign(0.5d0,0.d0-max(min(1.d0,2.d0*cr),
     $min(2.d0,cr))))*(2*(0.5+sign(0.5d0,min(1.d0,2.d0*cr)-min(2.d0,cr))
     $)*(0.5-sign(0.5d0,2.d0*cr-1.d0))+(0.5-sign(0.5d0,min(1.d0,2.d0*cr)
     $-min(2.d0,cr)))*(0.5-sign(0.5d0,cr-2.d0)))
          if (rj .ne. 0.) then
            if (utrans(i,j) .gt. 0) then
              adrj = adrj-adcr*(rjm/(rj*rj))
              adrjm = adrjm+adcr/rj
              adcr = 0.d0
            else
              adrj = adrj-adcr*(rjp/(rj*rj))
              adrjp = adrjp+adcr/rj
              adcr = 0.d0
            endif
          else
            if (utrans(i,j) .gt. 0) then
              adrjm = adrjm+1.e+20*adcr
              adcr = 0.d0
            else
              adrjp = adrjp+1.e+20*adcr
              adcr = 0.d0
            endif
          endif
          adtracer(i-2,j) = adtracer(i-2,j)-adrjm*maskw(i-1,j,k,bi,bj)
          adtracer(i-1,j) = adtracer(i-1,j)+adrjm*maskw(i-1,j,k,bi,bj)
          adrjm = 0.d0
          adtracer(i-1,j) = adtracer(i-1,j)-adrj*maskw(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*maskw(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i+1,j) = adtracer(i+1,j)+adrjp*maskw(i+1,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*maskw(i+1,j,k,bi,bj)
          adrjp = 0.d0
        end do
        adut(snx+olx,j) = 0.d0
        adut(2-olx,j) = 0.d0
        adut(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_fluxlimit_adv_y( bi, bj, k, deltat, vtrans, vvel,
     $ tracer, advtrans, advvel, adtracer, advt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision advt(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      double precision deltat
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adcr
      double precision adrj
      double precision adrjm
      double precision adrjp
      double precision cr
      integer i
      integer j
      double precision rj
      double precision rjm
      double precision rjp
      double precision vth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adcr = 0.d0
      adrj = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = sny+oly-1, 1-oly+2, -1
        do i = snx+olx, 1-olx, -1
          rjp = (tracer(i,j+1)-tracer(i,j))*masks(i,j+1,k,bi,bj)
          rj = (tracer(i,j)-tracer(i,j-1))*masks(i,j,k,bi,bj)
          rjm = (tracer(i,j-1)-tracer(i,j-2))*masks(i,j-1,k,bi,bj)
          if (rj .ne. 0.) then
            if (vtrans(i,j) .gt. 0) then
              cr = rjm/rj
            else
              cr = rjp/rj
            endif
          else
            if (vtrans(i,j) .gt. 0) then
              cr = rjm*1.e+20
            else
              cr = rjp*1.e+20
            endif
          endif
          cr = max(0.d0,max(min(1.d0,2.d0*cr),min(2.d0,cr)))
          vth = abs(vtrans(i,j))
          adcr = adcr-0.5*advt(i,j)*((-vth)+vtrans(i,j)*vvel(i,j,k,bi,
     $bj)*deltat*recip_dyc(i,j,bi,bj))*rj
          adrj = adrj-0.5*advt(i,j)*((1-cr)*vth+vtrans(i,j)*vvel(i,j,k,
     $bi,bj)*deltat*recip_dyc(i,j,bi,bj)*cr)
          adtracer(i,j-1) = adtracer(i,j-1)+0.5d0*advt(i,j)*vtrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*advt(i,j)*vtrans(i,j)
          advtrans(i,j) = advtrans(i,j)+advt(i,j)*(0.5d0*(tracer(i,j)+
     $tracer(i,j-1))-0.5*vvel(i,j,k,bi,bj)*deltat*recip_dyc(i,j,bi,bj)*
     $cr*rj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-0.5*advt(i,j)*
     $vtrans(i,j)*deltat*recip_dyc(i,j,bi,bj)*cr*rj
          advtrans(i,j) = advtrans(i,j)-0.5*advt(i,j)*(1-cr)*rj*
     $sign(1.d0,vtrans(i,j))
          advt(i,j) = 0.d0
          if (rj .ne. 0.) then
            if (vtrans(i,j) .gt. 0) then
              cr = rjm/rj
            else
              cr = rjp/rj
            endif
          else
            if (vtrans(i,j) .gt. 0) then
              cr = rjm*1.e+20
            else
              cr = rjp*1.e+20
            endif
          endif
          adcr = adcr*(0.5-sign(0.5d0,0.d0-max(min(1.d0,2.d0*cr),
     $min(2.d0,cr))))*(2*(0.5+sign(0.5d0,min(1.d0,2.d0*cr)-min(2.d0,cr))
     $)*(0.5-sign(0.5d0,2.d0*cr-1.d0))+(0.5-sign(0.5d0,min(1.d0,2.d0*cr)
     $-min(2.d0,cr)))*(0.5-sign(0.5d0,cr-2.d0)))
          if (rj .ne. 0.) then
            if (vtrans(i,j) .gt. 0) then
              adrj = adrj-adcr*(rjm/(rj*rj))
              adrjm = adrjm+adcr/rj
              adcr = 0.d0
            else
              adrj = adrj-adcr*(rjp/(rj*rj))
              adrjp = adrjp+adcr/rj
              adcr = 0.d0
            endif
          else
            if (vtrans(i,j) .gt. 0) then
              adrjm = adrjm+1.e+20*adcr
              adcr = 0.d0
            else
              adrjp = adrjp+1.e+20*adcr
              adcr = 0.d0
            endif
          endif
          adtracer(i,j-2) = adtracer(i,j-2)-adrjm*masks(i,j-1,k,bi,bj)
          adtracer(i,j-1) = adtracer(i,j-1)+adrjm*masks(i,j-1,k,bi,bj)
          adrjm = 0.d0
          adtracer(i,j-1) = adtracer(i,j-1)-adrj*masks(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*masks(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i,j+1) = adtracer(i,j+1)+adrjp*masks(i,j+1,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*masks(i,j+1,k,bi,bj)
          adrjp = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        advt(i,sny+oly) = 0.d0
        advt(i,2-oly) = 0.d0
        advt(i,1-oly) = 0.d0
      end do

      end


      subroutine adgad_grad_x( bi, bj, xa, adtracer, addtdx )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addtdx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adtracer(i-1,j) = adtracer(i-1,j)-addtdx(i,j)*recip_dxc(i,j,
     $bi,bj)*xa(i,j)*sqcosfacu(j,bi,bj)
          adtracer(i,j) = adtracer(i,j)+addtdx(i,j)*recip_dxc(i,j,bi,bj)
     $*xa(i,j)*sqcosfacu(j,bi,bj)
          addtdx(i,j) = 0.d0
        end do
        addtdx(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_grad_y( bi, bj, ya, adtracer, addtdy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addtdy(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adtracer(i,j-1) = adtracer(i,j-1)-addtdy(i,j)*recip_dyc(i,j,
     $bi,bj)*ya(i,j)
          adtracer(i,j) = adtracer(i,j)+addtdy(i,j)*recip_dyc(i,j,bi,bj)
     $*ya(i,j)
          addtdy(i,j) = 0.d0
        end do
      end do

      end


      subroutine adgad_u3_adv_r( bi, bj, k, rtrans, tracer, adrtrans, 
     $adtracer, adwt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwt(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision adrj
      double precision adrjjm
      double precision adrjjp
      double precision adrjm
      double precision adrjp
      integer i
      integer j
      integer km1
      integer km2
      integer kp1
      double precision rj
      double precision rjjm
      double precision rjjp
      double precision rjm
      double precision rjp
      double precision wth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adrj = 0.d0
      adrjjm = 0.d0
      adrjjp = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      km2 = max(1,k-2)
      km1 = max(1,k-1)
      kp1 = min(nr,k+1)
      if (k .eq. 1 .or. k .gt. nr) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adwt(i,j) = 0.d0
          end do
        end do
      else
        do j = 1-oly, sny+oly
          adrj = 0.d0
          adrjjm = 0.d0
          adrjjp = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          do i = 1-olx, snx+olx
            adrj = 0.d0
            adrjjm = 0.d0
            adrjjp = 0.d0
            adrjm = 0.d0
            adrjp = 0.d0
            rjp = (tracer(i,j,kp1,bi,bj)-tracer(i,j,k,bi,bj))*maskc(i,j,
     $kp1,bi,bj)
            rj = tracer(i,j,k,bi,bj)-tracer(i,j,km1,bi,bj)
            rjm = (tracer(i,j,km1,bi,bj)-tracer(i,j,km2,bi,bj))*maskc(i,
     $j,km2,bi,bj)
            rjjp = rjp-rj
            rjjm = rj-rjm
            wth = abs(rtrans(i,j))
            adrjjm = adrjjm+adwt(i,j)*maskc(i,j,km1,bi,bj)*((-(0.5d0*
     $rtrans(i,j)*onesixth))+0.5d0*wth*onesixth)
            adrjjp = adrjjp-adwt(i,j)*maskc(i,j,km1,bi,bj)*(0.5d0*
     $rtrans(i,j)*onesixth+0.5d0*wth*onesixth)
            adrtrans(i,j) = adrtrans(i,j)+adwt(i,j)*maskc(i,j,km1,bi,bj)
     $*(0.5d0*(tracer(i,j,k,bi,bj)+tracer(i,j,km1,bi,bj))-0.5d0*
     $onesixth*(rjjm+rjjp))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.5d0*adwt(i,
     $j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+0.5d0*
     $adwt(i,j)*maskc(i,j,km1,bi,bj)*rtrans(i,j)
            adrtrans(i,j) = adrtrans(i,j)+0.5d0*adwt(i,j)*maskc(i,j,km1,
     $bi,bj)*onesixth*(rjjm-rjjp)*sign(1.d0,rtrans(i,j))
            adwt(i,j) = 0.d0
            adrj = adrj+adrjjm
            adrjm = adrjm-adrjjm
            adrjjm = 0.d0
            adrj = adrj-adrjjp
            adrjp = adrjp+adrjjp
            adrjjp = 0.d0
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)+adrjm*
     $maskc(i,j,km2,bi,bj)
            adtracer(i,j,km2,bi,bj) = adtracer(i,j,km2,bi,bj)-adrjm*
     $maskc(i,j,km2,bi,bj)
            adrjm = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adrj
            adtracer(i,j,km1,bi,bj) = adtracer(i,j,km1,bi,bj)-adrj
            adrj = 0.d0
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-adrjp*maskc(i,
     $j,kp1,bi,bj)
            adtracer(i,j,kp1,bi,bj) = adtracer(i,j,kp1,bi,bj)+adrjp*
     $maskc(i,j,kp1,bi,bj)
            adrjp = 0.d0
          end do
        end do
      endif

      end


      subroutine adgad_u3_adv_x( bi, bj, k, utrans, tracer, adutrans, 
     $adtracer, adut )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adut(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adrj
      double precision adrjjm
      double precision adrjjp
      double precision adrjm
      double precision adrjp
      integer i
      integer j
      double precision rj
      double precision rjjm
      double precision rjjp
      double precision rjm
      double precision rjp
      double precision uth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adrj = 0.d0
      adrjjm = 0.d0
      adrjjp = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        adrj = 0.d0
        adrjjm = 0.d0
        adrjjp = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        do i = 1-olx+2, snx+olx-1
          adrj = 0.d0
          adrjjm = 0.d0
          adrjjp = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          rjp = (tracer(i+1,j)-tracer(i,j))*maskw(i+1,j,k,bi,bj)
          rj = (tracer(i,j)-tracer(i-1,j))*maskw(i,j,k,bi,bj)
          rjm = (tracer(i-1,j)-tracer(i-2,j))*maskw(i-1,j,k,bi,bj)
          rjjp = rjp-rj
          rjjm = rj-rjm
          uth = abs(utrans(i,j))
          adrjjm = adrjjm-adut(i,j)*(0.5d0*utrans(i,j)*onesixth+0.5d0*
     $uth*onesixth)
          adrjjp = adrjjp+adut(i,j)*((-(0.5d0*utrans(i,j)*onesixth))+
     $0.5d0*uth*onesixth)
          adtracer(i-1,j) = adtracer(i-1,j)+0.5d0*adut(i,j)*utrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*adut(i,j)*utrans(i,j)
          adutrans(i,j) = adutrans(i,j)+0.5d0*adut(i,j)*(tracer(i,j)+
     $tracer(i-1,j)-onesixth*(rjjp+rjjm))
          adutrans(i,j) = adutrans(i,j)+0.5d0*adut(i,j)*onesixth*(rjjp-
     $rjjm)*sign(1.d0,utrans(i,j))
          adut(i,j) = 0.d0
          adrj = adrj+adrjjm
          adrjm = adrjm-adrjjm
          adrjjm = 0.d0
          adrj = adrj-adrjjp
          adrjp = adrjp+adrjjp
          adrjjp = 0.d0
          adtracer(i-2,j) = adtracer(i-2,j)-adrjm*maskw(i-1,j,k,bi,bj)
          adtracer(i-1,j) = adtracer(i-1,j)+adrjm*maskw(i-1,j,k,bi,bj)
          adrjm = 0.d0
          adtracer(i-1,j) = adtracer(i-1,j)-adrj*maskw(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*maskw(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i+1,j) = adtracer(i+1,j)+adrjp*maskw(i+1,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*maskw(i+1,j,k,bi,bj)
          adrjp = 0.d0
        end do
        adut(snx+olx,j) = 0.d0
        adut(2-olx,j) = 0.d0
        adut(1-olx,j) = 0.d0
      end do

      end


      subroutine adgad_u3_adv_y( bi, bj, k, vtrans, tracer, advtrans, 
     $adtracer, advt )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision onesixth
      parameter ( onesixth = 1.d0/6.d0 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision advt(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adrj
      double precision adrjjm
      double precision adrjjp
      double precision adrjm
      double precision adrjp
      integer i
      integer j
      double precision rj
      double precision rjjm
      double precision rjjp
      double precision rjm
      double precision rjp
      double precision vth

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adrj = 0.d0
      adrjjm = 0.d0
      adrjjp = 0.d0
      adrjm = 0.d0
      adrjp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+2, sny+oly-1
        adrj = 0.d0
        adrjjm = 0.d0
        adrjjp = 0.d0
        adrjm = 0.d0
        adrjp = 0.d0
        do i = 1-olx, snx+olx
          adrj = 0.d0
          adrjjm = 0.d0
          adrjjp = 0.d0
          adrjm = 0.d0
          adrjp = 0.d0
          rjp = (tracer(i,j+1)-tracer(i,j))*masks(i,j+1,k,bi,bj)
          rj = (tracer(i,j)-tracer(i,j-1))*masks(i,j,k,bi,bj)
          rjm = (tracer(i,j-1)-tracer(i,j-2))*masks(i,j-1,k,bi,bj)
          rjjp = rjp-rj
          rjjm = rj-rjm
          vth = abs(vtrans(i,j))
          adrjjm = adrjjm-advt(i,j)*(0.5d0*vtrans(i,j)*onesixth+0.5d0*
     $vth*onesixth)
          adrjjp = adrjjp+advt(i,j)*((-(0.5d0*vtrans(i,j)*onesixth))+
     $0.5d0*vth*onesixth)
          adtracer(i,j-1) = adtracer(i,j-1)+0.5d0*advt(i,j)*vtrans(i,j)
          adtracer(i,j) = adtracer(i,j)+0.5d0*advt(i,j)*vtrans(i,j)
          advtrans(i,j) = advtrans(i,j)+0.5d0*advt(i,j)*(tracer(i,j)+
     $tracer(i,j-1)-onesixth*(rjjp+rjjm))
          advtrans(i,j) = advtrans(i,j)+0.5d0*advt(i,j)*onesixth*(rjjp-
     $rjjm)*sign(1.d0,vtrans(i,j))
          advt(i,j) = 0.d0
          adrj = adrj+adrjjm
          adrjm = adrjm-adrjjm
          adrjjm = 0.d0
          adrj = adrj-adrjjp
          adrjp = adrjp+adrjjp
          adrjjp = 0.d0
          adtracer(i,j-2) = adtracer(i,j-2)-adrjm*masks(i,j-1,k,bi,bj)
          adtracer(i,j-1) = adtracer(i,j-1)+adrjm*masks(i,j-1,k,bi,bj)
          adrjm = 0.d0
          adtracer(i,j-1) = adtracer(i,j-1)-adrj*masks(i,j,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)+adrj*masks(i,j,k,bi,bj)
          adrj = 0.d0
          adtracer(i,j+1) = adtracer(i,j+1)+adrjp*masks(i,j+1,k,bi,bj)
          adtracer(i,j) = adtracer(i,j)-adrjp*masks(i,j+1,k,bi,bj)
          adrjp = 0.d0
        end do
      end do
      do i = 1-olx, snx+olx
        advt(i,sny+oly) = 0.d0
        advt(i,2-oly) = 0.d0
        advt(i,1-oly) = 0.d0
      end do

      end


      subroutine adgmredi_calc_diff( bi, bj, imin, imax, jmin, jmax, k, 
     $maskup, adkappart, adkappars )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_wtensor/ adkwx, adkwy, adkwz

C==============================================
C declare arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkwz(i,j,k,bi,bj) = adkwz(i,j,k,bi,bj)+adkappars(i,j,k)*
     $maskup(i,j)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkwz(i,j,k,bi,bj) = adkwz(i,j,k,bi,bj)+adkappart(i,j,k)*
     $maskup(i,j)
        end do
      end do

      end


      subroutine adgmredi_calc_tensor( bi, bj, mythid, adsigmax, 
     $adsigmay, adsigmar )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_hortensor/ adkux, adkvy

      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_wtensor/ adkwx, adkwy, adkwz

      real*4 comlev1_bibj_k_dsigmadrreal_36h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),552)
      common /caddsigmadrreal/ comlev1_bibj_k_dsigmadrreal_36h

      real*4 comlev1_bibj_k_dsigmadrreal_32h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),552)
      common /caddsigmadrream/ comlev1_bibj_k_dsigmadrreal_32h

      real*4 comlev1_bibj_k_dsigmadrreal_25h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),552)
      common /caddsigmadrrean/ comlev1_bibj_k_dsigmadrreal_25h

      real*4 comlev1_bibj_k_dsigmadx_34h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadx/ comlev1_bibj_k_dsigmadx_34h

      real*4 comlev1_bibj_k_dsigmady_35h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmady/ comlev1_bibj_k_dsigmady_35h

      real*4 comlev1_bibj_k_dsigmady_31h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadz/ comlev1_bibj_k_dsigmady_31h

      real*4 comlev1_bibj_k_dsigmadx_30h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadza/ comlev1_bibj_k_dsigmadx_30h

      real*4 comlev1_bibj_k_dsigmady_24h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadzb/ comlev1_bibj_k_dsigmady_24h

      real*4 comlev1_bibj_k_dsigmadx_23h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadzc/ comlev1_bibj_k_dsigmadx_23h

      real*4 comlev1_bibj_k_kux_33h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkuy/ comlev1_bibj_k_kux_33h

      real*4 comlev1_bibj_k_kvy_37h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkvz/ comlev1_bibj_k_kvy_37h

      real*4 comlev1_bibj_k_slopesqr_28h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadslopesqr/ comlev1_bibj_k_slopesqr_28h

      real*4 comlev1_bibj_k_slopex_26h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadslopex/ comlev1_bibj_k_slopex_26h

      real*4 comlev1_bibj_k_slopey_27h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadslopey/ comlev1_bibj_k_slopey_27h

      real*4 comlev1_bibj_k_taperfct_29h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadtaperfct/ comlev1_bibj_k_taperfct_29h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision gm_background_k
      double precision gm_isopyck
      double precision gm_kmin_horiz
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k
      common /gm_params/ gm_isopyck, gm_background_k, gm_maxslope, 
     $gm_kmin_horiz, gm_visbeck_alpha, gm_visbeck_length, 
     $gm_visbeck_depth, gm_visbeck_maxval_k, gm_taper_scheme, gm_scrit, 
     $gm_sd

      double precision gm_advect
      double precision gm_rmaxslope
      double precision gm_skewflx
      common /gm_params2/ gm_rmaxslope, gm_skewflx, gm_advect

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

C==============================================
C declare arguments
C==============================================
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision addsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsigmadx(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsigmady(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopesqr(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtaperfct(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadx(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmady(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer igmkey
      integer ip1
      integer ip2
      integer j
      integer k
      double precision kgm_tmp
      integer kkey
      integer km1
      integer kp1
      double precision maskm1
      double precision maskp1
      integer max1
      integer max2
      integer max3
      double precision slopesqr(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision taperfct(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addsigmadrreal(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addsigmadx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addsigmady(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adslopesqr(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adslopex(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adslopey(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adtaperfct(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      igmkey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      do k = nr, 1, -1
        kp1 = min(nr,k+1)
        maskp1 = 1.d0
        if (k .ge. nr) then
          maskp1 = 0.d0
        endif
        kkey = (igmkey-1)*nr+k
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            kux(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_kux_33h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmadx(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmadx_34h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmady(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmady_35h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmadrreal(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmadrreal_36h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            kvy(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_kvy_37h(ip1,ip2,kkey)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adkvy(i,j,k,bi,bj) = adkvy(i,j,k,bi,bj)*(0.5+sign(0.5d0,
     $kvy(i,j,k,bi,bj)-gm_kmin_horiz))
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adtaperfct(i,j) = adtaperfct(i,j)+adkvy(i,j,k,bi,bj)*
     $gm_isopyck
            adkvy(i,j,k,bi,bj) = 0.d0
          end do
        end do
        call adgmredi_slope_limit( dsigmadrreal,rf(k),dsigmadx,dsigmady,
     $bi,bj,addsigmadrreal,adslopex,adslopey,addsigmadx,addsigmady,
     $adslopesqr,adtaperfct )
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adsigmar(i,j-1,k) = adsigmar(i,j-1,k)+0.25*addsigmadrreal(i,
     $j)*masks(i,j,k,bi,bj)
            adsigmar(i,j-1,kp1) = adsigmar(i,j-1,kp1)+0.25*
     $addsigmadrreal(i,j)*maskp1*masks(i,j,k,bi,bj)
            adsigmar(i,j,k) = adsigmar(i,j,k)+0.25*addsigmadrreal(i,j)*
     $masks(i,j,k,bi,bj)
            adsigmar(i,j,kp1) = adsigmar(i,j,kp1)+0.25*addsigmadrreal(i,
     $j)*maskp1*masks(i,j,k,bi,bj)
            addsigmadrreal(i,j) = 0.d0
            adsigmay(i,j,k) = adsigmay(i,j,k)+addsigmady(i,j)*masks(i,j,
     $k,bi,bj)
            addsigmady(i,j) = 0.d0
            adsigmax(i+1,j-1,k) = adsigmax(i+1,j-1,k)+0.25*addsigmadx(i,
     $j)*masks(i,j,k,bi,bj)
            adsigmax(i,j-1,k) = adsigmax(i,j-1,k)+0.25*addsigmadx(i,j)*
     $masks(i,j,k,bi,bj)
            adsigmax(i+1,j,k) = adsigmax(i+1,j,k)+0.25*addsigmadx(i,j)*
     $masks(i,j,k,bi,bj)
            adsigmax(i,j,k) = adsigmax(i,j,k)+0.25*addsigmadx(i,j)*
     $masks(i,j,k,bi,bj)
            addsigmadx(i,j) = 0.d0
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adkux(i,j,k,bi,bj) = adkux(i,j,k,bi,bj)*(0.5+sign(0.5d0,
     $kux(i,j,k,bi,bj)-gm_kmin_horiz))
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adtaperfct(i,j) = adtaperfct(i,j)+adkux(i,j,k,bi,bj)*
     $gm_isopyck
            adkux(i,j,k,bi,bj) = 0.d0
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmadx(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmadx_30h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmady(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmady_31h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmadrreal(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmadrreal_32h(ip1,ip2,kkey)
          end do
        end do
        call adgmredi_slope_limit( dsigmadrreal,rf(k),dsigmadx,dsigmady,
     $bi,bj,addsigmadrreal,adslopex,adslopey,addsigmadx,addsigmady,
     $adslopesqr,adtaperfct )
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adsigmar(i-1,j,k) = adsigmar(i-1,j,k)+0.25*addsigmadrreal(i,
     $j)*maskw(i,j,k,bi,bj)
            adsigmar(i,j,k) = adsigmar(i,j,k)+0.25*addsigmadrreal(i,j)*
     $maskw(i,j,k,bi,bj)
            adsigmar(i-1,j,kp1) = adsigmar(i-1,j,kp1)+0.25*
     $addsigmadrreal(i,j)*maskp1*maskw(i,j,k,bi,bj)
            adsigmar(i,j,kp1) = adsigmar(i,j,kp1)+0.25*addsigmadrreal(i,
     $j)*maskp1*maskw(i,j,k,bi,bj)
            addsigmadrreal(i,j) = 0.d0
            adsigmay(i-1,j+1,k) = adsigmay(i-1,j+1,k)+0.25*addsigmady(i,
     $j)*maskw(i,j,k,bi,bj)
            adsigmay(i,j+1,k) = adsigmay(i,j+1,k)+0.25*addsigmady(i,j)*
     $maskw(i,j,k,bi,bj)
            adsigmay(i-1,j,k) = adsigmay(i-1,j,k)+0.25*addsigmady(i,j)*
     $maskw(i,j,k,bi,bj)
            adsigmay(i,j,k) = adsigmay(i,j,k)+0.25*addsigmady(i,j)*
     $maskw(i,j,k,bi,bj)
            addsigmady(i,j) = 0.d0
            adsigmax(i,j,k) = adsigmax(i,j,k)+addsigmadx(i,j)*maskw(i,j,
     $k,bi,bj)
            addsigmadx(i,j) = 0.d0
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kgm_tmp = gm_isopyck+gm_skewflx*gm_background_k
            adkwz(i,j,k,bi,bj) = adkwz(i,j,k,bi,bj)*gm_isopyck
            adkwy(i,j,k,bi,bj) = adkwy(i,j,k,bi,bj)*kgm_tmp
            adkwx(i,j,k,bi,bj) = adkwx(i,j,k,bi,bj)*kgm_tmp
          end do
        end do
      end do
      do k = nr, 2, -1
        km1 = max(1,k-1)
        maskm1 = 1.d0
        if (k .le. 1) then
          maskm1 = 0.d0
        endif
        kkey = (igmkey-1)*nr+k
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmadx(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmadx_23h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmady(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmady_24h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            dsigmadrreal(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_dsigmadrreal_25h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            slopex(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_slopex_26h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            slopey(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_slopey_27h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            slopesqr(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_slopesqr_28h(ip1,ip2,kkey)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            taperfct(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_taperfct_29h(ip1,ip2,kkey)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adslopesqr(i,j) = adslopesqr(i,j)+adkwz(i,j,k,bi,bj)*
     $taperfct(i,j)
            adtaperfct(i,j) = adtaperfct(i,j)+adkwz(i,j,k,bi,bj)*
     $slopesqr(i,j)
            adkwz(i,j,k,bi,bj) = 0.d0
            adslopey(i,j) = adslopey(i,j)+adkwy(i,j,k,bi,bj)*taperfct(i,
     $j)
            adtaperfct(i,j) = adtaperfct(i,j)+adkwy(i,j,k,bi,bj)*
     $slopey(i,j)
            adkwy(i,j,k,bi,bj) = 0.d0
            adslopex(i,j) = adslopex(i,j)+adkwx(i,j,k,bi,bj)*taperfct(i,
     $j)
            adtaperfct(i,j) = adtaperfct(i,j)+adkwx(i,j,k,bi,bj)*
     $slopex(i,j)
            adkwx(i,j,k,bi,bj) = 0.d0
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adslopesqr(i,j) = adslopesqr(i,j)*maskc(i,j,k,bi,bj)*maskm1
            adslopey(i,j) = adslopey(i,j)*maskc(i,j,k,bi,bj)*maskm1
            adslopex(i,j) = adslopex(i,j)*maskc(i,j,k,bi,bj)*maskm1
          end do
        end do
        call adgmredi_slope_limit( dsigmadrreal,rf(k),dsigmadx,dsigmady,
     $bi,bj,addsigmadrreal,adslopex,adslopey,addsigmadx,addsigmady,
     $adslopesqr,adtaperfct )
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adsigmar(i,j,k) = adsigmar(i,j,k)+addsigmadrreal(i,j)*maskm1
            addsigmadrreal(i,j) = 0.d0
            adsigmay(i,j+1,k) = adsigmay(i,j+1,k)+0.25*addsigmady(i,j)*
     $maskc(i,j,k,bi,bj)*maskm1
            adsigmay(i,j+1,km1) = adsigmay(i,j+1,km1)+0.25*addsigmady(i,
     $j)*maskc(i,j,k,bi,bj)*maskm1
            adsigmay(i,j,k) = adsigmay(i,j,k)+0.25*addsigmady(i,j)*
     $maskc(i,j,k,bi,bj)*maskm1
            adsigmay(i,j,km1) = adsigmay(i,j,km1)+0.25*addsigmady(i,j)*
     $maskc(i,j,k,bi,bj)*maskm1
            addsigmady(i,j) = 0.d0
            adsigmax(i+1,j,k) = adsigmax(i+1,j,k)+0.25*addsigmadx(i,j)*
     $maskc(i,j,k,bi,bj)*maskm1
            adsigmax(i,j,k) = adsigmax(i,j,k)+0.25*addsigmadx(i,j)*
     $maskc(i,j,k,bi,bj)*maskm1
            adsigmax(i+1,j,km1) = adsigmax(i+1,j,km1)+0.25*addsigmadx(i,
     $j)*maskc(i,j,k,bi,bj)*maskm1
            adsigmax(i,j,km1) = adsigmax(i,j,km1)+0.25*addsigmadx(i,j)*
     $maskc(i,j,k,bi,bj)*maskm1
            addsigmadx(i,j) = 0.d0
          end do
        end do
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adkvy(i,j,k,bi,bj) = 0.d0
            adkux(i,j,k,bi,bj) = 0.d0
            adkwz(i,j,k,bi,bj) = 0.d0
            adkwy(i,j,k,bi,bj) = 0.d0
            adkwx(i,j,k,bi,bj) = 0.d0
            adslopesqr(i,j) = 0.d0
            addsigmadrreal(i,j) = 0.d0
            addsigmady(i,j) = 0.d0
            addsigmadx(i,j) = 0.d0
            adslopey(i,j) = 0.d0
            adslopex(i,j) = 0.d0
          end do
        end do
      end do

      end


      subroutine mdgmredi_calc_tensor( bi, bj, imin, imax, jmin, jmax, 
     $sigmax, sigmay, sigmar, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_k_dsigmadrreal_36h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),552)
      common /caddsigmadrreal/ comlev1_bibj_k_dsigmadrreal_36h

      real*4 comlev1_bibj_k_dsigmadrreal_32h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),552)
      common /caddsigmadrream/ comlev1_bibj_k_dsigmadrreal_32h

      real*4 comlev1_bibj_k_dsigmadrreal_25h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),552)
      common /caddsigmadrrean/ comlev1_bibj_k_dsigmadrreal_25h

      real*4 comlev1_bibj_k_dsigmadx_34h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadx/ comlev1_bibj_k_dsigmadx_34h

      real*4 comlev1_bibj_k_dsigmady_35h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmady/ comlev1_bibj_k_dsigmady_35h

      real*4 comlev1_bibj_k_dsigmady_31h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadz/ comlev1_bibj_k_dsigmady_31h

      real*4 comlev1_bibj_k_dsigmadx_30h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadza/ comlev1_bibj_k_dsigmadx_30h

      real*4 comlev1_bibj_k_dsigmady_24h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadzb/ comlev1_bibj_k_dsigmady_24h

      real*4 comlev1_bibj_k_dsigmadx_23h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /caddsigmadzc/ comlev1_bibj_k_dsigmadx_23h

      real*4 comlev1_bibj_k_kux_33h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkuy/ comlev1_bibj_k_kux_33h

      real*4 comlev1_bibj_k_kvy_37h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkvz/ comlev1_bibj_k_kvy_37h

      real*4 comlev1_bibj_k_slopesqr_28h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadslopesqr/ comlev1_bibj_k_slopesqr_28h

      real*4 comlev1_bibj_k_slopex_26h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadslopex/ comlev1_bibj_k_slopex_26h

      real*4 comlev1_bibj_k_slopey_27h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadslopey/ comlev1_bibj_k_slopey_27h

      real*4 comlev1_bibj_k_taperfct_29h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadtaperfct/ comlev1_bibj_k_taperfct_29h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision gm_background_k
      double precision gm_isopyck
      double precision gm_kmin_horiz
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k
      common /gm_params/ gm_isopyck, gm_background_k, gm_maxslope, 
     $gm_kmin_horiz, gm_visbeck_alpha, gm_visbeck_length, 
     $gm_visbeck_depth, gm_visbeck_maxval_k, gm_taper_scheme, gm_scrit, 
     $gm_sd

      double precision gm_advect
      double precision gm_rmaxslope
      double precision gm_skewflx
      common /gm_params2/ gm_rmaxslope, gm_skewflx, gm_advect

      double precision kwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_wtensor/ kwx, kwy, kwz

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer mythid
      double precision sigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmay(1-olx:snx+olx,1-oly:sny+oly,nr)

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision dsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadx(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmady(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer igmkey
      integer ip1
      integer ip2
      integer j
      integer k
      double precision kgm_tmp
      integer kkey
      integer km1
      integer kp1
      double precision maskm1
      double precision maskp1
      integer max1
      integer max2
      integer max3
      double precision slopesqr(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision taperfct(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      igmkey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      do k = 2, nr
        km1 = max(1,k-1)
        maskm1 = 1.d0
        if (k .le. 1) then
          maskm1 = 0.d0
        endif
        kkey = (igmkey-1)*nr+k
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            slopex(i,j) = 0.d0
            slopey(i,j) = 0.d0
            dsigmadx(i,j) = 0.d0
            dsigmady(i,j) = 0.d0
            dsigmadrreal(i,j) = 0.d0
            slopesqr(i,j) = 0.d0
            kwx(i,j,k,bi,bj) = 0.d0
            kwy(i,j,k,bi,bj) = 0.d0
            kwz(i,j,k,bi,bj) = 0.d0
            kux(i,j,k,bi,bj) = 0.d0
            kvy(i,j,k,bi,bj) = 0.d0
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            dsigmadx(i,j) = 0.25*(sigmax(i+1,j,km1)+sigmax(i,j,km1)+
     $sigmax(i+1,j,k)+sigmax(i,j,k))*maskc(i,j,k,bi,bj)*maskm1
            dsigmady(i,j) = 0.25*(sigmay(i,j+1,km1)+sigmay(i,j,km1)+
     $sigmay(i,j+1,k)+sigmay(i,j,k))*maskc(i,j,k,bi,bj)*maskm1
            dsigmadrreal(i,j) = sigmar(i,j,k)*maskm1
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmadx_23h(ip1,ip2,kkey) = dsigmadx(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmady_24h(ip1,ip2,kkey) = dsigmady(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmadrreal_25h(ip1,ip2,kkey) = 
     $dsigmadrreal(ip1-1+1-olx,ip2-1+1-oly)
          end do
        end do
        call gmredi_slope_limit( dsigmadrreal,rf(k),k,slopex,slopey,
     $dsigmadx,dsigmady,slopesqr,taperfct,bi,bj,mythid )
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            slopex(i,j) = slopex(i,j)*maskc(i,j,k,bi,bj)*maskm1
            slopey(i,j) = slopey(i,j)*maskc(i,j,k,bi,bj)*maskm1
            slopesqr(i,j) = slopesqr(i,j)*maskc(i,j,k,bi,bj)*maskm1
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_slopex_26h(ip1,ip2,kkey) = slopex(ip1-1+1-
     $olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_slopey_27h(ip1,ip2,kkey) = slopey(ip1-1+1-
     $olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_slopesqr_28h(ip1,ip2,kkey) = slopesqr(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_taperfct_29h(ip1,ip2,kkey) = taperfct(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kwx(i,j,k,bi,bj) = slopex(i,j)*taperfct(i,j)
            kwy(i,j,k,bi,bj) = slopey(i,j)*taperfct(i,j)
            kwz(i,j,k,bi,bj) = slopesqr(i,j)*taperfct(i,j)
          end do
        end do
      end do
      do k = 1, nr
        kp1 = min(nr,k+1)
        maskp1 = 1.d0
        if (k .ge. nr) then
          maskp1 = 0.d0
        endif
        kkey = (igmkey-1)*nr+k
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kgm_tmp = gm_isopyck+gm_skewflx*gm_background_k
            kwx(i,j,k,bi,bj) = kgm_tmp*kwx(i,j,k,bi,bj)
            kwy(i,j,k,bi,bj) = kgm_tmp*kwy(i,j,k,bi,bj)
            kwz(i,j,k,bi,bj) = gm_isopyck*kwz(i,j,k,bi,bj)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            dsigmadx(i,j) = sigmax(i,j,k)*maskw(i,j,k,bi,bj)
            dsigmady(i,j) = 0.25*(sigmay(i-1,j+1,k)+sigmay(i,j+1,k)+
     $sigmay(i-1,j,k)+sigmay(i,j,k))*maskw(i,j,k,bi,bj)
            dsigmadrreal(i,j) = 0.25*(sigmar(i-1,j,k)+sigmar(i,j,k)+
     $maskp1*(sigmar(i-1,j,kp1)+sigmar(i,j,kp1)))*maskw(i,j,k,bi,bj)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmadx_30h(ip1,ip2,kkey) = dsigmadx(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmady_31h(ip1,ip2,kkey) = dsigmady(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmadrreal_32h(ip1,ip2,kkey) = 
     $dsigmadrreal(ip1-1+1-olx,ip2-1+1-oly)
          end do
        end do
        call gmredi_slope_limit( dsigmadrreal,rf(k),k,slopex,slopey,
     $dsigmadx,dsigmady,slopesqr,taperfct,bi,bj,mythid )
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kux(i,j,k,bi,bj) = gm_isopyck*taperfct(i,j)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_kux_33h(ip1,ip2,kkey) = kux(ip1-1+1-olx,ip2-
     $1+1-oly,k,bi,bj)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kux(i,j,k,bi,bj) = max(kux(i,j,k,bi,bj),gm_kmin_horiz)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            dsigmadx(i,j) = 0.25*(sigmax(i,j,k)+sigmax(i+1,j,k)+
     $sigmax(i,j-1,k)+sigmax(i+1,j-1,k))*masks(i,j,k,bi,bj)
            dsigmady(i,j) = sigmay(i,j,k)*masks(i,j,k,bi,bj)
            dsigmadrreal(i,j) = 0.25*(sigmar(i,j-1,k)+sigmar(i,j,k)+
     $maskp1*(sigmar(i,j-1,kp1)+sigmar(i,j,kp1)))*masks(i,j,k,bi,bj)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmadx_34h(ip1,ip2,kkey) = dsigmadx(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmady_35h(ip1,ip2,kkey) = dsigmady(ip1-1+
     $1-olx,ip2-1+1-oly)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_dsigmadrreal_36h(ip1,ip2,kkey) = 
     $dsigmadrreal(ip1-1+1-olx,ip2-1+1-oly)
          end do
        end do
        call gmredi_slope_limit( dsigmadrreal,rf(k),k,slopex,slopey,
     $dsigmadx,dsigmady,slopesqr,taperfct,bi,bj,mythid )
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kvy(i,j,k,bi,bj) = gm_isopyck*taperfct(i,j)
          end do
        end do
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_kvy_37h(ip1,ip2,kkey) = kvy(ip1-1+1-olx,ip2-
     $1+1-oly,k,bi,bj)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            kvy(i,j,k,bi,bj) = max(kvy(i,j,k,bi,bj),gm_kmin_horiz)
          end do
        end do
      end do
      end


      subroutine adgmredi_calc_tensor_dummy( bi, bj, adsigmax, adsigmay,
     $ adsigmar )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_wtensor/ adkwx, adkwy, adkwz

C==============================================
C declare arguments
C==============================================
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer k

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do k = 1, nr
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adkwz(i,j,k,bi,bj) = 0.d0
            adkwy(i,j,k,bi,bj) = 0.d0
            adkwx(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do

      end


      subroutine adgmredi_rtransport( imin, imax, jmin, jmax, bi, bj, k,
     $ tracer, adtracer, addf )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_wtensor/ adkwx, adkwy, adkwz

      double precision kwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_wtensor/ kwx, kwy, kwz

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

C==============================================
C declare arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision addtdx
      double precision addtdy
      double precision dtdx
      double precision dtdy
      integer i
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addtdx = 0.d0
      addtdy = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usegmredi .and. k .gt. 1) then
        do j = jmin, jmax
          addtdx = 0.d0
          addtdy = 0.d0
          do i = imin, imax
            addtdx = 0.d0
            addtdy = 0.d0
            dtdx = 0.5*(0.5*(maskw(i+1,j,k,bi,bj)*recip_dxc(i+1,j,bi,bj)
     $*(tracer(i+1,j,k,bi,bj)-tracer(i,j,k,bi,bj))+maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)*(tracer(i,j,k,bi,bj)-tracer(i-1,j,k,bi,bj)))+
     $0.5*(maskw(i+1,j,k-1,bi,bj)*recip_dxc(i+1,j,bi,bj)*(tracer(i+1,j,
     $k-1,bi,bj)-tracer(i,j,k-1,bi,bj))+maskw(i,j,k-1,bi,bj)*
     $recip_dxc(i,j,bi,bj)*(tracer(i,j,k-1,bi,bj)-tracer(i-1,j,k-1,bi,
     $bj))))
            dtdy = 0.5*(0.5*(masks(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)*
     $(tracer(i,j,k,bi,bj)-tracer(i,j-1,k,bi,bj))+masks(i,j+1,k,bi,bj)*
     $recip_dyc(i,j+1,bi,bj)*(tracer(i,j+1,k,bi,bj)-tracer(i,j,k,bi,bj))
     $)+0.5*(masks(i,j,k-1,bi,bj)*recip_dyc(i,j,bi,bj)*(tracer(i,j,k-1,
     $bi,bj)-tracer(i,j-1,k-1,bi,bj))+masks(i,j+1,k-1,bi,bj)*
     $recip_dyc(i,j+1,bi,bj)*(tracer(i,j+1,k-1,bi,bj)-tracer(i,j,k-1,bi,
     $bj))))
            addtdx = addtdx-addf(i,j)*ra(i,j,bi,bj)*kwx(i,j,k,bi,bj)
            addtdy = addtdy-addf(i,j)*ra(i,j,bi,bj)*kwy(i,j,k,bi,bj)
            adkwx(i,j,k,bi,bj) = adkwx(i,j,k,bi,bj)-addf(i,j)*ra(i,j,bi,
     $bj)*dtdx
            adkwy(i,j,k,bi,bj) = adkwy(i,j,k,bi,bj)-addf(i,j)*ra(i,j,bi,
     $bj)*dtdy
            adtracer(i,j-1,k-1,bi,bj) = adtracer(i,j-1,k-1,bi,bj)-0.25*
     $addtdy*masks(i,j,k-1,bi,bj)*recip_dyc(i,j,bi,bj)
            adtracer(i,j-1,k,bi,bj) = adtracer(i,j-1,k,bi,bj)-0.25*
     $addtdy*masks(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)
            adtracer(i,j+1,k-1,bi,bj) = adtracer(i,j+1,k-1,bi,bj)+0.25*
     $addtdy*masks(i,j+1,k-1,bi,bj)*recip_dyc(i,j+1,bi,bj)
            adtracer(i,j+1,k,bi,bj) = adtracer(i,j+1,k,bi,bj)+0.25*
     $addtdy*masks(i,j+1,k,bi,bj)*recip_dyc(i,j+1,bi,bj)
            adtracer(i,j,k-1,bi,bj) = adtracer(i,j,k-1,bi,bj)+0.25*
     $addtdy*(masks(i,j,k-1,bi,bj)*recip_dyc(i,j,bi,bj)-masks(i,j+1,k-1,
     $bi,bj)*recip_dyc(i,j+1,bi,bj))
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.25*addtdy*
     $(masks(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)-masks(i,j+1,k,bi,bj)*
     $recip_dyc(i,j+1,bi,bj))
            addtdy = 0.d0
            adtracer(i-1,j,k-1,bi,bj) = adtracer(i-1,j,k-1,bi,bj)-0.25*
     $addtdx*maskw(i,j,k-1,bi,bj)*recip_dxc(i,j,bi,bj)
            adtracer(i+1,j,k-1,bi,bj) = adtracer(i+1,j,k-1,bi,bj)+0.25*
     $addtdx*maskw(i+1,j,k-1,bi,bj)*recip_dxc(i+1,j,bi,bj)
            adtracer(i,j,k-1,bi,bj) = adtracer(i,j,k-1,bi,bj)+0.25*
     $addtdx*((-(maskw(i+1,j,k-1,bi,bj)*recip_dxc(i+1,j,bi,bj)))+
     $maskw(i,j,k-1,bi,bj)*recip_dxc(i,j,bi,bj))
            adtracer(i-1,j,k,bi,bj) = adtracer(i-1,j,k,bi,bj)-0.25*
     $addtdx*maskw(i,j,k,bi,bj)*recip_dxc(i,j,bi,bj)
            adtracer(i+1,j,k,bi,bj) = adtracer(i+1,j,k,bi,bj)+0.25*
     $addtdx*maskw(i+1,j,k,bi,bj)*recip_dxc(i+1,j,bi,bj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+0.25*addtdx*
     $((-(maskw(i+1,j,k,bi,bj)*recip_dxc(i+1,j,bi,bj)))+maskw(i,j,k,bi,
     $bj)*recip_dxc(i,j,bi,bj))
            addtdx = 0.d0
          end do
        end do
      endif

      end


      subroutine adgmredi_slope_limit( dsigmadrreal, depthz, dsigmadx, 
     $dsigmady, bi, bj, addsigmadrreal, adslopex, adslopey, addsigmadx, 
     $addsigmady, adslopesqr, adtaperfct )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision fpi
      parameter ( fpi = 3.1415926535898d0 )
      integer max_len_fnam
      parameter ( max_len_fnam = 512 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision small_number
      parameter ( small_number = 1.d-6 )
      double precision small_taper
      parameter ( small_taper = 1000.d0 )

C==============================================
C declare common blocks
C==============================================
      double precision gm_background_k
      double precision gm_isopyck
      double precision gm_kmin_horiz
      double precision gm_maxslope
      double precision gm_scrit
      double precision gm_sd
      character*(max_len_fnam) gm_taper_scheme
      double precision gm_visbeck_alpha
      double precision gm_visbeck_depth
      double precision gm_visbeck_length
      double precision gm_visbeck_maxval_k
      common /gm_params/ gm_isopyck, gm_background_k, gm_maxslope, 
     $gm_kmin_horiz, gm_visbeck_alpha, gm_visbeck_length, 
     $gm_visbeck_depth, gm_visbeck_maxval_k, gm_taper_scheme, gm_scrit, 
     $gm_sd

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsigmadx(1-olx:snx+olx,1-oly:sny+oly)
      double precision addsigmady(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopesqr(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision adslopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtaperfct(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision depthz
      double precision dsigmadrreal(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadx(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmady(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision addrdsigmaltd(1-olx:snx+olx,1-oly:sny+oly)
      double precision adf1
      double precision adf2
      double precision adrnondim
      double precision adsmod
      double precision cspd
      double precision drdsigmaltd(1-olx:snx+olx,1-oly:sny+oly)
      double precision dsigmadrrealh(1-olx:snx+olx,1-oly:sny+oly)
      double precision f1
      double precision f2
      integer i
      integer ip1
      integer ip2
      integer j
      double precision lrho
      double precision maxslopesqr
      double precision rnondim
      double precision slopesqr(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopex(1-olx:snx+olx,1-oly:sny+oly)
      double precision slopey(1-olx:snx+olx,1-oly:sny+oly)
      double precision smod

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          dsigmadrrealh(ip1,ip2) = dsigmadrreal(ip1,ip2)
        end do
      end do

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addrdsigmaltd(ip1,ip2) = 0.d0
        end do
      end do
      adf1 = 0.d0
      adf2 = 0.d0
      adrnondim = 0.d0
      adsmod = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (gm_taper_scheme .eq. 'orig' .or. gm_taper_scheme .eq. 
     $'clipping') then
      else
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            if (dsigmadrreal(i,j) .ne. 0.) then
              if (dsigmadrreal(i,j) .ge. (-small_number)) then
                dsigmadrreal(i,j) = -small_number
              endif
            endif
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            if (dsigmadrreal(i,j) .eq. 0.) then
              if (dsigmadx(i,j) .ne. 0.) then
                slopex(i,j) = sign(small_taper,dsigmadx(i,j))
              else
                slopex(i,j) = 0.d0
              endif
              if (dsigmady(i,j) .ne. 0.) then
                slopey(i,j) = sign(small_taper,dsigmady(i,j))
              else
                slopey(i,j) = 0.d0
              endif
            else
              drdsigmaltd(i,j) = 1./(dsigmadrreal(i,j)-small_number)
              slopex(i,j) = -(dsigmadx(i,j)*drdsigmaltd(i,j))
              slopey(i,j) = -(dsigmady(i,j)*drdsigmaltd(i,j))
            endif
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            slopesqr(i,j) = slopex(i,j)*slopex(i,j)+slopey(i,j)*
     $slopey(i,j)
          end do
        end do
        if (gm_taper_scheme .eq. 'linear') then
          maxslopesqr = gm_maxslope*gm_maxslope
          do j = 1-oly+1, sny+oly-1
            do i = 1-olx+1, snx+olx-1
              if (slopesqr(i,j) .eq. 0.) then
                adtaperfct(i,j) = 0.d0
              else if (slopesqr(i,j) .gt. maxslopesqr) then
                adslopesqr(i,j) = adslopesqr(i,j)-adtaperfct(i,j)*1./
     $(2.*sqrt(maxslopesqr/slopesqr(i,j)))*(maxslopesqr/(slopesqr(i,j)*
     $slopesqr(i,j)))
                adtaperfct(i,j) = 0.d0
              endif
            end do
          end do
        else if (gm_taper_scheme .eq. 'gkw91') then
          maxslopesqr = gm_maxslope*gm_maxslope
          do j = 1-oly+1, sny+oly-1
            do i = 1-olx+1, snx+olx-1
              if (slopesqr(i,j) .eq. 0.) then
                adtaperfct(i,j) = 0.d0
              else if (slopesqr(i,j) .gt. maxslopesqr) then
                adslopesqr(i,j) = adslopesqr(i,j)-adtaperfct(i,j)*
     $(maxslopesqr/(slopesqr(i,j)*slopesqr(i,j)))
                adtaperfct(i,j) = 0.d0
              endif
            end do
          end do
        else if (gm_taper_scheme .eq. 'dm95') then
          do j = 1-oly+1, sny+oly-1
            adsmod = 0.d0
            do i = 1-olx+1, snx+olx-1
              adsmod = 0.d0
              if (slopesqr(i,j) .eq. 0.) then
                adtaperfct(i,j) = 0.d0
              else
                smod = sqrt(slopesqr(i,j))
                adsmod = adsmod-0.5*adtaperfct(i,j)*(1./cosh((gm_scrit-
     $smod)/gm_sd)**2/gm_sd)
                adtaperfct(i,j) = 0.d0
                adslopesqr(i,j) = adslopesqr(i,j)+adsmod*(1./(2.*
     $sqrt(slopesqr(i,j))))
                adsmod = 0.d0
              endif
            end do
          end do
        else if (gm_taper_scheme .eq. 'ldd97') then
          do j = sny+oly-1, 1-oly+1, -1
            do i = snx+olx-1, 1-olx+1, -1
              if (slopesqr(i,j) .eq. 0.) then
                adtaperfct(i,j) = 0.d0
              else
                smod = sqrt(slopesqr(i,j))
                f1 = 0.5*(1.+tanh((gm_scrit-smod)/gm_sd))
                cspd = 2.
                lrho = 1.d+5
                if (fcori(i,j,bi,bj) .ne. 0.) then
                  lrho = cspd/abs(fcori(i,j,bi,bj))
                endif
                lrho = min(lrho,1.d+5)
                lrho = max(lrho,15000.d0)
                rnondim = depthz/(lrho*smod)
                f2 = 0.5*(1.+sin(fpi*(rnondim-0.5)))
                adf1 = adf1+adtaperfct(i,j)*f2
                adf2 = adf2+adtaperfct(i,j)*f1
                adtaperfct(i,j) = 0.d0
                adrnondim = adrnondim+0.5*adf2*fpi*cos(fpi*(rnondim-0.5)
     $)
                adf2 = 0.d0
                adsmod = adsmod-adrnondim*(depthz*lrho/(lrho*smod*lrho*
     $smod))
                adrnondim = 0.d0
                adsmod = adsmod-0.5*adf1*(1./cosh((gm_scrit-smod)/gm_sd)
     $**2/gm_sd)
                adf1 = 0.d0
                adslopesqr(i,j) = adslopesqr(i,j)+adsmod*(1./(2.*
     $sqrt(slopesqr(i,j))))
                adsmod = 0.d0
              endif
            end do
          end do
        endif
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            adtaperfct(i,j) = 0.d0
            adslopex(i,j) = adslopex(i,j)+2*adslopesqr(i,j)*slopex(i,j)
            adslopey(i,j) = adslopey(i,j)+2*adslopesqr(i,j)*slopey(i,j)
            adslopesqr(i,j) = 0.d0
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            if (dsigmadrreal(i,j) .eq. 0.) then
              if (dsigmady(i,j) .ne. 0.) then
                adslopey(i,j) = 0.d0
              else
                adslopey(i,j) = 0.d0
              endif
              if (dsigmadx(i,j) .ne. 0.) then
                adslopex(i,j) = 0.d0
              else
                adslopex(i,j) = 0.d0
              endif
            else
              drdsigmaltd(i,j) = 1./(dsigmadrreal(i,j)-small_number)
              addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopey(i,j)*
     $dsigmady(i,j)
              addsigmady(i,j) = addsigmady(i,j)-adslopey(i,j)*
     $drdsigmaltd(i,j)
              adslopey(i,j) = 0.d0
              addrdsigmaltd(i,j) = addrdsigmaltd(i,j)-adslopex(i,j)*
     $dsigmadx(i,j)
              addsigmadx(i,j) = addsigmadx(i,j)-adslopex(i,j)*
     $drdsigmaltd(i,j)
              adslopex(i,j) = 0.d0
              addsigmadrreal(i,j) = addsigmadrreal(i,j)-addrdsigmaltd(i,
     $j)/((dsigmadrreal(i,j)-small_number)*(dsigmadrreal(i,j)-
     $small_number))
              addrdsigmaltd(i,j) = 0.d0
            endif
          end do
        end do
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            dsigmadrreal(ip1,ip2) = dsigmadrrealh(ip1,ip2)
          end do
        end do
        do j = 1-oly+1, sny+oly-1
          do i = 1-olx+1, snx+olx-1
            if (dsigmadrreal(i,j) .ne. 0.) then
              if (dsigmadrreal(i,j) .ge. (-small_number)) then
                addsigmadrreal(i,j) = 0.d0
              endif
            endif
          end do
        end do
      endif

C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adgmredi_xtransport( imin, imax, jmin, jmax, bi, bj, k,
     $ xa, tracer, mythid, adtracer, addf )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_hortensor/ adkux, adkvy

      real*4 comlev1_bibj_k_kux_38h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkux/ comlev1_bibj_k_kux_38h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer mythid
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer i
      integer ip1
      integer ip2
      integer j
      integer kkey
      integer max1
      integer max2
      integer max3

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      kkey = (ikey-1)*nr+k
      if (usegmredi) then
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            kux(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_kux_38h(ip1,ip2,kkey)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            adkux(i,j,k,bi,bj) = adkux(i,j,k,bi,bj)-addf(i,j)*xa(i,j)*
     $recip_dxc(i,j,bi,bj)*(tracer(i,j,k,bi,bj)-tracer(i-1,j,k,bi,bj))
            adtracer(i-1,j,k,bi,bj) = adtracer(i-1,j,k,bi,bj)+addf(i,j)*
     $xa(i,j)*kux(i,j,k,bi,bj)*recip_dxc(i,j,bi,bj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-addf(i,j)*
     $xa(i,j)*kux(i,j,k,bi,bj)*recip_dxc(i,j,bi,bj)
          end do
        end do
      endif

      end


      subroutine mdgmredi_xtransport( imin, imax, jmin, jmax, bi, bj, k,
     $ xa, tracer, df, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_k_kux_38h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkux/ comlev1_bibj_k_kux_38h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      double precision df(1-olx:snx+olx,1-oly:sny+oly)
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer mythid
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer i
      integer ip1
      integer ip2
      integer j
      integer kkey
      integer max1
      integer max2
      integer max3

C**********************************************
C executable statements of routine
C**********************************************
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      kkey = (ikey-1)*nr+k
      if (usegmredi) then
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_kux_38h(ip1,ip2,kkey) = kux(ip1-1+1-olx,ip2-
     $1+1-oly,k,bi,bj)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            df(i,j) = df(i,j)-xa(i,j)*kux(i,j,k,bi,bj)*recip_dxc(i,j,bi,
     $bj)*(tracer(i,j,k,bi,bj)-tracer(i-1,j,k,bi,bj))
          end do
        end do
      endif
      end


      subroutine adgmredi_ytransport( imin, imax, jmin, jmax, bi, bj, k,
     $ ya, tracer, mythid, adtracer, addf )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_hortensor/ adkux, adkvy

      real*4 comlev1_bibj_k_kvy_39h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkvy/ comlev1_bibj_k_kvy_39h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer mythid
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer i
      integer ip1
      integer ip2
      integer j
      integer kkey
      integer max1
      integer max2
      integer max3

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      kkey = (ikey-1)*nr+k
      if (usegmredi) then
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            kvy(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_kvy_39h(ip1,ip2,kkey)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            adkvy(i,j,k,bi,bj) = adkvy(i,j,k,bi,bj)-addf(i,j)*ya(i,j)*
     $recip_dyc(i,j,bi,bj)*(tracer(i,j,k,bi,bj)-tracer(i,j-1,k,bi,bj))
            adtracer(i,j-1,k,bi,bj) = adtracer(i,j-1,k,bi,bj)+addf(i,j)*
     $ya(i,j)*kvy(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)
            adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)-addf(i,j)*
     $ya(i,j)*kvy(i,j,k,bi,bj)*recip_dyc(i,j,bi,bj)
          end do
        end do
      endif

      end


      subroutine mdgmredi_ytransport( imin, imax, jmin, jmax, bi, bj, k,
     $ ya, tracer, df, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_k_kvy_39h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadkvy/ comlev1_bibj_k_kvy_39h

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      double precision df(1-olx:snx+olx,1-oly:sny+oly)
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer mythid
      double precision tracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer i
      integer ip1
      integer ip2
      integer j
      integer kkey
      integer max1
      integer max2
      integer max3

C**********************************************
C executable statements of routine
C**********************************************
      act1 = bi-mybxlo(mythid)
      max1 = mybxhi(mythid)-mybxlo(mythid)+1
      act2 = bj-mybylo(mythid)
      max2 = mybyhi(mythid)-mybylo(mythid)+1
      act3 = mythid-1
      max3 = ntx*nty
      act4 = ikey_dynamics-1
      ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
      kkey = (ikey-1)*nr+k
      if (usegmredi) then
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_bibj_k_kvy_39h(ip1,ip2,kkey) = kvy(ip1-1+1-olx,ip2-
     $1+1-oly,k,bi,bj)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            df(i,j) = df(i,j)-ya(i,j)*kvy(i,j,k,bi,bj)*recip_dyc(i,j,bi,
     $bj)*(tracer(i,j,k,bi,bj)-tracer(i,j-1,k,bi,bj))
          end do
        end do
      endif
      end


      subroutine adgrad_sigma( bi, bj, k, adrhok, adsigkm1, adsigkp1, 
     $adsigmax, adsigmay, adsigmar )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigkm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigkp1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          if (k .ne. 1 .and. hfacc(i,j,k,bi,bj) .ne. 0.) then
            adsigkm1(i,j) = adsigkm1(i,j)+adsigmar(i,j,k)*recip_drc(k)*
     $rkfac
            adsigkp1(i,j) = adsigkp1(i,j)-adsigmar(i,j,k)*recip_drc(k)*
     $rkfac
            adsigmar(i,j,k) = 0.d0
          else
            adsigmar(i,j,k) = 0.d0
          endif
        end do
      end do
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adrhok(i,j-1) = adrhok(i,j-1)-adsigmay(i,j,k)*masks(i,j,k,bi,
     $bj)*recip_dyc(i,j,bi,bj)
          adrhok(i,j) = adrhok(i,j)+adsigmay(i,j,k)*masks(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)
          adsigmay(i,j,k) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adrhok(i-1,j) = adrhok(i-1,j)-adsigmax(i,j,k)*maskw(i,j,k,bi,
     $bj)*recip_dxc(i,j,bi,bj)
          adrhok(i,j) = adrhok(i,j)+adsigmax(i,j,k)*maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)
          adsigmax(i,j,k) = 0.d0
        end do
      end do

      end


      subroutine adgroatb( a22, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      double precision adtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmix(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /admix/ adtmix, adtice

      double precision adfheff(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adhcorr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adrate/ adfheff, adfice, adfo, adhcorr

      double precision adarea(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      common /adseaice_dynvars/ adarea

      double precision adheff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision adhsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adtrans/ adheff, adhsnow

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision aqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_temp_r/ atemp, aqh, lwflux, precip

      double precision uwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_wind_r/ uwind, vwind

      double precision lwdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_rad_down_r/ swdown, lwdown, swdown0, swdown1, lwdown0,
     $ lwdown1

      double precision tice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmix(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /mix/ tmix, tice

      double precision fheff(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hcorr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /rate/ fheff, fice, fo, hcorr

      double precision area(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision uice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision vice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      common /seaice_dynvars/ uice, vice, area

      double precision heff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision hsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /trans/ heff, hsnow

C==============================================
C declare arguments
C==============================================
      double precision a22
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adhice(1-olx:snx+olx,1-oly:sny+oly)
      double precision adu1
      double precision adug(1-olx:snx+olx,1-oly:sny+oly)
      double precision adv1
      double precision areah(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision atemph(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      double precision hice(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer kopen
      double precision lwdownh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision u1
      double precision ug(1-olx:snx+olx,1-oly:sny+oly)
      double precision v1

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              lwdownh(ip1,ip2,ip3,ip4) = lwdown(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              atemph(ip1,ip2,ip3,ip4) = atemp(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                areah(ip1,ip2,ip3,ip4,ip5) = area(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adhice(ip1,ip2) = 0.d0
        end do
      end do
      adu1 = 0.d0
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adug(ip1,ip2) = 0.d0
        end do
      end do
      adv1 = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call exch_xy_rl( uwind,mythid )
      call exch_xy_rl( vwind,mythid )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              area(i,j,2,bi,bj) = max(a22,area(i,j,2,bi,bj))
              hice(i,j) = heff(i,j,2,bi,bj)/area(i,j,2,bi,bj)
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tmix(i,j,bi,bj) = theta(i,j,1,bi,bj)+273.16d0
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              u1 = 0.25d0*(uwind(i-1,j-1,bi,bj)+uwind(i-1,j,bi,bj)+
     $uwind(i,j-1,bi,bj)+uwind(i,j,bi,bj))
              v1 = 0.25d0*(vwind(i-1,j-1,bi,bj)+vwind(i-1,j,bi,bj)+
     $vwind(i,j-1,bi,bj)+vwind(i,j,bi,bj))
              ug(i,j) = sqrt(u1**2+v1**2)
            end do
          end do
          kopen = -1
          call budget( ug,tmix,hice,fo,kopen,bi,bj )
          kopen = 1
          call adbudget( ug,tice,hice,kopen,bi,bj,adug,adtice,adhice,
     $adfice )
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              tmix(i,j,bi,bj) = theta(i,j,1,bi,bj)+273.16d0
            end do
          end do
          kopen = -1
          call adbudget( ug,tmix,hice,kopen,bi,bj,adug,adtmix,adhice,
     $adfo )
          do j = 1, sny
            adu1 = 0.d0
            adv1 = 0.d0
            do i = 1, snx
              adu1 = 0.d0
              adv1 = 0.d0
              u1 = 0.25d0*(uwind(i-1,j-1,bi,bj)+uwind(i-1,j,bi,bj)+
     $uwind(i,j-1,bi,bj)+uwind(i,j,bi,bj))
              v1 = 0.25d0*(vwind(i-1,j-1,bi,bj)+vwind(i-1,j,bi,bj)+
     $vwind(i,j-1,bi,bj)+vwind(i,j,bi,bj))
              adu1 = adu1+2*adug(i,j)*1./(2.*sqrt(u1**2+v1**2))*u1
              adv1 = adv1+2*adug(i,j)*1./(2.*sqrt(u1**2+v1**2))*v1
              adug(i,j) = 0.d0
              advwind(i-1,j-1,bi,bj) = advwind(i-1,j-1,bi,bj)+0.25d0*
     $adv1
              advwind(i,j-1,bi,bj) = advwind(i,j-1,bi,bj)+0.25d0*adv1
              advwind(i-1,j,bi,bj) = advwind(i-1,j,bi,bj)+0.25d0*adv1
              advwind(i,j,bi,bj) = advwind(i,j,bi,bj)+0.25d0*adv1
              adv1 = 0.d0
              aduwind(i-1,j-1,bi,bj) = aduwind(i-1,j-1,bi,bj)+0.25d0*
     $adu1
              aduwind(i,j-1,bi,bj) = aduwind(i,j-1,bi,bj)+0.25d0*adu1
              aduwind(i-1,j,bi,bj) = aduwind(i-1,j,bi,bj)+0.25d0*adu1
              aduwind(i,j,bi,bj) = aduwind(i,j,bi,bj)+0.25d0*adu1
              adu1 = 0.d0
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)+adtmix(i,j,bi,
     $bj)
              adtmix(i,j,bi,bj) = 0.d0
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              area(i,j,2,bi,bj) = max(a22,area(i,j,2,bi,bj))
              adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)-adhice(i,j)*
     $(heff(i,j,2,bi,bj)/(area(i,j,2,bi,bj)*area(i,j,2,bi,bj)))
              adheff(i,j,2,bi,bj) = adheff(i,j,2,bi,bj)+adhice(i,j)/
     $area(i,j,2,bi,bj)
              adhice(i,j) = 0.d0
              adfheff(i,j,bi,bj) = 0.d0
              do ip5 = 1, nsy
                do ip4 = 1, nsx
                  do ip3 = 1, 3
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,ip5)
      end do
                    end do
                  end do
                end do
              end do
              adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)*(0.5-sign(0.5d0,
     $a22-area(i,j,2,bi,bj)))
            end do
          end do
        end do
      end do
      call adexch_xy_rl( mythid,advwind )
      call adexch_xy_rl( mythid,aduwind )

C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adgrowth( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision half
      parameter ( half = 0.5d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      double precision one
      parameter ( one = 1.d0 )
      double precision two
      parameter ( two = 2.d0 )
      double precision zero
      parameter ( zero = 0.d0 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adevap(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_evap/ adevap

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adyneg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adofl/ adyneg

      double precision adqneti(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqneto(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqswi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adqflux/ adqneto, adqneti, adqswi

      double precision adfheff(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adhcorr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adrate/ adfheff, adfice, adfo, adhcorr

      double precision adseaice_salt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      common /adsalt_water/ adseaice_salt

      double precision adarea(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      common /adseaice_dynvars/ adarea

      double precision adsurfacetendencytice(1-olx:snx+olx,1-oly:sny+
     $oly,nsx,nsy)
      common /adseaice_external/ adsurfacetendencytice

      double precision adheff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision adhsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adtrans/ adheff, adhsnow

      double precision heffm(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision uvm(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /array/ heffm, uvm

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision aqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_temp_r/ atemp, aqh, lwflux, precip

      double precision uwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_wind_r/ uwind, vwind

      double precision lwdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_rad_down_r/ swdown, lwdown, swdown0, swdown1, lwdown0,
     $ lwdown1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision tice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tmix(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /mix/ tmix, tice

      double precision yneg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /ofl/ yneg

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision qneti(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qneto(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qswi(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qswo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /qflux/ qneto, qneti, qswo, qswi

      double precision fheff(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hcorr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /rate/ fheff, fice, fo, hcorr

      double precision max_heff
      double precision max_tice
      double precision min_atemp
      double precision min_lwdown
      double precision min_tice
      common /seaice_bound_rl/ max_heff, min_atemp, min_lwdown, 
     $max_tice, min_tice

      double precision area(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision uice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision vice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      common /seaice_dynvars/ uice, vice, area

      double precision a22
      double precision diff1
      double precision endingyear
      double precision fluxforcingend
      double precision fluxforcingperiod
      double precision fluxforcingstart
      double precision ho
      double precision lsr_error
      double precision seaice_albedo
      double precision seaice_drag
      double precision seaice_drysnowalb
      double precision seaice_dumpfreq
      double precision seaice_emissivity
      double precision seaice_iceconduct
      double precision seaice_latentice
      double precision seaice_latentwater
      double precision seaice_sensheat
      double precision seaice_shortwave
      double precision seaice_snowconduct
      double precision seaice_snowthick
      double precision seaice_strength
      double precision seaice_tavefreq
      double precision seaice_wateralbedo
      double precision seaice_waterdrag
      double precision seaice_wetsnowalb
      double precision sssforcingend
      double precision sssforcingperiod
      double precision sssforcingstart
      double precision sstforcingend
      double precision sstforcingperiod
      double precision sstforcingstart
      double precision startingyear
      double precision windforcingend
      double precision windforcingperiod
      double precision windforcingstart
      common /seaice_parm_rl/ seaice_dumpfreq, seaice_tavefreq, 
     $seaice_drag, seaice_waterdrag, seaice_albedo, seaice_drysnowalb, 
     $seaice_wetsnowalb, seaice_wateralbedo, seaice_strength, 
     $seaice_sensheat, seaice_latentwater, seaice_latentice, 
     $seaice_iceconduct, seaice_snowconduct, seaice_emissivity, 
     $seaice_snowthick, seaice_shortwave, lsr_error, diff1, a22, ho, 
     $windforcingstart, windforcingend, windforcingperiod, 
     $fluxforcingstart, fluxforcingend, fluxforcingperiod, 
     $sstforcingstart, sstforcingend, sstforcingperiod, sssforcingstart,
     $ sssforcingend, sssforcingperiod, startingyear, endingyear

      double precision heff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision hsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /trans/ heff, hsnow

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgarea(1-olx:snx+olx,1-oly:sny+oly)
      double precision adgheff(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtheta_old
      double precision ar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision areah(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision atemph(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bib1
      integer bib2
      integer bib3
      integer bib4
      integer bib5
      integer bib6
      integer bib7
      integer bib8
      integer bib9
      integer bj
      integer bjb1
      integer bjb2
      integer bjb3
      integer bjb4
      integer bjb5
      integer bjb6
      integer bjb7
      integer bjb8
      integer bjb9
      double precision garea(1-olx:snx+olx,1-oly:sny+oly)
      double precision gheff(1-olx:snx+olx,1-oly:sny+oly)
      double precision heffh(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision hsnowh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer i
      integer ib1
      integer ib2
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer jb1
      integer jb2
      double precision lwdownh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision q0
      double precision qs
      double precision sdf
      double precision tbc
      double precision theta_old
      double precision thetah(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision ticeh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision uwindh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwindh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              vwindh(ip1,ip2,ip3,ip4) = vwind(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              uwindh(ip1,ip2,ip3,ip4) = uwind(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              ticeh(ip1,ip2,ip3,ip4) = tice(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                thetah(ip1,ip2,ip3,ip4,ip5) = theta(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              lwdownh(ip1,ip2,ip3,ip4) = lwdown(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              hsnowh(ip1,ip2,ip3,ip4) = hsnow(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heffh(ip1,ip2,ip3,ip4,ip5) = heff(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              atemph(ip1,ip2,ip3,ip4) = atemp(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                areah(ip1,ip2,ip3,ip4,ip5) = area(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adar(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adgarea(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adgheff(ip1,ip2) = 0.d0
        end do
      end do
      adtheta_old = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      tbc = 271.2d0-273.16d0
      sdf = 1000.d0/330.d0
      q0 = 1.d-6/302.d0
      qs = 1.1d+8
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              ar(i,j,bi,bj) = min(area(i,j,2,bi,bj),heff(i,j,2,bi,bj)*
     $1.d+4)
              yneg(i,j,bi,bj) = (theta(i,j,1,bi,bj)-tbc)*drf(1)/
     $72.0764d0
              if (yneg(i,j,bi,bj) .le. zero) then
                heff(i,j,1,bi,bj) = heff(i,j,1,bi,bj)-yneg(i,j,bi,bj)
                theta(i,j,1,bi,bj) = tbc
              else
                heff(i,j,3,bi,bj) = heff(i,j,1,bi,bj)-yneg(i,j,bi,bj)
                heff(i,j,1,bi,bj) = max(zero,heff(i,j,3,bi,bj))
                yneg(i,j,bi,bj) = heff(i,j,1,bi,bj)-heff(i,j,3,bi,bj)
                theta(i,j,1,bi,bj) = yneg(i,j,bi,bj)*72.0764d0/drf(1)+
     $tbc
              endif
            end do
          end do
        end do
      end do
      call groatb( a22,mythid )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj))
              garea(i,j) = hsnow(i,j,bi,bj)*qs
              if (gheff(i,j) .gt. zero .and. gheff(i,j) .le. garea(i,j))
     $ then
                hsnow(i,j,bi,bj) = hsnow(i,j,bi,bj)-gheff(i,j)/qs
                fice(i,j,bi,bj) = zero
              else if (gheff(i,j) .gt. garea(i,j)) then
                fice(i,j,bi,bj) = -((gheff(i,j)-garea(i,j))/deltat)
                hsnow(i,j,bi,bj) = 0.
              endif
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              fheff(i,j,bi,bj) = fice(i,j,bi,bj)*ar(i,j,bi,bj)+(one-
     $ar(i,j,bi,bj))*fo(i,j,bi,bj)
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fheff(i,j,bi,bj)*q0)
              garea(i,j) = deltat*fo(i,j,bi,bj)*q0
              gheff(i,j) = -(one*min(heff(i,j,1,bi,bj),gheff(i,j)))
              garea(i,j) = max(zero,garea(i,j))
              hcorr(i,j,bi,bj) = min(zero,gheff(i,j))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              garea(i,j) = two*(one-area(i,j,2,bi,bj))*garea(i,j)/ho+
     $half*hcorr(i,j,bi,bj)*area(i,j,2,bi,bj)/(heff(i,j,1,bi,bj)+
     $0.00001d0)
              area(i,j,1,bi,bj) = area(i,j,1,bi,bj)+garea(i,j)
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj)*q0*ar(i,j,bi,bj))
              gheff(i,j) = -(one*min(heff(i,j,1,bi,bj),gheff(i,j)))
              heff(i,j,1,bi,bj) = heff(i,j,1,bi,bj)+gheff(i,j)
              qneti(i,j,bi,bj) = (gheff(i,j)-deltat*fice(i,j,bi,bj)*q0*
     $ar(i,j,bi,bj))/q0/deltat
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              if (fice(i,j,bi,bj) .gt. zero) then
                hsnow(i,j,bi,bj) = hsnow(i,j,bi,bj)+deltat*precip(i,j,
     $bi,bj)*area(i,j,2,bi,bj)*sdf
              endif
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              area(i,j,1,bi,bj) = min(area(i,j,1,bi,bj),heff(i,j,1,bi,
     $bj)/0.0001d0)
              area(i,j,1,bi,bj) = min(one,area(i,j,1,bi,bj))
              heff(i,j,1,bi,bj) = heff(i,j,1,bi,bj)*heffm(i,j,bi,bj)
              adhsnow(i,j,bi,bj) = adhsnow(i,j,bi,bj)*heffm(i,j,bi,bj)
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)*(0.5-sign(0.5d0,
     $heff(i,j,1,bi,bj)-max_heff))
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)*heffm(i,j,bi,bj)
              adarea(i,j,1,bi,bj) = adarea(i,j,1,bi,bj)*heffm(i,j,bi,bj)
              adhsnow(i,j,bi,bj) = adhsnow(i,j,bi,bj)*(0.5-sign(0.5d0,
     $zero-hsnow(i,j,bi,bj)))
              adarea(i,j,1,bi,bj) = adarea(i,j,1,bi,bj)*(0.5-sign(0.5d0,
     $zero-area(i,j,1,bi,bj)))
              do ip5 = 1, nsy
                do ip4 = 1, nsx
                  do ip3 = 1, 3
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,ip5)
      end do
                    end do
                  end do
                end do
              end do
              do ip5 = 1, nsy
                do ip4 = 1, nsx
                  do ip3 = 1, 3
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
      end do
                    end do
                  end do
                end do
              end do
              do bjb1 = mybylo(mythid), mybyhi(mythid)
                do bib1 = mybxlo(mythid), mybxhi(mythid)
                  do jb1 = 1, sny
                    do ib1 = 1, snx
      yneg(ib1,jb1,bib1,bjb1) = (theta(ib1,jb1,1,bib1,bjb1)-tbc)*drf(1)/
     $72.0764d0
      if (yneg(ib1,jb1,bib1,bjb1) .le. zero) then
        heff(ib1,jb1,1,bib1,bjb1) = heff(ib1,jb1,1,bib1,bjb1)-yneg(ib1,
     $jb1,bib1,bjb1)
      else
        heff(ib1,jb1,3,bib1,bjb1) = heff(ib1,jb1,1,bib1,bjb1)-yneg(ib1,
     $jb1,bib1,bjb1)
        heff(ib1,jb1,1,bib1,bjb1) = max(zero,heff(ib1,jb1,3,bib1,bjb1))
      endif
                    end do
                  end do
                end do
              end do
              call groatb( a22,mythid )
              do jb1 = 1, sny
                do ib1 = 1, snx
                  gheff(ib1,jb1) = -(deltat*fice(ib1,jb1,bi,bj))
                  garea(ib1,jb1) = hsnow(ib1,jb1,bi,bj)*qs
                end do
              end do
              do jb1 = 1, sny
                do ib1 = 1, snx
                  gheff(ib1,jb1) = -(deltat*fheff(ib1,jb1,bi,bj)*q0)
                  garea(ib1,jb1) = deltat*fo(ib1,jb1,bi,bj)*q0
                  gheff(ib1,jb1) = -(one*min(heff(ib1,jb1,1,bi,bj),
     $gheff(ib1,jb1)))
                  garea(ib1,jb1) = max(zero,garea(ib1,jb1))
                end do
              end do
              do jb1 = 1, sny
                do ib1 = 1, snx
                  garea(ib1,jb1) = two*(one-area(ib1,jb1,2,bi,bj))*
     $garea(ib1,jb1)/ho+half*hcorr(ib1,jb1,bi,bj)*area(ib1,jb1,2,bi,bj)/
     $(heff(ib1,jb1,1,bi,bj)+0.00001d0)
                  area(ib1,jb1,1,bi,bj) = area(ib1,jb1,1,bi,bj)+
     $garea(ib1,jb1)
                end do
              end do
              do jb1 = 1, sny
                do ib1 = 1, snx
                  gheff(ib1,jb1) = -(deltat*fice(ib1,jb1,bi,bj)*q0*
     $ar(ib1,jb1,bi,bj))
                  gheff(ib1,jb1) = -(one*min(heff(ib1,jb1,1,bi,bj),
     $gheff(ib1,jb1)))
                  heff(ib1,jb1,1,bi,bj) = heff(ib1,jb1,1,bi,bj)+
     $gheff(ib1,jb1)
                end do
              end do
              area(i,j,1,bi,bj) = min(area(i,j,1,bi,bj),heff(i,j,1,bi,
     $bj)/0.0001d0)
              adarea(i,j,1,bi,bj) = adarea(i,j,1,bi,bj)*(0.5-sign(0.5d0,
     $area(i,j,1,bi,bj)-one))
              do ip5 = 1, nsy
                do ip4 = 1, nsx
                  do ip3 = 1, 3
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,ip5)
      end do
                    end do
                  end do
                end do
              end do
              do ip4 = 1, nsy
                do ip3 = 1, nsx
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                    end do
                  end do
                end do
              end do
              do ip5 = 1, nsy
                do ip4 = 1, nsx
                  do ip3 = 1, 3
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
      end do
                    end do
                  end do
                end do
              end do
              do ip4 = 1, nsy
                do ip3 = 1, nsx
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                    end do
                  end do
                end do
              end do
              do ip4 = 1, nsy
                do ip3 = 1, nsx
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                    end do
                  end do
                end do
              end do
              do ip4 = 1, nsy
                do ip3 = 1, nsx
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                    end do
                  end do
                end do
              end do
              do ip4 = 1, nsy
                do ip3 = 1, nsx
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                    end do
                  end do
                end do
              end do
              do bjb2 = mybylo(mythid), mybyhi(mythid)
                do bib2 = mybxlo(mythid), mybxhi(mythid)
                  do jb2 = 1, sny
                    do ib2 = 1, snx
      yneg(ib2,jb2,bib2,bjb2) = (theta(ib2,jb2,1,bib2,bjb2)-tbc)*drf(1)/
     $72.0764d0
      if (yneg(ib2,jb2,bib2,bjb2) .le. zero) then
        heff(ib2,jb2,1,bib2,bjb2) = heff(ib2,jb2,1,bib2,bjb2)-yneg(ib2,
     $jb2,bib2,bjb2)
        yneg(ib2,jb2,bib2,bjb2) = tbc-theta(ib2,jb2,1,bib2,bjb2)
      else
        heff(ib2,jb2,3,bib2,bjb2) = heff(ib2,jb2,1,bib2,bjb2)-yneg(ib2,
     $jb2,bib2,bjb2)
        heff(ib2,jb2,1,bib2,bjb2) = max(zero,heff(ib2,jb2,3,bib2,bjb2))
        yneg(ib2,jb2,bib2,bjb2) = heff(ib2,jb2,1,bib2,bjb2)-heff(ib2,
     $jb2,3,bib2,bjb2)
        theta_old = theta(ib2,jb2,1,bib2,bjb2)
        theta(ib2,jb2,1,bib2,bjb2) = yneg(ib2,jb2,bib2,bjb2)*72.0764d0/
     $drf(1)+tbc
        yneg(ib2,jb2,bib2,bjb2) = theta(ib2,jb2,1,bib2,bjb2)-theta_old
      endif
                    end do
                  end do
                end do
              end do
              call groatb( a22,mythid )
              do jb2 = 1, sny
                do ib2 = 1, snx
                  gheff(ib2,jb2) = -(deltat*fice(ib2,jb2,bi,bj))
                  garea(ib2,jb2) = hsnow(ib2,jb2,bi,bj)*qs
                  if (gheff(ib2,jb2) .gt. zero .and. gheff(ib2,jb2) 
     $.le. garea(ib2,jb2)) then
                    fice(ib2,jb2,bi,bj) = zero
                  else if (gheff(ib2,jb2) .gt. garea(ib2,jb2)) then
                    fice(ib2,jb2,bi,bj) = -((gheff(ib2,jb2)-garea(ib2,
     $jb2))/deltat)
                  endif
                end do
              end do
              do jb2 = 1, sny
                do ib2 = 1, snx
                  fheff(ib2,jb2,bi,bj) = fice(ib2,jb2,bi,bj)*ar(ib2,jb2,
     $bi,bj)+(one-ar(ib2,jb2,bi,bj))*fo(ib2,jb2,bi,bj)
                end do
              end do
              do jb2 = 1, sny
                do ib2 = 1, snx
                  gheff(ib2,jb2) = -(deltat*fheff(ib2,jb2,bi,bj)*q0)
                  garea(ib2,jb2) = deltat*fo(ib2,jb2,bi,bj)*q0
                  gheff(ib2,jb2) = -(one*min(heff(ib2,jb2,1,bi,bj),
     $gheff(ib2,jb2)))
                  garea(ib2,jb2) = max(zero,garea(ib2,jb2))
                end do
              end do
              do jb2 = 1, sny
                do ib2 = 1, snx
                  garea(ib2,jb2) = two*(one-area(ib2,jb2,2,bi,bj))*
     $garea(ib2,jb2)/ho+half*hcorr(ib2,jb2,bi,bj)*area(ib2,jb2,2,bi,bj)/
     $(heff(ib2,jb2,1,bi,bj)+0.00001d0)
                  area(ib2,jb2,1,bi,bj) = area(ib2,jb2,1,bi,bj)+
     $garea(ib2,jb2)
                end do
              end do
              do jb2 = 1, sny
                do ib2 = 1, snx
                  gheff(ib2,jb2) = -(deltat*fice(ib2,jb2,bi,bj)*q0*
     $ar(ib2,jb2,bi,bj))
                  gheff(ib2,jb2) = -(one*min(heff(ib2,jb2,1,bi,bj),
     $gheff(ib2,jb2)))
                  heff(ib2,jb2,1,bi,bj) = heff(ib2,jb2,1,bi,bj)+
     $gheff(ib2,jb2)
                end do
              end do
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+1.d+4*adarea(i,
     $j,1,bi,bj)*(0.5-sign(0.5d0,heff(i,j,1,bi,bj)/0.0001d0-area(i,j,1,
     $bi,bj)))
              adarea(i,j,1,bi,bj) = adarea(i,j,1,bi,bj)*(0.5+sign(0.5d0,
     $heff(i,j,1,bi,bj)/0.0001d0-area(i,j,1,bi,bj)))
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb3 = mybylo(mythid), mybyhi(mythid)
            do bib3 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib3,bjb3) = (theta(i,j,1,bib3,bjb3)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib3,bjb3) .le. zero) then
                    heff(i,j,1,bib3,bjb3) = heff(i,j,1,bib3,bjb3)-
     $yneg(i,j,bib3,bjb3)
                    yneg(i,j,bib3,bjb3) = tbc-theta(i,j,1,bib3,bjb3)
                    theta(i,j,1,bib3,bjb3) = tbc
                  else
                    heff(i,j,3,bib3,bjb3) = heff(i,j,1,bib3,bjb3)-
     $yneg(i,j,bib3,bjb3)
                    heff(i,j,1,bib3,bjb3) = max(zero,heff(i,j,3,bib3,
     $bjb3))
                    yneg(i,j,bib3,bjb3) = heff(i,j,1,bib3,bjb3)-heff(i,
     $j,3,bib3,bjb3)
                    theta_old = theta(i,j,1,bib3,bjb3)
                    theta(i,j,1,bib3,bjb3) = yneg(i,j,bib3,bjb3)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib3,bjb3) = theta(i,j,1,bib3,bjb3)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj))
              garea(i,j) = hsnow(i,j,bi,bj)*qs
              if (gheff(i,j) .gt. zero .and. gheff(i,j) .le. garea(i,j))
     $ then
                fice(i,j,bi,bj) = zero
              else if (gheff(i,j) .gt. garea(i,j)) then
                fice(i,j,bi,bj) = -((gheff(i,j)-garea(i,j))/deltat)
              endif
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              adevap(i,j,bi,bj) = adevap(i,j,bi,bj)+adempmr(i,j,bi,bj)
              adseaice_salt(i,j,bi,bj) = adseaice_salt(i,j,bi,bj)+
     $adempmr(i,j,bi,bj)*(0.92d0/deltat)
              adempmr(i,j,bi,bj) = 0.d0
              adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)+adseaice_salt(i,
     $j,bi,bj)*(precip(i,j,bi,bj)*deltat/0.92d0)
              if (fice(i,j,bi,bj) .gt. zero) then
                adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)+adhsnow(i,j,
     $bi,bj)*deltat*precip(i,j,bi,bj)*sdf
              else
                adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)-
     $adseaice_salt(i,j,bi,bj)*(precip(i,j,bi,bj)*deltat/0.92d0)
              endif
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb4 = mybylo(mythid), mybyhi(mythid)
            do bib4 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib4,bjb4) = (theta(i,j,1,bib4,bjb4)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib4,bjb4) .le. zero) then
                    heff(i,j,1,bib4,bjb4) = heff(i,j,1,bib4,bjb4)-
     $yneg(i,j,bib4,bjb4)
                    yneg(i,j,bib4,bjb4) = tbc-theta(i,j,1,bib4,bjb4)
                    theta(i,j,1,bib4,bjb4) = tbc
                  else
                    heff(i,j,3,bib4,bjb4) = heff(i,j,1,bib4,bjb4)-
     $yneg(i,j,bib4,bjb4)
                    heff(i,j,1,bib4,bjb4) = max(zero,heff(i,j,3,bib4,
     $bjb4))
                    yneg(i,j,bib4,bjb4) = heff(i,j,1,bib4,bjb4)-heff(i,
     $j,3,bib4,bjb4)
                    theta_old = theta(i,j,1,bib4,bjb4)
                    theta(i,j,1,bib4,bjb4) = yneg(i,j,bib4,bjb4)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib4,bjb4) = theta(i,j,1,bib4,bjb4)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              adar(i,j,bi,bj) = adar(i,j,bi,bj)+adqsw(i,j,bi,bj)*
     $(qswi(i,j,bi,bj)-qswo(i,j,bi,bj))
              adqswi(i,j,bi,bj) = adqswi(i,j,bi,bj)+adqsw(i,j,bi,bj)*
     $ar(i,j,bi,bj)
              adqsw(i,j,bi,bj) = 0.d0
              adar(i,j,bi,bj) = adar(i,j,bi,bj)+adqnet(i,j,bi,bj)*
     $(qneti(i,j,bi,bj)-qneto(i,j,bi,bj))
              adqneti(i,j,bi,bj) = adqneti(i,j,bi,bj)+adqnet(i,j,bi,bj)*
     $ar(i,j,bi,bj)
              adqneto(i,j,bi,bj) = adqneto(i,j,bi,bj)+adqnet(i,j,bi,bj)*
     $(one-ar(i,j,bi,bj))
              adqnet(i,j,bi,bj) = 0.d0
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb5 = mybylo(mythid), mybyhi(mythid)
            do bib5 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib5,bjb5) = (theta(i,j,1,bib5,bjb5)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib5,bjb5) .le. zero) then
                    heff(i,j,1,bib5,bjb5) = heff(i,j,1,bib5,bjb5)-
     $yneg(i,j,bib5,bjb5)
                    yneg(i,j,bib5,bjb5) = tbc-theta(i,j,1,bib5,bjb5)
                    theta(i,j,1,bib5,bjb5) = tbc
                  else
                    heff(i,j,3,bib5,bjb5) = heff(i,j,1,bib5,bjb5)-
     $yneg(i,j,bib5,bjb5)
                    heff(i,j,1,bib5,bjb5) = max(zero,heff(i,j,3,bib5,
     $bjb5))
                    yneg(i,j,bib5,bjb5) = heff(i,j,1,bib5,bjb5)-heff(i,
     $j,3,bib5,bjb5)
                    theta_old = theta(i,j,1,bib5,bjb5)
                    theta(i,j,1,bib5,bjb5) = yneg(i,j,bib5,bjb5)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib5,bjb5) = theta(i,j,1,bib5,bjb5)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj))
              garea(i,j) = hsnow(i,j,bi,bj)*qs
              if (gheff(i,j) .gt. zero .and. gheff(i,j) .le. garea(i,j))
     $ then
                fice(i,j,bi,bj) = zero
              else if (gheff(i,j) .gt. garea(i,j)) then
                fice(i,j,bi,bj) = -((gheff(i,j)-garea(i,j))/deltat)
              endif
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj)*q0*ar(i,j,bi,bj))
              adar(i,j,bi,bj) = adar(i,j,bi,bj)-adqneti(i,j,bi,bj)*
     $(deltat*fice(i,j,bi,bj)*q0/q0/deltat)
              adfice(i,j,bi,bj) = adfice(i,j,bi,bj)-adqneti(i,j,bi,bj)*
     $(deltat*q0*ar(i,j,bi,bj)/q0/deltat)
              adgheff(i,j) = adgheff(i,j)+adqneti(i,j,bi,bj)*(1/q0/
     $deltat)
              adqneti(i,j,bi,bj) = 0.d0
              adgheff(i,j) = adgheff(i,j)+adseaice_salt(i,j,bi,bj)
              adgheff(i,j) = adgheff(i,j)+adheff(i,j,1,bi,bj)
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)-adgheff(i,j)*
     $one*(0.5+sign(0.5d0,gheff(i,j)-heff(i,j,1,bi,bj)))
              adgheff(i,j) = -(adgheff(i,j)*one*(0.5-sign(0.5d0,gheff(i,
     $j)-heff(i,j,1,bi,bj))))
              adar(i,j,bi,bj) = adar(i,j,bi,bj)-adgheff(i,j)*deltat*
     $fice(i,j,bi,bj)*q0
              adfice(i,j,bi,bj) = adfice(i,j,bi,bj)-adgheff(i,j)*deltat*
     $q0*ar(i,j,bi,bj)
              adgheff(i,j) = 0.d0
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb6 = mybylo(mythid), mybyhi(mythid)
            do bib6 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib6,bjb6) = (theta(i,j,1,bib6,bjb6)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib6,bjb6) .le. zero) then
                    heff(i,j,1,bib6,bjb6) = heff(i,j,1,bib6,bjb6)-
     $yneg(i,j,bib6,bjb6)
                    yneg(i,j,bib6,bjb6) = tbc-theta(i,j,1,bib6,bjb6)
                    theta(i,j,1,bib6,bjb6) = tbc
                  else
                    heff(i,j,3,bib6,bjb6) = heff(i,j,1,bib6,bjb6)-
     $yneg(i,j,bib6,bjb6)
                    heff(i,j,1,bib6,bjb6) = max(zero,heff(i,j,3,bib6,
     $bjb6))
                    yneg(i,j,bib6,bjb6) = heff(i,j,1,bib6,bjb6)-heff(i,
     $j,3,bib6,bjb6)
                    theta_old = theta(i,j,1,bib6,bjb6)
                    theta(i,j,1,bib6,bjb6) = yneg(i,j,bib6,bjb6)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib6,bjb6) = theta(i,j,1,bib6,bjb6)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              garea(i,j) = hsnow(i,j,bi,bj)*qs
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              garea(i,j) = deltat*fo(i,j,bi,bj)*q0
              garea(i,j) = max(zero,garea(i,j))
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              adgarea(i,j) = adgarea(i,j)+adarea(i,j,1,bi,bj)
              adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)+adgarea(i,j)*((-
     $(two*garea(i,j)/ho))+half*hcorr(i,j,bi,bj)/(0.00001d0+heff(i,j,1,
     $bi,bj)))
              adhcorr(i,j,bi,bj) = adhcorr(i,j,bi,bj)+adgarea(i,j)*
     $(half*area(i,j,2,bi,bj)/(0.00001d0+heff(i,j,1,bi,bj)))
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)-adgarea(i,j)*
     $(half*hcorr(i,j,bi,bj)*area(i,j,2,bi,bj)/((0.00001d0+heff(i,j,1,
     $bi,bj))*(0.00001d0+heff(i,j,1,bi,bj))))
              adgarea(i,j) = adgarea(i,j)*(two*(one-area(i,j,2,bi,bj))/
     $ho)
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb7 = mybylo(mythid), mybyhi(mythid)
            do bib7 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib7,bjb7) = (theta(i,j,1,bib7,bjb7)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib7,bjb7) .le. zero) then
                    heff(i,j,1,bib7,bjb7) = heff(i,j,1,bib7,bjb7)-
     $yneg(i,j,bib7,bjb7)
                    yneg(i,j,bib7,bjb7) = tbc-theta(i,j,1,bib7,bjb7)
                    theta(i,j,1,bib7,bjb7) = tbc
                  else
                    heff(i,j,3,bib7,bjb7) = heff(i,j,1,bib7,bjb7)-
     $yneg(i,j,bib7,bjb7)
                    heff(i,j,1,bib7,bjb7) = max(zero,heff(i,j,3,bib7,
     $bjb7))
                    yneg(i,j,bib7,bjb7) = heff(i,j,1,bib7,bjb7)-heff(i,
     $j,3,bib7,bjb7)
                    theta_old = theta(i,j,1,bib7,bjb7)
                    theta(i,j,1,bib7,bjb7) = yneg(i,j,bib7,bjb7)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib7,bjb7) = theta(i,j,1,bib7,bjb7)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj))
              garea(i,j) = hsnow(i,j,bi,bj)*qs
              if (gheff(i,j) .gt. zero .and. gheff(i,j) .le. garea(i,j))
     $ then
                fice(i,j,bi,bj) = zero
              else if (gheff(i,j) .gt. garea(i,j)) then
                fice(i,j,bi,bj) = -((gheff(i,j)-garea(i,j))/deltat)
              endif
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              fheff(i,j,bi,bj) = fice(i,j,bi,bj)*ar(i,j,bi,bj)+(one-
     $ar(i,j,bi,bj))*fo(i,j,bi,bj)
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fheff(i,j,bi,bj)*q0)
              garea(i,j) = deltat*fo(i,j,bi,bj)*q0
              gheff(i,j) = -(one*min(heff(i,j,1,bi,bj),gheff(i,j)))
              adgheff(i,j) = adgheff(i,j)+adhcorr(i,j,bi,bj)*(0.5-
     $sign(0.5d0,gheff(i,j)-zero))
              adhcorr(i,j,bi,bj) = 0.d0
              adgarea(i,j) = adgarea(i,j)*(0.5-sign(0.5d0,zero-garea(i,
     $j)))
              gheff(i,j) = -(deltat*fheff(i,j,bi,bj)*q0)
              adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)-adgheff(i,j)*
     $one*(0.5+sign(0.5d0,gheff(i,j)-heff(i,j,1,bi,bj)))
              adgheff(i,j) = -(adgheff(i,j)*one*(0.5-sign(0.5d0,gheff(i,
     $j)-heff(i,j,1,bi,bj))))
              adfo(i,j,bi,bj) = adfo(i,j,bi,bj)+adgarea(i,j)*deltat*q0
              adgarea(i,j) = 0.d0
              adfheff(i,j,bi,bj) = adfheff(i,j,bi,bj)-adgheff(i,j)*
     $deltat*q0
              adgheff(i,j) = 0.d0
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb8 = mybylo(mythid), mybyhi(mythid)
            do bib8 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib8,bjb8) = (theta(i,j,1,bib8,bjb8)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib8,bjb8) .le. zero) then
                    heff(i,j,1,bib8,bjb8) = heff(i,j,1,bib8,bjb8)-
     $yneg(i,j,bib8,bjb8)
                    yneg(i,j,bib8,bjb8) = tbc-theta(i,j,1,bib8,bjb8)
                    theta(i,j,1,bib8,bjb8) = tbc
                  else
                    heff(i,j,3,bib8,bjb8) = heff(i,j,1,bib8,bjb8)-
     $yneg(i,j,bib8,bjb8)
                    heff(i,j,1,bib8,bjb8) = max(zero,heff(i,j,3,bib8,
     $bjb8))
                    yneg(i,j,bib8,bjb8) = heff(i,j,1,bib8,bjb8)-heff(i,
     $j,3,bib8,bjb8)
                    theta_old = theta(i,j,1,bib8,bjb8)
                    theta(i,j,1,bib8,bjb8) = yneg(i,j,bib8,bjb8)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib8,bjb8) = theta(i,j,1,bib8,bjb8)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj))
              garea(i,j) = hsnow(i,j,bi,bj)*qs
              if (gheff(i,j) .gt. zero .and. gheff(i,j) .le. garea(i,j))
     $ then
                fice(i,j,bi,bj) = zero
              else if (gheff(i,j) .gt. garea(i,j)) then
                fice(i,j,bi,bj) = -((gheff(i,j)-garea(i,j))/deltat)
              endif
            end do
          end do
          do j = 1, sny
            do i = 1, snx
              adar(i,j,bi,bj) = adar(i,j,bi,bj)+adfheff(i,j,bi,bj)*
     $(fice(i,j,bi,bj)-fo(i,j,bi,bj))
              adfice(i,j,bi,bj) = adfice(i,j,bi,bj)+adfheff(i,j,bi,bj)*
     $ar(i,j,bi,bj)
              adfo(i,j,bi,bj) = adfo(i,j,bi,bj)+adfheff(i,j,bi,bj)*(one-
     $ar(i,j,bi,bj))
              adfheff(i,j,bi,bj) = 0.d0
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, 3
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip5 = 1, nsy
            do ip4 = 1, nsx
              do ip3 = 1, nr
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,
     $ip5)
                  end do
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do ip4 = 1, nsy
            do ip3 = 1, nsx
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
                end do
              end do
            end do
          end do
          do bjb9 = mybylo(mythid), mybyhi(mythid)
            do bib9 = mybxlo(mythid), mybxhi(mythid)
              do j = 1, sny
                do i = 1, snx
                  yneg(i,j,bib9,bjb9) = (theta(i,j,1,bib9,bjb9)-tbc)*
     $drf(1)/72.0764d0
                  if (yneg(i,j,bib9,bjb9) .le. zero) then
                    heff(i,j,1,bib9,bjb9) = heff(i,j,1,bib9,bjb9)-
     $yneg(i,j,bib9,bjb9)
                    yneg(i,j,bib9,bjb9) = tbc-theta(i,j,1,bib9,bjb9)
                    theta(i,j,1,bib9,bjb9) = tbc
                  else
                    heff(i,j,3,bib9,bjb9) = heff(i,j,1,bib9,bjb9)-
     $yneg(i,j,bib9,bjb9)
                    heff(i,j,1,bib9,bjb9) = max(zero,heff(i,j,3,bib9,
     $bjb9))
                    yneg(i,j,bib9,bjb9) = heff(i,j,1,bib9,bjb9)-heff(i,
     $j,3,bib9,bjb9)
                    theta_old = theta(i,j,1,bib9,bjb9)
                    theta(i,j,1,bib9,bjb9) = yneg(i,j,bib9,bjb9)*
     $72.0764d0/drf(1)+tbc
                    yneg(i,j,bib9,bjb9) = theta(i,j,1,bib9,bjb9)-
     $theta_old
                  endif
                end do
              end do
            end do
          end do
          call groatb( a22,mythid )
          do j = 1, sny
            do i = 1, snx
              gheff(i,j) = -(deltat*fice(i,j,bi,bj))
              garea(i,j) = hsnow(i,j,bi,bj)*qs
              if (gheff(i,j) .gt. zero .and. gheff(i,j) .le. garea(i,j))
     $ then
                adfice(i,j,bi,bj) = 0.d0
                adar(i,j,bi,bj) = adar(i,j,bi,bj)-adseaice_salt(i,j,bi,
     $bj)*(gheff(i,j)/qs/sdf/0.92d0)
                adgheff(i,j) = adgheff(i,j)-adseaice_salt(i,j,bi,bj)*1/
     $qs/sdf/0.92d0*ar(i,j,bi,bj)
                adgheff(i,j) = adgheff(i,j)-adhsnow(i,j,bi,bj)/qs
              else if (gheff(i,j) .gt. garea(i,j)) then
                adhsnow(i,j,bi,bj) = 0.d0
                adar(i,j,bi,bj) = adar(i,j,bi,bj)-adseaice_salt(i,j,bi,
     $bj)*(hsnow(i,j,bi,bj)/sdf/0.92d0)
                adhsnow(i,j,bi,bj) = adhsnow(i,j,bi,bj)-adseaice_salt(i,
     $j,bi,bj)*1/sdf/0.92d0*ar(i,j,bi,bj)
                adgarea(i,j) = adgarea(i,j)+adfice(i,j,bi,bj)/deltat
                adgheff(i,j) = adgheff(i,j)-adfice(i,j,bi,bj)/deltat
                adfice(i,j,bi,bj) = 0.d0
              endif
              adhsnow(i,j,bi,bj) = adhsnow(i,j,bi,bj)+adgarea(i,j)*qs
              adgarea(i,j) = 0.d0
              adfice(i,j,bi,bj) = adfice(i,j,bi,bj)-adgheff(i,j)*deltat
              adgheff(i,j) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              atemp(ip1,ip2,ip3,ip4) = atemph(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              hsnow(ip1,ip2,ip3,ip4) = hsnowh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              lwdown(ip1,ip2,ip3,ip4) = lwdownh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              tice(ip1,ip2,ip3,ip4) = ticeh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              yneg(i,j,bi,bj) = (theta(i,j,1,bi,bj)-tbc)*drf(1)/
     $72.0764d0
              if (yneg(i,j,bi,bj) .le. zero) then
                heff(i,j,1,bi,bj) = heff(i,j,1,bi,bj)-yneg(i,j,bi,bj)
                theta(i,j,1,bi,bj) = tbc
              else
                heff(i,j,3,bi,bj) = heff(i,j,1,bi,bj)-yneg(i,j,bi,bj)
                heff(i,j,1,bi,bj) = max(zero,heff(i,j,3,bi,bj))
                yneg(i,j,bi,bj) = heff(i,j,1,bi,bj)-heff(i,j,3,bi,bj)
                theta(i,j,1,bi,bj) = yneg(i,j,bi,bj)*72.0764d0/drf(1)+
     $tbc
              endif
            end do
          end do
        end do
      end do
      call adgroatb( a22,mythid )
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                theta(ip1,ip2,ip3,ip4,ip5) = thetah(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        adtheta_old = 0.d0
        do bi = mybxlo(mythid), mybxhi(mythid)
          adtheta_old = 0.d0
          do j = 1, sny
            adtheta_old = 0.d0
            do i = 1, snx
              adtheta_old = 0.d0
              yneg(i,j,bi,bj) = (theta(i,j,1,bi,bj)-tbc)*drf(1)/
     $72.0764d0
              adyneg(i,j,bi,bj) = adyneg(i,j,bi,bj)+
     $adsurfacetendencytice(i,j,bi,bj)/deltattracer
              adsurfacetendencytice(i,j,bi,bj) = 0.d0
              if (yneg(i,j,bi,bj) .le. zero) then
                adtheta(i,j,1,bi,bj) = 0.d0
                adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)-adyneg(i,j,
     $bi,bj)
                adyneg(i,j,bi,bj) = 0.d0
                adyneg(i,j,bi,bj) = adyneg(i,j,bi,bj)-adseaice_salt(i,j,
     $bi,bj)
                adyneg(i,j,bi,bj) = adyneg(i,j,bi,bj)-adheff(i,j,1,bi,
     $bj)
              else
                heff(i,j,3,bi,bj) = heff(i,j,1,bi,bj)-yneg(i,j,bi,bj)
                adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)+adyneg(i,j,
     $bi,bj)
                adtheta_old = adtheta_old-adyneg(i,j,bi,bj)
                adyneg(i,j,bi,bj) = 0.d0
                adyneg(i,j,bi,bj) = adyneg(i,j,bi,bj)+adtheta(i,j,1,bi,
     $bj)*(72.0764d0/drf(1))
                adtheta(i,j,1,bi,bj) = 0.d0
                adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)+adtheta_old
                adtheta_old = 0.d0
                adgheff(i,j) = adgheff(i,j)-adseaice_salt(i,j,bi,bj)
                adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+
     $adseaice_salt(i,j,bi,bj)
                adheff(i,j,3,bi,bj) = adheff(i,j,3,bi,bj)-adyneg(i,j,bi,
     $bj)
                adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+adyneg(i,j,bi,
     $bj)
                adyneg(i,j,bi,bj) = 0.d0
                adheff(i,j,3,bi,bj) = adheff(i,j,3,bi,bj)+adheff(i,j,1,
     $bi,bj)*(0.5-sign(0.5d0,zero-heff(i,j,3,bi,bj)))
                adheff(i,j,1,bi,bj) = 0.d0
                adyneg(i,j,bi,bj) = adyneg(i,j,bi,bj)-adheff(i,j,3,bi,
     $bj)
                adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+adheff(i,j,3,
     $bi,bj)
                adheff(i,j,3,bi,bj) = 0.d0
                adheff(i,j,1,bi,bj) = adheff(i,j,1,bi,bj)+adgheff(i,j)
                adgheff(i,j) = 0.d0
              endif
              adtheta(i,j,1,bi,bj) = adtheta(i,j,1,bi,bj)+adyneg(i,j,bi,
     $bj)*(drf(1)/72.0764d0)
              adyneg(i,j,bi,bj) = 0.d0
              do ip5 = 1, nsy
                do ip4 = 1, nsx
                  do ip3 = 1, 3
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
      end do
                    end do
                  end do
                end do
              end do
              adarea(i,j,2,bi,bj) = adarea(i,j,2,bi,bj)+adar(i,j,bi,bj)*
     $(0.5+sign(0.5d0,heff(i,j,2,bi,bj)*1.d+4-area(i,j,2,bi,bj)))
              adheff(i,j,2,bi,bj) = adheff(i,j,2,bi,bj)+1.d+4*adar(i,j,
     $bi,bj)*(0.5-sign(0.5d0,heff(i,j,2,bi,bj)*1.d+4-area(i,j,2,bi,bj)))
              adar(i,j,bi,bj) = 0.d0
              adseaice_salt(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adimpldiff( bi, bj, imin, imax, jmin, jmax, deltatx, 
     $kapparx, recip_hfac, gxnm1, adkapparx, adgxnm1 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adgxnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkapparx(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      double precision deltatx
      double precision gxnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer imax
      integer imin
      integer jmax
      integer jmin
      double precision kapparx(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision recip_hfac(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)

C==============================================
C declare local variables
C==============================================
      double precision a(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision ada(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adb(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adbet(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adc(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adgam(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adgynm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision b(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision bet(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision c(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision gam(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision gynm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer k

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            ada(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adb(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adbet(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adc(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adgam(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgynm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          a(i,j,1) = 0.d0
        end do
      end do
      do k = 2, nr
        do j = jmin, jmax
          do i = imin, imax
            a(i,j,k) = -(deltatx*recip_hfac(i,j,k,bi,bj)*recip_drf(k)*
     $kapparx(i,j,k)*recip_drc(k))
          end do
        end do
      end do
      do k = 1, nr-1
        do j = jmin, jmax
          do i = imin, imax
            c(i,j,k) = -(deltatx*recip_hfac(i,j,k,bi,bj)*recip_drf(k)*
     $kapparx(i,j,k+1)*recip_drc(k+1))
            if (recip_hfac(i,j,k+1,bi,bj) .eq. 0.) then
              c(i,j,k) = 0.
            endif
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          c(i,j,nr) = 0.d0
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            b(i,j,k) = 1.d0-c(i,j,k)-a(i,j,k)
          end do
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            bet(i,j,k) = 0.d0
            gam(i,j,k) = 0.d0
          end do
        end do
      end do
      if (nr .gt. 1) then
        do j = jmin, jmax
          do i = imin, imax
            if (b(i,j,1) .ne. 0.) then
              bet(i,j,1) = 1.d0/b(i,j,1)
            endif
          end do
        end do
      endif
      if (nr .gt. 2) then
        do k = 2, nr
          do j = jmin, jmax
            do i = imin, imax
              gam(i,j,k) = c(i,j,k-1)*bet(i,j,k-1)
              if (b(i,j,k)-a(i,j,k)*gam(i,j,k) .ne. 0.) then
                bet(i,j,k) = 1.d0/(b(i,j,k)-a(i,j,k)*gam(i,j,k))
              endif
            end do
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          gynm1(i,j,1,bi,bj) = gxnm1(i,j,1,bi,bj)*bet(i,j,1)
        end do
      end do
      do k = 2, nr
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = bet(i,j,k)*(gxnm1(i,j,k,bi,bj)-a(i,j,k)
     $*gynm1(i,j,k-1,bi,bj))
          end do
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            adgynm1(i,j,k,bi,bj) = adgynm1(i,j,k,bi,bj)+adgxnm1(i,j,k,
     $bi,bj)
            adgxnm1(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do
      do k = nr-1, 2, -1
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = gynm1(i,j,k,bi,bj)-gam(i,j,k+1)*
     $gynm1(i,j,k+1,bi,bj)
          end do
        end do
      end do
      do k = 1, nr-1
        do j = jmin, jmax
          do i = imin, imax
            adgam(i,j,k+1) = adgam(i,j,k+1)-adgynm1(i,j,k,bi,bj)*
     $gynm1(i,j,k+1,bi,bj)
            adgynm1(i,j,k+1,bi,bj) = adgynm1(i,j,k+1,bi,bj)-adgynm1(i,j,
     $k,bi,bj)*gam(i,j,k+1)
          end do
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          gynm1(i,j,1,bi,bj) = gxnm1(i,j,1,bi,bj)*bet(i,j,1)
        end do
      end do
      do k = 2, nr-1
        do j = jmin, jmax
          do i = imin, imax
            gynm1(i,j,k,bi,bj) = bet(i,j,k)*(gxnm1(i,j,k,bi,bj)-a(i,j,k)
     $*gynm1(i,j,k-1,bi,bj))
          end do
        end do
      end do
      do k = nr, 2, -1
        do j = jmin, jmax
          do i = imin, imax
            ada(i,j,k) = ada(i,j,k)-adgynm1(i,j,k,bi,bj)*bet(i,j,k)*
     $gynm1(i,j,k-1,bi,bj)
            adbet(i,j,k) = adbet(i,j,k)+adgynm1(i,j,k,bi,bj)*(gxnm1(i,j,
     $k,bi,bj)-a(i,j,k)*gynm1(i,j,k-1,bi,bj))
            adgxnm1(i,j,k,bi,bj) = adgxnm1(i,j,k,bi,bj)+adgynm1(i,j,k,
     $bi,bj)*bet(i,j,k)
            adgynm1(i,j,k-1,bi,bj) = adgynm1(i,j,k-1,bi,bj)-adgynm1(i,j,
     $k,bi,bj)*bet(i,j,k)*a(i,j,k)
            adgynm1(i,j,k,bi,bj) = 0.d0
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adbet(i,j,1) = adbet(i,j,1)+adgynm1(i,j,1,bi,bj)*gxnm1(i,j,1,
     $bi,bj)
          adgxnm1(i,j,1,bi,bj) = adgxnm1(i,j,1,bi,bj)+adgynm1(i,j,1,bi,
     $bj)*bet(i,j,1)
          adgynm1(i,j,1,bi,bj) = 0.d0
        end do
      end do
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            bet(i,j,k) = 0.d0
          end do
        end do
      end do
      if (nr .gt. 1) then
        do j = jmin, jmax
          do i = imin, imax
            if (b(i,j,1) .ne. 0.) then
              bet(i,j,1) = 1.d0/b(i,j,1)
            endif
          end do
        end do
      endif
      if (nr .gt. 2) then
        do k = 2, nr-1
          do j = jmin, jmax
            do i = imin, imax
              gam(i,j,k) = c(i,j,k-1)*bet(i,j,k-1)
              if (b(i,j,k)-a(i,j,k)*gam(i,j,k) .ne. 0.) then
                bet(i,j,k) = 1.d0/(b(i,j,k)-a(i,j,k)*gam(i,j,k))
              endif
            end do
          end do
        end do
        do k = nr, 2, -1
          do j = jmin, jmax
            do i = imin, imax
              gam(i,j,k) = c(i,j,k-1)*bet(i,j,k-1)
              if (b(i,j,k)-a(i,j,k)*gam(i,j,k) .ne. 0.) then
                ada(i,j,k) = ada(i,j,k)+adbet(i,j,k)*(1.d0*gam(i,j,k)/
     $((b(i,j,k)-a(i,j,k)*gam(i,j,k))*(b(i,j,k)-a(i,j,k)*gam(i,j,k))))
                adb(i,j,k) = adb(i,j,k)-adbet(i,j,k)/((b(i,j,k)-a(i,j,k)
     $*gam(i,j,k))*(b(i,j,k)-a(i,j,k)*gam(i,j,k)))
                adgam(i,j,k) = adgam(i,j,k)+adbet(i,j,k)*(1.d0*a(i,j,k)/
     $((b(i,j,k)-a(i,j,k)*gam(i,j,k))*(b(i,j,k)-a(i,j,k)*gam(i,j,k))))
                adbet(i,j,k) = 0.d0
              endif
              adbet(i,j,k-1) = adbet(i,j,k-1)+adgam(i,j,k)*c(i,j,k-1)
              adc(i,j,k-1) = adc(i,j,k-1)+adgam(i,j,k)*bet(i,j,k-1)
              adgam(i,j,k) = 0.d0
            end do
          end do
        end do
      endif
      if (nr .gt. 1) then
        do j = jmin, jmax
          do i = imin, imax
            if (b(i,j,1) .ne. 0.) then
              adb(i,j,1) = adb(i,j,1)-adbet(i,j,1)/(b(i,j,1)*b(i,j,1))
              adbet(i,j,1) = 0.d0
            endif
          end do
        end do
      endif
      do k = 1, nr
        do j = jmin, jmax
          do i = imin, imax
            ada(i,j,k) = ada(i,j,k)-adb(i,j,k)
            adc(i,j,k) = adc(i,j,k)-adb(i,j,k)
            adb(i,j,k) = 0.d0
          end do
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adc(i,j,nr) = 0.d0
        end do
      end do
      do k = 1, nr-1
        do j = jmin, jmax
          do i = imin, imax
            if (recip_hfac(i,j,k+1,bi,bj) .eq. 0.) then
              adc(i,j,k) = 0.d0
            endif
            adkapparx(i,j,k+1) = adkapparx(i,j,k+1)-adc(i,j,k)*deltatx*
     $recip_hfac(i,j,k,bi,bj)*recip_drf(k)*recip_drc(k+1)
            adc(i,j,k) = 0.d0
          end do
        end do
      end do
      do k = 2, nr
        do j = jmin, jmax
          do i = imin, imax
            adkapparx(i,j,k) = adkapparx(i,j,k)-ada(i,j,k)*deltatx*
     $recip_hfac(i,j,k,bi,bj)*recip_drf(k)*recip_drc(k)
            ada(i,j,k) = 0.d0
          end do
        end do
      end do

      end


      subroutine adini_autodiff
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adhdivflow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexact_eta_local/ adhdivflow

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adhdivflow(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adini_dynvars
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgucd(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgvcd(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adunm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                aduveld(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advveld(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetah(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgsnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgtnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgu(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgunm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgv(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgvnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do

      end


      subroutine adini_fields
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (starttime .eq. 0. .and. niter0 .eq. 0) then
        call adini_psurf
        call adini_salt
        call adini_theta
        call adini_vel
      endif

      end


      subroutine adini_psurf
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetanm1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetan(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adini_salt
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adsalt(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do

      end


      subroutine adini_theta
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtheta(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do

      end


      subroutine adini_vel
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                aduvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adwvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do

      end


      subroutine adinitialise_varia( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      niter0 = int(starttime/deltatclock)
      call barrier( mythid )
      call barrier( mythid )
      call ini_fields( mythid )
      call barrier( mythid )
      call barrier( mythid )
      if (starttime .eq. 0.) then
        call barrier( mythid )
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call adconvective_adjustment_ini( bi,bj,imin,imax,jmin,jmax,
     $starttime,mythid )
          end do
        end do
      endif
      call ini_fields( mythid )
      call barrier( mythid )
      call barrier( mythid )
      call adpackages_init_variables( mythid )
      call barrier( mythid )
      call adini_autodiff
      call barrier( mythid )
      niter0 = int(starttime/deltatclock)
      call barrier( mythid )
      call barrier( mythid )
      call adini_fields
      call adini_dynvars
      call barrier( mythid )
      call barrier( mythid )

      end


      subroutine mdinitialise_varia( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin

C**********************************************
C executable statements of routine
C**********************************************
      niter0 = int(starttime/deltatclock)
      call ini_linear_phisurf( mythid )
      call ini_cori( mythid )
      call ini_cg2d( mythid )
      call barrier( mythid )
      call barrier( mythid )
      call ini_dynvars( mythid )
      call ini_fields( mythid )
      call barrier( mythid )
      call ini_autodiff( mythid )
      call barrier( mythid )
      call packages_init_variables( mythid )
      if (starttime .eq. 0.) then
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call mdconvective_adjustment_ini( bi,bj,imin,imax,jmin,jmax,
     $starttime,niter0,mythid )
          end do
        end do
        call barrier( mythid )
      endif
      end


      subroutine adintegrate_for_w( bi, bj, k, adufld, advfld, adwfld )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (rigidlid) then
        if (k .eq. 1) then
          do j = 1-oly, sny+oly-1
            do i = 1-olx, snx+olx-1
              adwfld(i,j,k,bi,bj) = 0.d0
            end do
          end do
        else if (k .eq. nr) then
          do j = 1-oly, sny+oly-1
            do i = 1-olx, snx+olx-1
              adutrans(i+1,j) = adutrans(i+1,j)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              adutrans(i,j) = adutrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              advtrans(i,j+1) = advtrans(i,j+1)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              advtrans(i,j) = advtrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              adwfld(i,j,k,bi,bj) = 0.d0
            end do
          end do
        else
          do j = 1-oly, sny+oly-1
            do i = 1-olx, snx+olx-1
              adutrans(i+1,j) = adutrans(i+1,j)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              adutrans(i,j) = adutrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              advtrans(i,j+1) = advtrans(i,j+1)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              advtrans(i,j) = advtrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              adwfld(i,j,k+1,bi,bj) = adwfld(i,j,k+1,bi,bj)+adwfld(i,j,
     $k,bi,bj)*maskc(i,j,k,bi,bj)*maskc(i,j,k-1,bi,bj)
              adwfld(i,j,k,bi,bj) = 0.d0
            end do
          end do
        endif
      else
        if (k .eq. nr) then
          do j = 1-oly, sny+oly-1
            do i = 1-olx, snx+olx-1
              adutrans(i+1,j) = adutrans(i+1,j)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              adutrans(i,j) = adutrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              advtrans(i,j+1) = advtrans(i,j+1)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              advtrans(i,j) = advtrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              adwfld(i,j,k,bi,bj) = 0.d0
            end do
          end do
        else
          do j = 1-oly, sny+oly-1
            do i = 1-olx, snx+olx-1
              adutrans(i+1,j) = adutrans(i+1,j)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              adutrans(i,j) = adutrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              advtrans(i,j+1) = advtrans(i,j+1)-adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              advtrans(i,j) = advtrans(i,j)+adwfld(i,j,k,bi,bj)*
     $recip_ra(i,j,bi,bj)*maskc(i,j,k,bi,bj)
              adwfld(i,j,k+1,bi,bj) = adwfld(i,j,k+1,bi,bj)+adwfld(i,j,
     $k,bi,bj)*maskc(i,j,k,bi,bj)
              adwfld(i,j,k,bi,bj) = 0.d0
            end do
          end do
        endif
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+advtrans(i,j)*dxg(i,
     $j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
          advtrans(i,j) = 0.d0
          adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+adutrans(i,j)*dyg(i,
     $j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
          adutrans(i,j) = 0.d0
        end do
      end do

      end


      subroutine adkpp_calc( bi, bj, mytime )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer imax
      parameter ( imax = snx+3 )
      integer imin
      parameter ( imin = -2 )
      integer itop
      parameter ( itop = snx+olx )
      integer oly
      parameter ( oly = 4 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 16 )
      integer jmax
      parameter ( jmax = sny+3 )
      integer jmin
      parameter ( jmin = -2 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer mdiff
      parameter ( mdiff = 3 )
      double precision minusone
      parameter ( minusone = -1. )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nrm1
      parameter ( nrm1 = nr-1 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )
      double precision p0
      parameter ( p0 = 0. )
      double precision p125
      parameter ( p125 = 0.125 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl

      double precision adkppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adkpp_short/ adkppfrac

      double precision adsurfacetendencytice(1-olx:snx+olx,1-oly:sny+
     $oly,nsx,nsy)
      common /adseaice_external/ adsurfacetendencytice

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision comlev1_kpp_kpphbl_4h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),nsx,nsy,24)
      common /cadkpphbl/ comlev1_kpp_kpphbl_4h

      double precision comlev1_kpp_ustar_3h(1+itop-ibot,1+jtop-jbot,24)
      common /cadustar/ comlev1_kpp_ustar_3h

      double precision comlev1_kpp_work2_1h(1+itop-ibot,1+jtop-jbot,24)
      common /cadwork2/ comlev1_kpp_work2_1h

      double precision comlev1_kpp_work3_2h(1+itop-ibot,1+jtop-jbot,24)
      common /cadwork3/ comlev1_kpp_work3_2h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision dqdt(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /ffields/ fu, fv, qnet, qsw, dqdt, empmr, sst, sss

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      integer nzmax(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /kpp_i/ nzmax

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

      double precision kpp_dumpfreq
      double precision kpp_freq
      double precision kpp_tavefreq
      common /kpp_r2/ kpp_freq, kpp_dumpfreq, kpp_tavefreq

      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp
      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision surfacetendencytice(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /seaice_external/ surfacetendencytice

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      double precision mytime

C==============================================
C declare local variables
C==============================================
      double precision adbo(ibot:itop,jbot:jtop)
      double precision adbosol(ibot:itop,jbot:jtop)
      double precision addbloc(ibot:itop,jbot:jtop,nr)
      double precision addvsq(ibot:itop,jbot:jtop,nr)
      double precision adghat(ibot:itop,jbot:jtop,nr)
      double precision adhbl(ibot:itop,jbot:jtop)
      double precision adritop(ibot:itop,jbot:jtop,nr)
      double precision adshsq(ibot:itop,jbot:jtop,nr)
      double precision adtempvar2
      double precision adustar(ibot:itop,jbot:jtop)
      double precision advddiff(ibot:itop,jbot:jtop,0:nrp1,mdiff)
      double precision adwork2(ibot:itop,jbot:jtop)
      double precision adwork3(ibot:itop,jbot:jtop)
      double precision adworka(1-olx:snx+olx,1-oly:sny+oly)
      double precision bo(ibot:itop,jbot:jtop)
      double precision bosol(ibot:itop,jbot:jtop)
      double precision dbloc(ibot:itop,jbot:jtop,nr)
      double precision dvsq(ibot:itop,jbot:jtop,nr)
      integer help_h
      integer help_i
      integer i
      integer im1
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer jm1
      integer jp1
      integer k
      integer kp1
      integer mythid
      double precision ritop(ibot:itop,jbot:jtop,nr)
      double precision shsq(ibot:itop,jbot:jtop,nr)
      double precision tempvar2
      double precision ustar(ibot:itop,jbot:jtop)
      double precision vddiff(ibot:itop,jbot:jtop,0:nrp1,mdiff)
      integer work1(ibot:itop,jbot:jtop)
      double precision work2(ibot:itop,jbot:jtop)
      double precision work3(ibot:itop,jbot:jtop)
      double precision worka(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adbo(ip2,ip3) = 0.d0
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adbosol(ip2,ip3) = 0.d0
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            addbloc(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            addvsq(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            adghat(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adhbl(ip2,ip3) = 0.d0
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            adritop(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      do ip4 = 1, nr
        do ip3 = jbot, jtop
          do ip2 = ibot, itop
            adshsq(ip2,ip3,ip4) = 0.d0
          end do
        end do
      end do
      adtempvar2 = 0.d0
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adustar(ip2,ip3) = 0.d0
        end do
      end do
      do ip5 = 1, mdiff
        do ip4 = 0, nrp1
          do ip3 = jbot, jtop
            do ip2 = ibot, itop
              advddiff(ip2,ip3,ip4,ip5) = 0.d0
            end do
          end do
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adwork2(ip2,ip3) = 0.d0
        end do
      end do
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adwork3(ip2,ip3) = 0.d0
        end do
      end do
      do ip3 = 1-oly, sny+oly
        do ip2 = 1-olx, snx+olx
          adworka(ip2,ip3) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (different_multiple(kpp_freq,mytime,mytime-deltatclock) .or. 
     $mytime .eq. starttime) then
        call statekpp( bi,bj,mythid,work2,dbloc,ritop,vddiff(ibot,jbot,
     $1,1),vddiff(ibot,jbot,1,2) )
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              dbloc(i,j,k) = dbloc(i,j,k)*pmask(i,j,k,bi,bj)
              ritop(i,j,k) = ritop(i,j,k)*pmask(i,j,k,bi,bj)
              if (k .eq. nzmax(i,j,bi,bj)) then
                dbloc(i,j,k) = p0
                ritop(i,j,k) = p0
              endif
              ritop(i,j,k) = (zgrid(1)-zgrid(k))*ritop(i,j,k)
            end do
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            work2(ip2-1+ibot,ip3-1+jbot) = comlev1_kpp_work2_1h(ip2,ip3,
     $ikey)
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            bo(i,j) = p0
            bosol(i,j) = p0
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            work3(ip2-1+ibot,ip3-1+jbot) = comlev1_kpp_work3_2h(ip2,ip3,
     $ikey)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            if ( .not. useseaice) then
              bo(i,j) = -(gravity*(vddiff(i,j,1,1)*surfacetendencyt(i,j,
     $bi,bj)+vddiff(i,j,1,2)*surfacetendencys(i,j,bi,bj))*drf(1)/
     $work2(i,j))
            endif
            if (useseaice) then
              bo(i,j) = -(gravity*(vddiff(i,j,1,1)*(surfacetendencyt(i,
     $j,bi,bj)+surfacetendencytice(i,j,bi,bj))+vddiff(i,j,1,2)*
     $surfacetendencys(i,j,bi,bj))*drf(1)/work2(i,j))
            endif
            bosol(i,j) = gravity*vddiff(i,j,1,1)*qsw(i,j,bi,bj)*
     $recip_cp*recip_rhonil*recip_drf(1)*drf(1)/work2(i,j)
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            ustar(ip2-1+ibot,ip3-1+jbot) = comlev1_kpp_ustar_3h(ip2,ip3,
     $ikey)
          end do
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              shsq(i,j,k) = p0
              dvsq(i,j,k) = p0
            end do
          end do
        end do
        do k = 1, nr
          do j = jmin, jmax
            jp1 = j+1
            do i = imin, imax
              ip1 = i+1
              dvsq(i,j,k) = p5*((uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))*
     $(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))+(uvel(ip1,j,1,bi,bj)-
     $uvel(ip1,j,k,bi,bj))*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))+
     $(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))*(vvel(i,j,1,bi,bj)-vvel(i,j,
     $k,bi,bj))+(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))*(vvel(i,jp1,1,
     $bi,bj)-vvel(i,jp1,k,bi,bj)))
            end do
          end do
        end do
        do k = 1, nrm1
          kp1 = k+1
          do j = jmin, jmax
            jm1 = j-1
            jp1 = j+1
            do i = imin, imax
              im1 = i-1
              ip1 = i+1
              shsq(i,j,k) = p5*((uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))*
     $(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))+(uvel(ip1,j,k,bi,bj)-
     $uvel(ip1,j,kp1,bi,bj))*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
     $+(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))*(vvel(i,j,k,bi,bj)-
     $vvel(i,j,kp1,bi,bj))+(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))*
     $(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj)))
              shsq(i,j,k) = p5*shsq(i,j,k)+p125*((uvel(i,jm1,k,bi,bj)-
     $uvel(i,jm1,kp1,bi,bj))*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
     $+(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))*(uvel(ip1,jm1,k,
     $bi,bj)-uvel(ip1,jm1,kp1,bi,bj))+(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,
     $kp1,bi,bj))*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))+(uvel(ip1,
     $jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))*(uvel(ip1,jp1,k,bi,bj)-
     $uvel(ip1,jp1,kp1,bi,bj))+(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,
     $bj))*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))+(vvel(im1,jp1,k,
     $bi,bj)-vvel(im1,jp1,kp1,bi,bj))*(vvel(im1,jp1,k,bi,bj)-vvel(im1,
     $jp1,kp1,bi,bj))+(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))*
     $(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))+(vvel(ip1,jp1,k,bi,bj)
     $-vvel(ip1,jp1,kp1,bi,bj))*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,
     $bi,bj)))
            end do
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            work1(i,j) = nzmax(i,j,bi,bj)
            work2(i,j) = fcori(i,j,bi,bj)
          end do
        end do
        do ip5 = 1, nsy
          do ip4 = 1, nsx
            do ip3 = 1, 1+sny+oly-(1-oly)
              do ip2 = 1, 1+snx+olx-(1-olx)
                kpphbl(ip2-1+1-olx,ip3-1+1-oly,ip4,ip5) = 
     $comlev1_kpp_kpphbl_4h(ip2,ip3,ip4,ip5,ikey)
              end do
            end do
          end do
        end do
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            worka(i,j) = kpphbl(i,j,bi,bj)
          end do
        end do
        help_i = (snx+2*olx)*(sny+2*oly)
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adworka(i,j) = adworka(i,j)+adkppfrac(i,j,bi,bj)
            adkppfrac(i,j,bi,bj) = 0.d0
          end do
        end do
        call adswfrac( help_i,minusone,mytime,worka,adworka )
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adkpphbl(i,j,bi,bj) = adkpphbl(i,j,bi,bj)+adworka(i,j)
            adworka(i,j) = 0.d0
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            adhbl(i,j) = adhbl(i,j)+adkpphbl(i,j,bi,bj)*pmask(i,j,1,bi,
     $bj)
            adkpphbl(i,j,bi,bj) = 0.d0
            do k = 1, nr
              adghat(i,j,k) = adghat(i,j,k)+adkppghat(i,j,k,bi,bj)*
     $pmask(i,j,k,bi,bj)
              adkppghat(i,j,k,bi,bj) = 0.d0
              advddiff(i,j,k-1,3) = advddiff(i,j,k-1,3)+adkppdiffkzt(i,
     $j,k,bi,bj)*pmask(i,j,k,bi,bj)
              adkppdiffkzt(i,j,k,bi,bj) = 0.d0
              advddiff(i,j,k-1,2) = advddiff(i,j,k-1,2)+adkppdiffkzs(i,
     $j,k,bi,bj)*pmask(i,j,k,bi,bj)
              adkppdiffkzs(i,j,k,bi,bj) = 0.d0
              advddiff(i,j,k-1,1) = advddiff(i,j,k-1,1)+adkppviscaz(i,j,
     $k,bi,bj)*pmask(i,j,k,bi,bj)
              adkppviscaz(i,j,k,bi,bj) = 0.d0
            end do
          end do
        end do
        call adkppmix( mytime,work1,shsq,dvsq,ustar,bo,bosol,dbloc,
     $ritop,work2,ikey,adshsq,addvsq,adustar,adbo,adbosol,addbloc,
     $adritop,adwork2,advddiff,adghat,adhbl )
        do j = jbot, jtop
          do i = ibot, itop
            adwork2(i,j) = 0.d0
          end do
        end do
        do k = 1, nrm1
          kp1 = k+1
          do j = jmin, jmax
            jm1 = j-1
            jp1 = j+1
            do i = imin, imax
              im1 = i-1
              ip1 = i+1
              aduvel(i,jm1,k,bi,bj) = aduvel(i,jm1,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
              aduvel(ip1,jm1,k,bi,bj) = aduvel(ip1,jm1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))
              aduvel(i,jm1,kp1,bi,bj) = aduvel(i,jm1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
              aduvel(ip1,jm1,kp1,bi,bj) = aduvel(ip1,jm1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))
              aduvel(i,jp1,k,bi,bj) = aduvel(i,jp1,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))
              aduvel(ip1,jp1,k,bi,bj) = aduvel(ip1,jp1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))
              aduvel(i,jp1,kp1,bi,bj) = aduvel(i,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))
              aduvel(ip1,jp1,kp1,bi,bj) = aduvel(ip1,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(uvel(ip1,jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))
              advvel(im1,j,k,bi,bj) = advvel(im1,j,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))
              advvel(ip1,j,k,bi,bj) = advvel(ip1,j,k,bi,bj)+2*adshsq(i,
     $j,k)*p125*(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))
              advvel(im1,j,kp1,bi,bj) = advvel(im1,j,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))
              advvel(ip1,j,kp1,bi,bj) = advvel(ip1,j,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))
              advvel(im1,jp1,k,bi,bj) = advvel(im1,jp1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(vvel(im1,jp1,k,bi,bj)-vvel(im1,jp1,kp1,bi,bj))
              advvel(ip1,jp1,k,bi,bj) = advvel(ip1,jp1,k,bi,bj)+2*
     $adshsq(i,j,k)*p125*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,bi,bj))
              advvel(im1,jp1,kp1,bi,bj) = advvel(im1,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(im1,jp1,k,bi,bj)-vvel(im1,jp1,kp1,bi,bj))
              advvel(ip1,jp1,kp1,bi,bj) = advvel(ip1,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p125*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,bi,bj))
              adshsq(i,j,k) = adshsq(i,j,k)*p5
              aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+2*adshsq(i,j,k)*
     $p5*(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))
              aduvel(ip1,j,k,bi,bj) = aduvel(ip1,j,k,bi,bj)+2*adshsq(i,
     $j,k)*p5*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
              aduvel(i,j,kp1,bi,bj) = aduvel(i,j,kp1,bi,bj)-2*adshsq(i,
     $j,k)*p5*(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))
              aduvel(ip1,j,kp1,bi,bj) = aduvel(ip1,j,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p5*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
              advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+2*adshsq(i,j,k)*
     $p5*(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))
              advvel(i,j,kp1,bi,bj) = advvel(i,j,kp1,bi,bj)-2*adshsq(i,
     $j,k)*p5*(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))
              advvel(i,jp1,k,bi,bj) = advvel(i,jp1,k,bi,bj)+2*adshsq(i,
     $j,k)*p5*(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))
              advvel(i,jp1,kp1,bi,bj) = advvel(i,jp1,kp1,bi,bj)-2*
     $adshsq(i,j,k)*p5*(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))
              adshsq(i,j,k) = 0.d0
            end do
          end do
        end do
        do k = 1, nr
          do j = jmin, jmax
            jp1 = j+1
            do i = imin, imax
              ip1 = i+1
              aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-2*addvsq(i,j,k)*
     $p5*(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))
              aduvel(ip1,j,k,bi,bj) = aduvel(ip1,j,k,bi,bj)-2*addvsq(i,
     $j,k)*p5*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))
              aduvel(i,j,1,bi,bj) = aduvel(i,j,1,bi,bj)+2*addvsq(i,j,k)*
     $p5*(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))
              aduvel(ip1,j,1,bi,bj) = aduvel(ip1,j,1,bi,bj)+2*addvsq(i,
     $j,k)*p5*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))
              advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)-2*addvsq(i,j,k)*
     $p5*(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))
              advvel(i,j,1,bi,bj) = advvel(i,j,1,bi,bj)+2*addvsq(i,j,k)*
     $p5*(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))
              advvel(i,jp1,k,bi,bj) = advvel(i,jp1,k,bi,bj)-2*addvsq(i,
     $j,k)*p5*(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))
              advvel(i,jp1,1,bi,bj) = advvel(i,jp1,1,bi,bj)+2*addvsq(i,
     $j,k)*p5*(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))
              addvsq(i,j,k) = 0.d0
            end do
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            work2(ip2-1+ibot,ip3-1+jbot) = comlev1_kpp_work2_1h(ip2,ip3,
     $ikey)
          end do
        end do
        do j = jmin, jmax
          adtempvar2 = 0.d0
          do i = imin, imax
            adtempvar2 = 0.d0
            adqsw(i,j,bi,bj) = adqsw(i,j,bi,bj)+adbosol(i,j)*(gravity*
     $vddiff(i,j,1,1)*recip_cp*recip_rhonil*recip_drf(1)*drf(1)/work2(i,
     $j))
            advddiff(i,j,1,1) = advddiff(i,j,1,1)+adbosol(i,j)*(gravity*
     $qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*drf(1)/work2(i,
     $j))
            adwork2(i,j) = adwork2(i,j)-adbosol(i,j)*(gravity*vddiff(i,
     $j,1,1)*qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*drf(1)/
     $(work2(i,j)*work2(i,j)))
            adbosol(i,j) = 0.d0
            if (useseaice) then
              adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,
     $bj)-adbo(i,j)*(gravity*vddiff(i,j,1,2)*drf(1)/work2(i,j))
              adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)-adbo(i,j)*(gravity*vddiff(i,j,1,1)*drf(1)/work2(i,j))
              adsurfacetendencytice(i,j,bi,bj) = 
     $adsurfacetendencytice(i,j,bi,bj)-adbo(i,j)*(gravity*vddiff(i,j,1,
     $1)*drf(1)/work2(i,j))
              advddiff(i,j,1,2) = advddiff(i,j,1,2)-adbo(i,j)*(gravity*
     $surfacetendencys(i,j,bi,bj)*drf(1)/work2(i,j))
              advddiff(i,j,1,1) = advddiff(i,j,1,1)-adbo(i,j)*(gravity*
     $(surfacetendencyt(i,j,bi,bj)+surfacetendencytice(i,j,bi,bj))*
     $drf(1)/work2(i,j))
              adwork2(i,j) = adwork2(i,j)+adbo(i,j)*(gravity*(vddiff(i,
     $j,1,1)*(surfacetendencyt(i,j,bi,bj)+surfacetendencytice(i,j,bi,bj)
     $)+vddiff(i,j,1,2)*surfacetendencys(i,j,bi,bj))*drf(1)/(work2(i,j)*
     $work2(i,j)))
              adbo(i,j) = 0.d0
            endif
            if ( .not. useseaice) then
              adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,
     $bj)-adbo(i,j)*(gravity*vddiff(i,j,1,2)*drf(1)/work2(i,j))
              adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)-adbo(i,j)*(gravity*vddiff(i,j,1,1)*drf(1)/work2(i,j))
              advddiff(i,j,1,2) = advddiff(i,j,1,2)-adbo(i,j)*(gravity*
     $surfacetendencys(i,j,bi,bj)*drf(1)/work2(i,j))
              advddiff(i,j,1,1) = advddiff(i,j,1,1)-adbo(i,j)*(gravity*
     $surfacetendencyt(i,j,bi,bj)*drf(1)/work2(i,j))
              adwork2(i,j) = adwork2(i,j)+adbo(i,j)*(gravity*(vddiff(i,
     $j,1,1)*surfacetendencyt(i,j,bi,bj)+vddiff(i,j,1,2)*
     $surfacetendencys(i,j,bi,bj))*drf(1)/(work2(i,j)*work2(i,j)))
              adbo(i,j) = 0.d0
            endif
            if (work3(i,j) .lt. phepsi*phepsi) then
              adustar(i,j) = 0.d0
            else
              tempvar2 = sqrt(work3(i,j))*p5*drf(1)
              adtempvar2 = adtempvar2+adustar(i,j)*(1./(2.*
     $sqrt(tempvar2)))
              adustar(i,j) = 0.d0
              adwork3(i,j) = adwork3(i,j)+adtempvar2*1./(2.*
     $sqrt(work3(i,j)))*p5*drf(1)
              adtempvar2 = 0.d0
            endif
          end do
        end do
        do j = jmin, jmax
          jp1 = j+1
          do i = imin, imax
            ip1 = i+1
            adsurfacetendencyu(i,j,bi,bj) = adsurfacetendencyu(i,j,bi,
     $bj)+adwork3(i,j)*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj)+surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))
            adsurfacetendencyu(ip1,j,bi,bj) = adsurfacetendencyu(ip1,j,
     $bi,bj)+adwork3(i,j)*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj)+surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))
            adsurfacetendencyv(i,j,bi,bj) = adsurfacetendencyv(i,j,bi,
     $bj)+adwork3(i,j)*(surfacetendencyv(i,j,bi,bj)+surfacetendencyv(i,
     $jp1,bi,bj)+surfacetendencyv(i,j,bi,bj)+surfacetendencyv(i,jp1,bi,
     $bj))
            adsurfacetendencyv(i,jp1,bi,bj) = adsurfacetendencyv(i,jp1,
     $bi,bj)+adwork3(i,j)*(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj)+surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))
            adwork3(i,j) = 0.d0
          end do
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              adritop(i,j,k) = adritop(i,j,k)*(zgrid(1)-zgrid(k))
              if (k .eq. nzmax(i,j,bi,bj)) then
                adritop(i,j,k) = 0.d0
                adghat(i,j,k) = 0.d0
                addbloc(i,j,k) = 0.d0
              endif
              adritop(i,j,k) = adritop(i,j,k)*pmask(i,j,k,bi,bj)
              adghat(i,j,k) = adghat(i,j,k)*pmask(i,j,k,bi,bj)
              addbloc(i,j,k) = addbloc(i,j,k)*pmask(i,j,k,bi,bj)
            end do
          end do
        end do
        do k = nr-1, 1, -1
          help_h = k+1
          call adkpp_smooth_horiz( help_h,bi,bj,adghat(ibot,jbot,k) )
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              addbloc(i,j,k) = addbloc(i,j,k)+adghat(i,j,k)
              adghat(i,j,k) = 0.d0
            end do
          end do
        end do
        call adstatekpp( bi,bj,adwork2,addbloc,adritop,advddiff(ibot,
     $jbot,1,1),advddiff(ibot,jbot,1,2) )
      endif

      end


      subroutine mdkpp_calc( bi, bj, mytime, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer imax
      parameter ( imax = snx+3 )
      integer imin
      parameter ( imin = -2 )
      integer itop
      parameter ( itop = snx+olx )
      integer oly
      parameter ( oly = 4 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 16 )
      integer jmax
      parameter ( jmax = sny+3 )
      integer jmin
      parameter ( jmin = -2 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer mdiff
      parameter ( mdiff = 3 )
      double precision minusone
      parameter ( minusone = -1. )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nrm1
      parameter ( nrm1 = nr-1 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )
      double precision p0
      parameter ( p0 = 0. )
      double precision p125
      parameter ( p125 = 0.125 )
      double precision p5
      parameter ( p5 = 0.5 )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_kpphbl_4h(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),nsx,nsy,24)
      common /cadkpphbl/ comlev1_kpp_kpphbl_4h

      double precision comlev1_kpp_ustar_3h(1+itop-ibot,1+jtop-jbot,24)
      common /cadustar/ comlev1_kpp_ustar_3h

      double precision comlev1_kpp_work2_1h(1+itop-ibot,1+jtop-jbot,24)
      common /cadwork2/ comlev1_kpp_work2_1h

      double precision comlev1_kpp_work3_2h(1+itop-ibot,1+jtop-jbot,24)
      common /cadwork3/ comlev1_kpp_work3_2h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision dqdt(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /ffields/ fu, fv, qnet, qsw, dqdt, empmr, sst, sss

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      integer nzmax(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /kpp_i/ nzmax

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

      double precision kpp_dumpfreq
      double precision kpp_freq
      double precision kpp_tavefreq
      common /kpp_r2/ kpp_freq, kpp_dumpfreq, kpp_tavefreq

      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /kpp_short/ kppfrac

      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp
      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision surfacetendencytice(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /seaice_external/ surfacetendencytice

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      double precision bo(ibot:itop,jbot:jtop)
      double precision bosol(ibot:itop,jbot:jtop)
      double precision dbloc(ibot:itop,jbot:jtop,nr)
      double precision dvsq(ibot:itop,jbot:jtop,nr)
      double precision ghat(ibot:itop,jbot:jtop,nr)
      double precision hbl(ibot:itop,jbot:jtop)
      integer help_h
      integer help_i
      integer i
      integer im1
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      integer j
      integer jm1
      integer jp1
      integer k
      integer kp1
      double precision ritop(ibot:itop,jbot:jtop,nr)
      double precision shsq(ibot:itop,jbot:jtop,nr)
      double precision tempvar2
      double precision ustar(ibot:itop,jbot:jtop)
      double precision vddiff(ibot:itop,jbot:jtop,0:nrp1,mdiff)
      integer work1(ibot:itop,jbot:jtop)
      double precision work2(ibot:itop,jbot:jtop)
      double precision work3(ibot:itop,jbot:jtop)
      double precision worka(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C**********************************************
C executable statements of routine
C**********************************************
      if (different_multiple(kpp_freq,mytime,mytime-deltatclock) .or. 
     $mytime .eq. starttime) then
        call statekpp( bi,bj,mythid,work2,dbloc,ritop,vddiff(ibot,jbot,
     $1,1),vddiff(ibot,jbot,1,2) )
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              ghat(i,j,k) = dbloc(i,j,k)
            end do
          end do
        end do
        do k = 1, nr-1
          help_h = k+1
          call kpp_smooth_horiz( help_h,bi,bj,ghat(ibot,jbot,k) )
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              dbloc(i,j,k) = dbloc(i,j,k)*pmask(i,j,k,bi,bj)
              ghat(i,j,k) = ghat(i,j,k)*pmask(i,j,k,bi,bj)
              ritop(i,j,k) = ritop(i,j,k)*pmask(i,j,k,bi,bj)
              if (k .eq. nzmax(i,j,bi,bj)) then
                dbloc(i,j,k) = p0
                ghat(i,j,k) = p0
                ritop(i,j,k) = p0
              endif
              ritop(i,j,k) = (zgrid(1)-zgrid(k))*ritop(i,j,k)
            end do
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            comlev1_kpp_work2_1h(ip2,ip3,ikey) = work2(ip2-1+ibot,ip3-1+
     $jbot)
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            ustar(i,j) = p0
            bo(i,j) = p0
            bosol(i,j) = p0
          end do
        end do
        do j = jmin, jmax
          jp1 = j+1
          do i = imin, imax
            ip1 = i+1
            work3(i,j) = (surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))*(surfacetendencyu(i,j,bi,bj)+
     $surfacetendencyu(ip1,j,bi,bj))+(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))*(surfacetendencyv(i,j,bi,bj)+
     $surfacetendencyv(i,jp1,bi,bj))
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            comlev1_kpp_work3_2h(ip2,ip3,ikey) = work3(ip2-1+ibot,ip3-1+
     $jbot)
          end do
        end do
        do j = jmin, jmax
          do i = imin, imax
            if (work3(i,j) .lt. phepsi*phepsi) then
              ustar(i,j) = sqrt(phepsi*p5*drf(1))
            else
              tempvar2 = sqrt(work3(i,j))*p5*drf(1)
              ustar(i,j) = sqrt(tempvar2)
            endif
            if ( .not. useseaice) then
              bo(i,j) = -(gravity*(vddiff(i,j,1,1)*surfacetendencyt(i,j,
     $bi,bj)+vddiff(i,j,1,2)*surfacetendencys(i,j,bi,bj))*drf(1)/
     $work2(i,j))
            endif
            if (useseaice) then
              bo(i,j) = -(gravity*(vddiff(i,j,1,1)*(surfacetendencyt(i,
     $j,bi,bj)+surfacetendencytice(i,j,bi,bj))+vddiff(i,j,1,2)*
     $surfacetendencys(i,j,bi,bj))*drf(1)/work2(i,j))
            endif
            bosol(i,j) = gravity*vddiff(i,j,1,1)*qsw(i,j,bi,bj)*
     $recip_cp*recip_rhonil*recip_drf(1)*drf(1)/work2(i,j)
          end do
        end do
        do ip3 = 1, 1+jtop-jbot
          do ip2 = 1, 1+itop-ibot
            comlev1_kpp_ustar_3h(ip2,ip3,ikey) = ustar(ip2-1+ibot,ip3-1+
     $jbot)
          end do
        end do
        do k = 1, nr
          do j = jbot, jtop
            do i = ibot, itop
              shsq(i,j,k) = p0
              dvsq(i,j,k) = p0
            end do
          end do
        end do
        do k = 1, nr
          do j = jmin, jmax
            jp1 = j+1
            do i = imin, imax
              ip1 = i+1
              dvsq(i,j,k) = p5*((uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))*
     $(uvel(i,j,1,bi,bj)-uvel(i,j,k,bi,bj))+(uvel(ip1,j,1,bi,bj)-
     $uvel(ip1,j,k,bi,bj))*(uvel(ip1,j,1,bi,bj)-uvel(ip1,j,k,bi,bj))+
     $(vvel(i,j,1,bi,bj)-vvel(i,j,k,bi,bj))*(vvel(i,j,1,bi,bj)-vvel(i,j,
     $k,bi,bj))+(vvel(i,jp1,1,bi,bj)-vvel(i,jp1,k,bi,bj))*(vvel(i,jp1,1,
     $bi,bj)-vvel(i,jp1,k,bi,bj)))
            end do
          end do
        end do
        do k = 1, nrm1
          kp1 = k+1
          do j = jmin, jmax
            jm1 = j-1
            jp1 = j+1
            do i = imin, imax
              im1 = i-1
              ip1 = i+1
              shsq(i,j,k) = p5*((uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))*
     $(uvel(i,j,k,bi,bj)-uvel(i,j,kp1,bi,bj))+(uvel(ip1,j,k,bi,bj)-
     $uvel(ip1,j,kp1,bi,bj))*(uvel(ip1,j,k,bi,bj)-uvel(ip1,j,kp1,bi,bj))
     $+(vvel(i,j,k,bi,bj)-vvel(i,j,kp1,bi,bj))*(vvel(i,j,k,bi,bj)-
     $vvel(i,j,kp1,bi,bj))+(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj))*
     $(vvel(i,jp1,k,bi,bj)-vvel(i,jp1,kp1,bi,bj)))
              shsq(i,j,k) = p5*shsq(i,j,k)+p125*((uvel(i,jm1,k,bi,bj)-
     $uvel(i,jm1,kp1,bi,bj))*(uvel(i,jm1,k,bi,bj)-uvel(i,jm1,kp1,bi,bj))
     $+(uvel(ip1,jm1,k,bi,bj)-uvel(ip1,jm1,kp1,bi,bj))*(uvel(ip1,jm1,k,
     $bi,bj)-uvel(ip1,jm1,kp1,bi,bj))+(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,
     $kp1,bi,bj))*(uvel(i,jp1,k,bi,bj)-uvel(i,jp1,kp1,bi,bj))+(uvel(ip1,
     $jp1,k,bi,bj)-uvel(ip1,jp1,kp1,bi,bj))*(uvel(ip1,jp1,k,bi,bj)-
     $uvel(ip1,jp1,kp1,bi,bj))+(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,
     $bj))*(vvel(im1,j,k,bi,bj)-vvel(im1,j,kp1,bi,bj))+(vvel(im1,jp1,k,
     $bi,bj)-vvel(im1,jp1,kp1,bi,bj))*(vvel(im1,jp1,k,bi,bj)-vvel(im1,
     $jp1,kp1,bi,bj))+(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))*
     $(vvel(ip1,j,k,bi,bj)-vvel(ip1,j,kp1,bi,bj))+(vvel(ip1,jp1,k,bi,bj)
     $-vvel(ip1,jp1,kp1,bi,bj))*(vvel(ip1,jp1,k,bi,bj)-vvel(ip1,jp1,kp1,
     $bi,bj)))
            end do
          end do
        end do
        do j = jbot, jtop
          do i = ibot, itop
            work1(i,j) = nzmax(i,j,bi,bj)
            work2(i,j) = fcori(i,j,bi,bj)
          end do
        end do
        call mdkppmix( mytime,mythid,work1,shsq,dvsq,ustar,bo,bosol,
     $dbloc,ritop,work2,ikey,vddiff,ghat,hbl )
        do j = jmin, jmax
          do i = imin, imax
            do k = 1, nr
              kppviscaz(i,j,k,bi,bj) = vddiff(i,j,k-1,1)*pmask(i,j,k,bi,
     $bj)
              kppdiffkzs(i,j,k,bi,bj) = vddiff(i,j,k-1,2)*pmask(i,j,k,
     $bi,bj)
              kppdiffkzt(i,j,k,bi,bj) = vddiff(i,j,k-1,3)*pmask(i,j,k,
     $bi,bj)
              kppghat(i,j,k,bi,bj) = ghat(i,j,k)*pmask(i,j,k,bi,bj)
            end do
            kpphbl(i,j,bi,bj) = hbl(i,j)*pmask(i,j,1,bi,bj)
          end do
        end do
        do ip5 = 1, nsy
          do ip4 = 1, nsx
            do ip3 = 1, 1+sny+oly-(1-oly)
              do ip2 = 1, 1+snx+olx-(1-olx)
                comlev1_kpp_kpphbl_4h(ip2,ip3,ip4,ip5,ikey) = 
     $kpphbl(ip2-1+1-olx,ip3-1+1-oly,ip4,ip5)
              end do
            end do
          end do
        end do
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            worka(i,j) = kpphbl(i,j,bi,bj)
          end do
        end do
        help_i = (snx+2*olx)*(sny+2*oly)
        call swfrac( help_i,minusone,mytime,mythid,worka )
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            kppfrac(i,j,bi,bj) = worka(i,j)
          end do
        end do
      endif
      end


      subroutine adkpp_calc_diff( bi, bj, imin, imax, jmin, jmax, k, 
     $maskup, adkappart, adkappars )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl

C==============================================
C declare arguments
C==============================================
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkppdiffkzs(i,j,k,bi,bj) = adkppdiffkzs(i,j,k,bi,bj)+
     $adkappars(i,j,k)*maskup(i,j)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkppdiffkzt(i,j,k,bi,bj) = adkppdiffkzt(i,j,k,bi,bj)+
     $adkappart(i,j,k)*maskup(i,j)
        end do
      end do

      end


      subroutine adkpp_calc_dummy( bi, bj )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl

      double precision adkppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adkpp_short/ adkppfrac

C==============================================
C declare arguments
C==============================================
      integer bi
      integer bj

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer k

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          do k = 1, nr
            adkppdiffkzs(i,j,k,bi,bj) = 0.d0
            adkppdiffkzt(i,j,k,bi,bj) = 0.d0
            adkppviscaz(i,j,k,bi,bj) = 0.d0
            adkppghat(i,j,k,bi,bj) = 0.d0
          end do
          adkppfrac(i,j,bi,bj) = 0.d0
        end do
      end do

      end


      subroutine adkpp_calc_visc( bi, bj, imin, imax, jmin, jmax, k, 
     $kapparu, kapparv, adkapparu, adkapparv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkppviscaz(i,j-1,k,bi,bj) = adkppviscaz(i,j-1,k,bi,bj)+0.5*
     $adkapparv(i,j,k)*(0.5-sign(0.5d0,kapparv(i,j,k)-(kapparv(i,j,k)-
     $viscar+masks(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,
     $j-1,k,bi,bj)))))*masks(i,j,k,bi,bj)
          adkppviscaz(i,j,k,bi,bj) = adkppviscaz(i,j,k,bi,bj)+0.5*
     $adkapparv(i,j,k)*(0.5-sign(0.5d0,kapparv(i,j,k)-(kapparv(i,j,k)-
     $viscar+masks(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,
     $j-1,k,bi,bj)))))*masks(i,j,k,bi,bj)
          adkapparv(i,j,k) = adkapparv(i,j,k)*(0.5+0.5-sign(0.5d0,
     $kapparv(i,j,k)-(kapparv(i,j,k)-viscar+masks(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,j-1,k,bi,bj))))+sign(0.5d0,
     $kapparv(i,j,k)-(kapparv(i,j,k)-viscar+masks(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i,j-1,k,bi,bj)))))
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adkppviscaz(i-1,j,k,bi,bj) = adkppviscaz(i-1,j,k,bi,bj)+0.5*
     $adkapparu(i,j,k)*(0.5-sign(0.5d0,kapparu(i,j,k)-(kapparu(i,j,k)-
     $viscar+maskw(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-
     $1,j,k,bi,bj)))))*maskw(i,j,k,bi,bj)
          adkppviscaz(i,j,k,bi,bj) = adkppviscaz(i,j,k,bi,bj)+0.5*
     $adkapparu(i,j,k)*(0.5-sign(0.5d0,kapparu(i,j,k)-(kapparu(i,j,k)-
     $viscar+maskw(i,j,k,bi,bj)*0.5*(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-
     $1,j,k,bi,bj)))))*maskw(i,j,k,bi,bj)
          adkapparu(i,j,k) = adkapparu(i,j,k)*(0.5+0.5-sign(0.5d0,
     $kapparu(i,j,k)-(kapparu(i,j,k)-viscar+maskw(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-1,j,k,bi,bj))))+sign(0.5d0,
     $kapparu(i,j,k)-(kapparu(i,j,k)-viscar+maskw(i,j,k,bi,bj)*0.5*
     $(kppviscaz(i,j,k,bi,bj)+kppviscaz(i-1,j,k,bi,bj)))))
        end do
      end do

      end


      subroutine adkpp_smooth_horiz( k, bi, bj, adfld )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer itop
      parameter ( itop = snx+olx )
      integer imax
      parameter ( imax = itop-1 )
      integer imin
      parameter ( imin = ibot+1 )
      integer oly
      parameter ( oly = 4 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 16 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer jmax
      parameter ( jmax = jtop-1 )
      integer jmin
      parameter ( jmin = jbot+1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      double precision p0625
      parameter ( p0625 = 0.0625 )
      double precision p125
      parameter ( p125 = 0.125 )
      double precision p25
      parameter ( p25 = 0.25 )

C==============================================
C declare common blocks
C==============================================
      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision adfld(ibot:itop,jbot:jtop)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      double precision adfld_tmp(ibot:itop,jbot:jtop)
      integer i
      integer im1
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jm1
      integer jp1
      double precision tempvar

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = jbot, jtop
        do ip2 = ibot, itop
          adfld_tmp(ip2,ip3) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adfld_tmp(i,j) = adfld_tmp(i,j)+adfld(i,j)
          adfld(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        jm1 = j-1
        jp1 = j+1
        do i = imin, imax
          im1 = i-1
          ip1 = i+1
          tempvar = p25*pmask(i,j,k,bi,bj)+p125*(pmask(im1,j,k,bi,bj)+
     $pmask(ip1,j,k,bi,bj)+pmask(i,jm1,k,bi,bj)+pmask(i,jp1,k,bi,bj))+
     $p0625*(pmask(im1,jm1,k,bi,bj)+pmask(im1,jp1,k,bi,bj)+pmask(ip1,
     $jm1,k,bi,bj)+pmask(ip1,jp1,k,bi,bj))
          if (tempvar .ge. p25) then
            adfld(i,j) = adfld(i,j)+adfld_tmp(i,j)*(p25*pmask(i,j,k,bi,
     $bj)/tempvar)
            adfld(im1,j) = adfld(im1,j)+adfld_tmp(i,j)*(p125*pmask(im1,
     $j,k,bi,bj)/tempvar)
            adfld(ip1,j) = adfld(ip1,j)+adfld_tmp(i,j)*(p125*pmask(ip1,
     $j,k,bi,bj)/tempvar)
            adfld(i,jm1) = adfld(i,jm1)+adfld_tmp(i,j)*(p125*pmask(i,
     $jm1,k,bi,bj)/tempvar)
            adfld(im1,jm1) = adfld(im1,jm1)+adfld_tmp(i,j)*(p0625*
     $pmask(im1,jm1,k,bi,bj)/tempvar)
            adfld(ip1,jm1) = adfld(ip1,jm1)+adfld_tmp(i,j)*(p0625*
     $pmask(ip1,jm1,k,bi,bj)/tempvar)
            adfld(i,jp1) = adfld(i,jp1)+adfld_tmp(i,j)*(p125*pmask(i,
     $jp1,k,bi,bj)/tempvar)
            adfld(im1,jp1) = adfld(im1,jp1)+adfld_tmp(i,j)*(p0625*
     $pmask(im1,jp1,k,bi,bj)/tempvar)
            adfld(ip1,jp1) = adfld(ip1,jp1)+adfld_tmp(i,j)*(p0625*
     $pmask(ip1,jp1,k,bi,bj)/tempvar)
            adfld_tmp(i,j) = 0.d0
          else
            adfld(i,j) = adfld(i,j)+adfld_tmp(i,j)
            adfld_tmp(i,j) = 0.d0
          endif
        end do
      end do

      end


      subroutine adkpp_transport_s( imin, imax, jmin, jmax, bi, bj, k, 
     $km1, kappars, adkappars, addf )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw

C==============================================
C declare arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer km1

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adkappars(i,j,k) = adkappars(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $kppghat(i,j,km1,bi,bj)*drf(1)*surfacetendencys(i,j,bi,bj)
          adkppghat(i,j,km1,bi,bj) = adkppghat(i,j,km1,bi,bj)-addf(i,j)*
     $ra(i,j,bi,bj)*kappars(i,j,k)*drf(1)*surfacetendencys(i,j,bi,bj)
          adsurfacetendencys(i,j,bi,bj) = adsurfacetendencys(i,j,bi,bj)-
     $addf(i,j)*ra(i,j,bi,bj)*kappars(i,j,k)*kppghat(i,j,km1,bi,bj)*
     $drf(1)
        end do
      end do

      end


      subroutine adkpp_transport_t( imin, imax, jmin, jmax, bi, bj, k, 
     $km1, kappart, adkappart, addf )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adkppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adkppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adkppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adkpp/ adkppviscaz, adkppdiffkzt, adkppdiffkzs, adkppghat,
     $ adkpphbl

      double precision adkppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adkpp_short/ adkppfrac

      double precision adsurfacetendencytice(1-olx:snx+olx,1-oly:sny+
     $oly,nsx,nsy)
      common /adseaice_external/ adsurfacetendencytice

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision dqdt(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision empmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision qsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sss(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision sst(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /ffields/ fu, fv, qnet, qsw, dqdt, empmr, sst, sss

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /kpp_short/ kppfrac

      double precision heatcapacity_cp
      double precision lamba_theta
      double precision recip_cp
      common /parm_a/ heatcapacity_cp, recip_cp, lamba_theta

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision surfacetendencytice(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /seaice_external/ surfacetendencytice

      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw

C==============================================
C declare arguments
C==============================================
      double precision addf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer km1

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          if (useseaice) then
            adkappart(i,j,k) = adkappart(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $kppghat(i,j,km1,bi,bj)*drf(1)*(surfacetendencyt(i,j,bi,bj)+
     $surfacetendencytice(i,j,bi,bj)-qsw(i,j,bi,bj)*recip_cp*
     $recip_rhonil*recip_drf(1)*(1.-kppfrac(i,j,bi,bj)))
            adkppfrac(i,j,bi,bj) = adkppfrac(i,j,bi,bj)-addf(i,j)*ra(i,
     $j,bi,bj)*kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*drf(1)*qsw(i,j,bi,
     $bj)*recip_cp*recip_rhonil*recip_drf(1)
            adkppghat(i,j,km1,bi,bj) = adkppghat(i,j,km1,bi,bj)-addf(i,
     $j)*ra(i,j,bi,bj)*kappart(i,j,k)*drf(1)*(surfacetendencyt(i,j,bi,
     $bj)+surfacetendencytice(i,j,bi,bj)-qsw(i,j,bi,bj)*recip_cp*
     $recip_rhonil*recip_drf(1)*(1.-kppfrac(i,j,bi,bj)))
            adqsw(i,j,bi,bj) = adqsw(i,j,bi,bj)+addf(i,j)*ra(i,j,bi,bj)*
     $kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*drf(1)*recip_cp*
     $recip_rhonil*recip_drf(1)*(1.-kppfrac(i,j,bi,bj))
            adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)-addf(i,j)*ra(i,j,bi,bj)*kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*
     $drf(1)
            adsurfacetendencytice(i,j,bi,bj) = adsurfacetendencytice(i,
     $j,bi,bj)-addf(i,j)*ra(i,j,bi,bj)*kappart(i,j,k)*kppghat(i,j,km1,
     $bi,bj)*drf(1)
          endif
          if ( .not. useseaice) then
            adkappart(i,j,k) = adkappart(i,j,k)-addf(i,j)*ra(i,j,bi,bj)*
     $kppghat(i,j,km1,bi,bj)*drf(1)*(surfacetendencyt(i,j,bi,bj)-qsw(i,
     $j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*(1.-kppfrac(i,j,bi,bj)
     $))
            adkppfrac(i,j,bi,bj) = adkppfrac(i,j,bi,bj)-addf(i,j)*ra(i,
     $j,bi,bj)*kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*drf(1)*qsw(i,j,bi,
     $bj)*recip_cp*recip_rhonil*recip_drf(1)
            adkppghat(i,j,km1,bi,bj) = adkppghat(i,j,km1,bi,bj)-addf(i,
     $j)*ra(i,j,bi,bj)*kappart(i,j,k)*drf(1)*(surfacetendencyt(i,j,bi,
     $bj)-qsw(i,j,bi,bj)*recip_cp*recip_rhonil*recip_drf(1)*(1.-
     $kppfrac(i,j,bi,bj)))
            adqsw(i,j,bi,bj) = adqsw(i,j,bi,bj)+addf(i,j)*ra(i,j,bi,bj)*
     $kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*drf(1)*recip_cp*
     $recip_rhonil*recip_drf(1)*(1.-kppfrac(i,j,bi,bj))
            adsurfacetendencyt(i,j,bi,bj) = adsurfacetendencyt(i,j,bi,
     $bj)-addf(i,j)*ra(i,j,bi,bj)*kappart(i,j,k)*kppghat(i,j,km1,bi,bj)*
     $drf(1)
          endif
        end do
      end do

      end


      subroutine adkppmix( mytime, kmtj, shsq, dvsq, ustar, bo, bosol, 
     $dbloc, ritop, coriol, ikey, adshsq, addvsq, adustar, adbo, 
     $adbosol, addbloc, adritop, adcoriol, addiffus, adghat, adhbl )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_bfsfc_7h(imt,24)
      common /cadbfsfc/ comlev1_kpp_bfsfc_7h

      double precision comlev1_kpp_blmc_12h(imt,nr,mdiff,24)
      common /cadblmc/ comlev1_kpp_blmc_12h

      double precision comlev1_kpp_casea_9h(imt,24)
      common /cadcasea/ comlev1_kpp_casea_9h

      double precision comlev1_kpp_dkm1_11h(imt,mdiff,24)
      common /caddkm1/ comlev1_kpp_dkm1_11h

      double precision comlev1_kpp_ghat_13h(imt,nr,24)
      common /cadghat/ comlev1_kpp_ghat_13h

      double precision comlev1_kpp_ghat_5h(imt,nr,24)
      common /cadghau/ comlev1_kpp_ghat_5h

      double precision comlev1_kpp_hbl_6h(imt,24)
      common /cadhbl/ comlev1_kpp_hbl_6h

      integer comlev1_kpp_kbl_10h(imt,24)
      common /cadkbl/ comlev1_kpp_kbl_10h

      double precision comlev1_kpp_stable_8h(imt,24)
      common /cadstable/ comlev1_kpp_stable_8h

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adbo(imt)
      double precision adbosol(imt)
      double precision adcoriol(imt)
      double precision addbloc(imt,nr)
      double precision addiffus(imt,0:nrp1,mdiff)
      double precision addvsq(imt,nr)
      double precision adghat(imt,nr)
      double precision adhbl(imt)
      double precision adritop(imt,nr)
      double precision adshsq(imt,nr)
      double precision adustar(imt)
      double precision bo(imt)
      double precision bosol(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision dvsq(imt,nr)
      integer ikey
      integer kmtj(imt)
      double precision mytime
      double precision ritop(imt,nr)
      double precision shsq(imt,nr)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision adbfsfc(imt)
      double precision adblmc(imt,nr,mdiff)
      double precision adcasea(imt)
      double precision addkm1(imt,mdiff)
      double precision adribh(imt,nr)
      double precision adsigmah(imt)
      double precision adsigmai(imt)
      double precision adstable(imt)
      double precision bfsfc(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dkm1(imt,mdiff)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer k
      integer kbl(imt)
      integer md
      double precision stable(imt)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip1 = 1, imt
        adbfsfc(ip1) = 0.d0
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            adblmc(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip1 = 1, imt
        adcasea(ip1) = 0.d0
      end do
      do ip2 = 1, mdiff
        do ip1 = 1, imt
          addkm1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          adribh(ip1,ip2) = 0.d0
        end do
      end do
      do ip1 = 1, imt
        adsigmah(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adsigmai(ip1) = 0.d0
      end do
      do ip1 = 1, imt
        adstable(ip1) = 0.d0
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = comlev1_kpp_ghat_5h(ip1,ip2,ikey)
        end do
      end do
      call ri_iwmix( kmtj,shsq,dbloc,ghat,ikey,diffus )
      do md = 1, mdiff
        do i = 1, imt
          do k = kmtj(i), nrp1
            diffus(i,k,md) = 0.
          end do
        end do
      end do
      do ip1 = 1, imt
        hbl(ip1) = comlev1_kpp_hbl_6h(ip1,ikey)
      end do
      do ip1 = 1, imt
        bfsfc(ip1) = comlev1_kpp_bfsfc_7h(ip1,ikey)
      end do
      do ip1 = 1, imt
        stable(ip1) = comlev1_kpp_stable_8h(ip1,ikey)
      end do
      do ip1 = 1, imt
        casea(ip1) = comlev1_kpp_casea_9h(ip1,ikey)
      end do
      do ip1 = 1, imt
        kbl(ip1) = comlev1_kpp_kbl_10h(ip1,ikey)
      end do
      do ip2 = 1, mdiff
        do ip1 = 1, imt
          dkm1(ip1,ip2) = comlev1_kpp_dkm1_11h(ip1,ip2,ikey)
        end do
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            blmc(ip1,ip2,ip3) = comlev1_kpp_blmc_12h(ip1,ip2,ip3,ikey)
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = comlev1_kpp_ghat_13h(ip1,ip2,ikey)
        end do
      end do
      call enhance( dkm1,hbl,kbl,diffus,casea,ghat,blmc )
      do k = 1, nr
        do i = 1, imt
          if (k .lt. kbl(i)) then
            adblmc(i,k,3) = adblmc(i,k,3)+addiffus(i,k,3)*(0.5+
     $sign(0.5d0,blmc(i,k,3)-diffkrt))
            addiffus(i,k,3) = 0.d0
            adblmc(i,k,2) = adblmc(i,k,2)+addiffus(i,k,2)*(0.5+
     $sign(0.5d0,blmc(i,k,2)-diffkrs))
            addiffus(i,k,2) = 0.d0
            adblmc(i,k,1) = adblmc(i,k,1)+addiffus(i,k,1)*(0.5+
     $sign(0.5d0,blmc(i,k,1)-viscar))
            addiffus(i,k,1) = 0.d0
          else
            adghat(i,k) = 0.d0
          endif
        end do
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            blmc(ip1,ip2,ip3) = comlev1_kpp_blmc_12h(ip1,ip2,ip3,ikey)
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = comlev1_kpp_ghat_13h(ip1,ip2,ikey)
        end do
      end do
      call adenhance( dkm1,hbl,kbl,diffus,casea,ghat,blmc,addkm1,adhbl,
     $addiffus,adcasea,adghat,adblmc )
      call adblmix( ustar,bfsfc,hbl,stable,casea,diffus,kbl,ikey,
     $adustar,adbfsfc,adhbl,adstable,adcasea,addiffus,addkm1,adblmc,
     $adghat,adsigmah )
      call adbldepth( mytime,kmtj,dvsq,dbloc,ritop,ustar,bo,bosol,
     $coriol,ikey,addvsq,addbloc,adritop,adustar,adbo,adbosol,adcoriol,
     $adhbl,adbfsfc,adstable,adcasea,adribh,adsigmai )
      do md = 1, mdiff
        do i = 1, imt
          do k = kmtj(i), nrp1
            addiffus(i,k,md) = 0.d0
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          ghat(ip1,ip2) = comlev1_kpp_ghat_5h(ip1,ip2,ikey)
        end do
      end do
      call adri_iwmix( kmtj,shsq,dbloc,ghat,adshsq,addbloc,adghat,
     $addiffus )

      end


      subroutine mdkppmix( mytime, mythid, kmtj, shsq, dvsq, ustar, bo, 
     $bosol, dbloc, ritop, coriol, ikey, diffus, ghat, hbl )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer mdiff
      parameter ( mdiff = 3 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )

C==============================================
C declare common blocks
C==============================================
      double precision comlev1_kpp_bfsfc_7h(imt,24)
      common /cadbfsfc/ comlev1_kpp_bfsfc_7h

      double precision comlev1_kpp_blmc_12h(imt,nr,mdiff,24)
      common /cadblmc/ comlev1_kpp_blmc_12h

      double precision comlev1_kpp_casea_9h(imt,24)
      common /cadcasea/ comlev1_kpp_casea_9h

      double precision comlev1_kpp_dkm1_11h(imt,mdiff,24)
      common /caddkm1/ comlev1_kpp_dkm1_11h

      double precision comlev1_kpp_ghat_13h(imt,nr,24)
      common /cadghat/ comlev1_kpp_ghat_13h

      double precision comlev1_kpp_ghat_5h(imt,nr,24)
      common /cadghau/ comlev1_kpp_ghat_5h

      double precision comlev1_kpp_hbl_6h(imt,24)
      common /cadhbl/ comlev1_kpp_hbl_6h

      integer comlev1_kpp_kbl_10h(imt,24)
      common /cadkbl/ comlev1_kpp_kbl_10h

      double precision comlev1_kpp_stable_8h(imt,24)
      common /cadstable/ comlev1_kpp_stable_8h

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision bo(imt)
      double precision bosol(imt)
      double precision coriol(imt)
      double precision dbloc(imt,nr)
      double precision diffus(imt,0:nrp1,mdiff)
      double precision dvsq(imt,nr)
      double precision ghat(imt,nr)
      double precision hbl(imt)
      integer ikey
      integer kmtj(imt)
      integer mythid
      double precision mytime
      double precision ritop(imt,nr)
      double precision shsq(imt,nr)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision bfsfc(imt)
      double precision blmc(imt,nr,mdiff)
      double precision casea(imt)
      double precision dkm1(imt,mdiff)
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer k
      integer kbl(imt)
      integer md
      double precision rib(imt,nr)
      double precision sigma(imt)
      double precision stable(imt)

C**********************************************
C executable statements of routine
C**********************************************
      do ip2 = 1, nr
        do ip1 = 1, imt
          comlev1_kpp_ghat_5h(ip1,ip2,ikey) = ghat(ip1,ip2)
        end do
      end do
      call ri_iwmix( kmtj,shsq,dbloc,ghat,ikey,diffus )
      do md = 1, mdiff
        do i = 1, imt
          do k = kmtj(i), nrp1
            diffus(i,k,md) = 0.
          end do
        end do
      end do
      call mdbldepth( mytime,mythid,kmtj,dvsq,dbloc,ritop,ustar,bo,
     $bosol,coriol,ikey,hbl,bfsfc,stable,casea,kbl,rib,sigma )
      do ip1 = 1, imt
        comlev1_kpp_hbl_6h(ip1,ikey) = hbl(ip1)
      end do
      do ip1 = 1, imt
        comlev1_kpp_bfsfc_7h(ip1,ikey) = bfsfc(ip1)
      end do
      do ip1 = 1, imt
        comlev1_kpp_stable_8h(ip1,ikey) = stable(ip1)
      end do
      do ip1 = 1, imt
        comlev1_kpp_casea_9h(ip1,ikey) = casea(ip1)
      end do
      do ip1 = 1, imt
        comlev1_kpp_kbl_10h(ip1,ikey) = kbl(ip1)
      end do
      call mdblmix( ustar,bfsfc,hbl,stable,casea,diffus,kbl,dkm1,blmc,
     $ghat,sigma,ikey )
      do ip2 = 1, mdiff
        do ip1 = 1, imt
          comlev1_kpp_dkm1_11h(ip1,ip2,ikey) = dkm1(ip1,ip2)
        end do
      end do
      do ip3 = 1, mdiff
        do ip2 = 1, nr
          do ip1 = 1, imt
            comlev1_kpp_blmc_12h(ip1,ip2,ip3,ikey) = blmc(ip1,ip2,ip3)
          end do
        end do
      end do
      do ip2 = 1, nr
        do ip1 = 1, imt
          comlev1_kpp_ghat_13h(ip1,ip2,ikey) = ghat(ip1,ip2)
        end do
      end do
      call enhance( dkm1,hbl,kbl,diffus,casea,ghat,blmc )
      do k = 1, nr
        do i = 1, imt
          if (k .lt. kbl(i)) then
            diffus(i,k,1) = max(blmc(i,k,1),viscar)
            diffus(i,k,2) = max(blmc(i,k,2),diffkrs)
            diffus(i,k,3) = max(blmc(i,k,3),diffkrt)
          else
            ghat(i,k) = 0.
          endif
        end do
      end do
      end


      subroutine admom_calc_ke( bi, bj, k, ufld, vfld, adufld, advfld, 
     $adke )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adufld(i+1,j) = adufld(i+1,j)+0.5*adke(i,j)*ufld(i+1,j)*
     $hfacw(i+1,j,k,bi,bj)*recip_hfacc(i,j,k,bi,bj)
          adufld(i,j) = adufld(i,j)+0.5*adke(i,j)*ufld(i,j)*hfacw(i,j,k,
     $bi,bj)*recip_hfacc(i,j,k,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)+0.5*adke(i,j)*vfld(i,j+1)*
     $hfacs(i,j+1,k,bi,bj)*recip_hfacc(i,j,k,bi,bj)
          advfld(i,j) = advfld(i,j)+0.5*adke(i,j)*vfld(i,j)*hfacs(i,j,k,
     $bi,bj)*recip_hfacc(i,j,k,bi,bj)
          adke(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_calc_strain( bi, bj, hfacz, adufld, advfld, 
     $adstrain )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      logical eebooterror
      logical eeenderror
      logical fatalerror
      logical usecubedsphereexchange
      common /eeparams_l/ eebooterror, fatalerror, eeenderror, 
     $usecubedsphereexchange

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adstrain(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usecubedsphereexchange) then
        i = snx+1
        j = sny+1
        adstrain(i,j) = 0.d0
        i = 1
        j = sny+1
        adstrain(i,j) = 0.d0
        i = snx+1
        j = 1
        adstrain(i,j) = 0.d0
        i = 1
        j = 1
        adstrain(i,j) = 0.d0
      endif
      do j = 2-oly, sny+oly
        do i = 2-olx, snx+olx
          if (hfacz(i,j) .eq. 0.) then
            adstrain(i,j) = 0.d0
          endif
          adufld(i,j-1) = adufld(i,j-1)-adstrain(i,j)*dxv(i,j,bi,bj)*
     $recip_dyu(i,j,bi,bj)*recip_dxc(i,j-1,bi,bj)
          adufld(i,j) = adufld(i,j)+adstrain(i,j)*dxv(i,j,bi,bj)*
     $recip_dyu(i,j,bi,bj)*recip_dxc(i,j,bi,bj)
          advfld(i-1,j) = advfld(i-1,j)-adstrain(i,j)*dyu(i,j,bi,bj)*
     $recip_dxv(i,j,bi,bj)*recip_dyc(i-1,j,bi,bj)
          advfld(i,j) = advfld(i,j)+adstrain(i,j)*dyu(i,j,bi,bj)*
     $recip_dxv(i,j,bi,bj)*recip_dyc(i,j,bi,bj)
          adstrain(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_calc_tension( bi, bj, adufld, advfld, adtension )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adtension(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adufld(i+1,j) = adufld(i+1,j)+adtension(i,j)*dyf(i,j,bi,bj)*
     $recip_dxf(i,j,bi,bj)*recip_dyg(i+1,j,bi,bj)
          adufld(i,j) = adufld(i,j)-adtension(i,j)*dyf(i,j,bi,bj)*
     $recip_dxf(i,j,bi,bj)*recip_dyg(i,j,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)-adtension(i,j)*dxf(i,j,bi,bj)*
     $recip_dyf(i,j,bi,bj)*recip_dxg(i,j+1,bi,bj)
          advfld(i,j) = advfld(i,j)+adtension(i,j)*dxf(i,j,bi,bj)*
     $recip_dyf(i,j,bi,bj)*recip_dxg(i,j,bi,bj)
          adtension(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_cdscheme( bi, bj, k, adphi_hyd )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision bo_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_bo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /solve_barot/ bo_surf, recip_bo

C==============================================
C declare arguments
C==============================================
      double precision adphi_hyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      double precision ab05
      double precision ab15
      double precision adaf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adpf(1-olx:snx+olx,1-oly:sny+oly)
      double precision advf(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer j
      integer jmax
      integer jmin

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adaf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adpf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advf(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      imin = 1-olx+1
      imax = snx+olx-1
      jmin = 1-oly+1
      jmax = sny+oly-1
      ab15 = 1.5+abeps
      ab05 = (-0.5)-abeps
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advnm1(i,j,k,bi,bj)
          advnm1(i,j,k,bi,bj) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adunm1(i,j,k,bi,bj)
          adunm1(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          aduveld(i,j,k,bi,bj) = aduveld(i,j,k,bi,bj)-0.5*adgvcd(i,j,k,
     $bi,bj)*(fcori(i,j,bi,bj)+fcori(i,j-1,bi,bj))*masks(i,j,k,bi,bj)*
     $cffacmom
          adgvcd(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adunm1(i+1,j-1,k,bi,bj) = adunm1(i+1,j-1,k,bi,bj)+0.25*
     $aduveld(i,j,k,bi,bj)*(1.-rcd)*ab05*masks(i,j,k,bi,bj)
          adunm1(i,j-1,k,bi,bj) = adunm1(i,j-1,k,bi,bj)+0.25*aduveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab05*masks(i,j,k,bi,bj)
          adunm1(i+1,j,k,bi,bj) = adunm1(i+1,j,k,bi,bj)+0.25*aduveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab05*masks(i,j,k,bi,bj)
          adunm1(i,j,k,bi,bj) = adunm1(i,j,k,bi,bj)+0.25*aduveld(i,j,k,
     $bi,bj)*(1.-rcd)*ab05*masks(i,j,k,bi,bj)
          aduvel(i+1,j-1,k,bi,bj) = aduvel(i+1,j-1,k,bi,bj)+0.25*
     $aduveld(i,j,k,bi,bj)*(1.-rcd)*ab15*masks(i,j,k,bi,bj)
          aduvel(i,j-1,k,bi,bj) = aduvel(i,j-1,k,bi,bj)+0.25*aduveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab15*masks(i,j,k,bi,bj)
          aduvel(i+1,j,k,bi,bj) = aduvel(i+1,j,k,bi,bj)+0.25*aduveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab15*masks(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+0.25*aduveld(i,j,k,
     $bi,bj)*(1.-rcd)*ab15*masks(i,j,k,bi,bj)
          aduveld(i,j,k,bi,bj) = aduveld(i,j,k,bi,bj)*rcd
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advf(i,j) = advf(i,j)+aduveld(i,j,k,bi,bj)*deltatmom*masks(i,
     $j,k,bi,bj)
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i+1,j-1) = adaf(i+1,j-1)+0.25*advf(i,j)*masks(i,j,k,bi,
     $bj)
          adaf(i,j-1) = adaf(i,j-1)+0.25*advf(i,j)*masks(i,j,k,bi,bj)
          adaf(i+1,j) = adaf(i+1,j)+0.25*advf(i,j)*masks(i,j,k,bi,bj)
          adaf(i,j) = adaf(i,j)+0.25*advf(i,j)*masks(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.5*advf(i,j)*
     $(fcori(i,j,bi,bj)+fcori(i,j-1,bi,bj))
          advf(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)+adaf(i,j)
          adpf(i-1,j) = adpf(i-1,j)+adaf(i,j)*maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adaf(i,j)*maskw(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)
          adaf(i,j) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advveld(i,j,k,bi,bj) = advveld(i,j,k,bi,bj)+0.5*adgucd(i,j,k,
     $bi,bj)*(fcori(i,j,bi,bj)+fcori(i-1,j,bi,bj))*cffacmom
          adgucd(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advnm1(i-1,j+1,k,bi,bj) = advnm1(i-1,j+1,k,bi,bj)+0.25*
     $advveld(i,j,k,bi,bj)*(1.-rcd)*ab05*maskw(i,j,k,bi,bj)
          advnm1(i,j+1,k,bi,bj) = advnm1(i,j+1,k,bi,bj)+0.25*advveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab05*maskw(i,j,k,bi,bj)
          advnm1(i-1,j,k,bi,bj) = advnm1(i-1,j,k,bi,bj)+0.25*advveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab05*maskw(i,j,k,bi,bj)
          advnm1(i,j,k,bi,bj) = advnm1(i,j,k,bi,bj)+0.25*advveld(i,j,k,
     $bi,bj)*(1.-rcd)*ab05*maskw(i,j,k,bi,bj)
          advvel(i-1,j+1,k,bi,bj) = advvel(i-1,j+1,k,bi,bj)+0.25*
     $advveld(i,j,k,bi,bj)*(1.-rcd)*ab15*maskw(i,j,k,bi,bj)
          advvel(i,j+1,k,bi,bj) = advvel(i,j+1,k,bi,bj)+0.25*advveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab15*maskw(i,j,k,bi,bj)
          advvel(i-1,j,k,bi,bj) = advvel(i-1,j,k,bi,bj)+0.25*advveld(i,
     $j,k,bi,bj)*(1.-rcd)*ab15*maskw(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+0.25*advveld(i,j,k,
     $bi,bj)*(1.-rcd)*ab15*maskw(i,j,k,bi,bj)
          advveld(i,j,k,bi,bj) = advveld(i,j,k,bi,bj)*rcd
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          advf(i,j) = advf(i,j)+advveld(i,j,k,bi,bj)*deltatmom
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adaf(i-1,j+1) = adaf(i-1,j+1)+0.25*advf(i,j)*maskw(i,j,k,bi,
     $bj)
          adaf(i,j+1) = adaf(i,j+1)+0.25*advf(i,j)*maskw(i,j,k,bi,bj)
          adaf(i-1,j) = adaf(i-1,j)+0.25*advf(i,j)*maskw(i,j,k,bi,bj)
          adaf(i,j) = adaf(i,j)+0.25*advf(i,j)*maskw(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)-0.5*advf(i,j)*
     $(fcori(i,j,bi,bj)+fcori(i-1,j,bi,bj))
          advf(i,j) = 0.d0
        end do
      end do
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)+adaf(i,j)
          adpf(i,j-1) = adpf(i,j-1)+adaf(i,j)*masks(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)-adaf(i,j)*masks(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)
          adaf(i,j) = 0.d0
        end do
      end do
      if (staggertimestep) then
        do j = jmin, jmax
          do i = imin, imax
            adphi_hyd(i,j,k) = adphi_hyd(i,j,k)+adpf(i,j)
          end do
        end do
      endif
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adpf(i,j)*ab15*
     $bo_surf(i,j,bi,bj)
          adetanm1(i,j,bi,bj) = adetanm1(i,j,bi,bj)+adpf(i,j)*ab05*
     $bo_surf(i,j,bi,bj)
          adpf(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_fluxform( bi, bj, imin, imax, jmin, jmax, k, kup,
     $ kdown, kapparu, kapparv, adphi_hyd, adkapparu, adkapparv, 
     $adfveru, adfverv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adfveru(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfverv(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphi_hyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kup

C==============================================
C declare local variables
C==============================================
      double precision adaf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision admt(1-olx:snx+olx,1-oly:sny+oly)
      double precision adpf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adv4f(1-olx:snx+olx,1-oly:sny+oly)
      double precision advf(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advrf(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision ahdudxfac
      double precision ahdudyfac
      double precision ahdvdxfac
      double precision ahdvdyfac
      double precision ardudrfac
      double precision ardvdrfac
      logical bottomdragterms
      integer help_h
      integer help_i
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j
      double precision ke(1-olx:snx+olx,1-oly:sny+oly)
      double precision mtfacu
      double precision mtfacv
      integer mythid
      double precision phxfac
      double precision phyfac
      double precision r_hfacz(1-olx:snx+olx,1-oly:sny+oly)
      double precision rveldudrfac
      double precision rveldvdrfac
      double precision ududxfac
      double precision udvdxfac
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vdudyfac
      double precision vdvdyfac
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adaf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adke(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          admt(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adpf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adufld(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adv4f(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advfld(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advrf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      ududxfac = affacmom*1.
      ahdudxfac = vffacmom*1.
      vdudyfac = affacmom*1.
      ahdudyfac = vffacmom*1.
      rveldudrfac = affacmom*1.
      ardudrfac = vffacmom*1.
      mtfacu = mtfacmom*1.
      phxfac = pffacmom*1.
      udvdxfac = affacmom*1.
      ahdvdxfac = vffacmom*1.
      vdvdyfac = affacmom*1.
      ahdvdyfac = vffacmom*1.
      rveldvdrfac = affacmom*1.
      ardvdrfac = vffacmom*1.
      mtfacv = mtfacmom*1.
      phyfac = pffacmom*1.
      if (no_slip_bottom .or. bottomdragquadratic .ne. 0. .or. 
     $bottomdraglinear .ne. 0.) then
        bottomdragterms =  .true. 
      else
        bottomdragterms =  .false. 
      endif
      if (staggertimestep) then
        phxfac = 0.
        phyfac = 0.
      endif
      call mom_calc_hfacz( bi,bj,k,hfacz,r_hfacz,mythid )
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          xa(i,j) = dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
          ya(i,j) = dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          ufld(i,j) = uvel(i,j,k,bi,bj)
          vfld(i,j) = vvel(i,j,k,bi,bj)
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          utrans(i,j) = ufld(i,j)*xa(i,j)
          vtrans(i,j) = vfld(i,j)*ya(i,j)
        end do
      end do
      call mom_calc_ke( bi,bj,k,ufld,vfld,ke,mythid )
      call admom_cdscheme( bi,bj,k,adphi_hyd )
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
        end do
      end do
      if (usingsphericalpolarmterms) then
        do j = jmin, jmax
          do i = imin, imax
            admt(i,j) = admt(i,j)+adgv(i,j,k,bi,bj)*mtfacv
          end do
        end do
        call admom_v_metric_sphere( bi,bj,ufld,adufld,admt )
        do j = jmin, jmax
          do i = imin, imax
            admt(i,j) = admt(i,j)+adgv(i,j,k,bi,bj)*mtfacv
          end do
        end do
        call admom_v_metric_nh( bi,bj,k,vfld,wvel,advfld,adwvel,admt )
      endif
      if (momforcing) then
        call adexternal_forcing_v( imin,imax,jmin,jmax,bi,bj,k )
      endif
      if (momviscosity .and. bottomdragterms) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgv(i,j,k,bi,bj)
          end do
        end do
        call admom_v_bottomdrag( bi,bj,k,vfld,ke,kapparv,advfld,adke,
     $adkapparv,advf )
      endif
      if (momviscosity .and. no_slip_sides) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgv(i,j,k,bi,bj)
          end do
        end do
        call admom_v_sidedrag( bi,bj,k,hfacz,advfld,adv4f,advf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adfmer(i,j-1) = adfmer(i,j-1)+adgv(i,j,k,bi,bj)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adfmer(i,j) = adfmer(i,j)-adgv(i,j,k,bi,bj)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adfverv(i,j,kdown) = adfverv(i,j,kdown)+adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*rkfac
          adfverv(i,j,kup) = adfverv(i,j,kup)-adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*rkfac
          adfzon(i+1,j) = adfzon(i+1,j)-adgv(i,j,k,bi,bj)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adfzon(i,j) = adfzon(i,j)+adgv(i,j,k,bi,bj)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)+adgv(i,j,k,bi,bj)*phyfac
          adgv(i,j,k,bi,bj) = 0.d0
        end do
      end do
      if (mompressureforcing) then
        do j = jmin, jmax
          do i = imin, imax
            adphi_hyd(i,j-1,k) = adphi_hyd(i,j-1,k)+adpf(i,j)*
     $recip_dyc(i,j,bi,bj)
            adphi_hyd(i,j,k) = adphi_hyd(i,j,k)-adpf(i,j)*recip_dyc(i,j,
     $bi,bj)
            adpf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfverv(i,j,kdown)*rveldvdrfac
          advrf(i,j) = advrf(i,j)+adfverv(i,j,kdown)*ardvdrfac
          adfverv(i,j,kdown) = 0.d0
        end do
      end do
      if (momviscosity .and. ( .not. implicitviscosity)) then
        call admom_v_rviscflux( bi,bj,k,vvel,kapparv,advvel,adkapparv,
     $advrf )
      endif
      if (momadvection) then
        help_i = k+1
        call admom_v_adv_wv( bi,bj,help_i,vvel,wvel,advvel,adwvel,adaf )
      endif
      if (momadvection .and. k .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfverv(i,j,kup)
            adfverv(i,j,kup) = 0.d0
          end do
        end do
        call admom_v_adv_wv( bi,bj,k,vvel,wvel,advvel,adwvel,adaf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfmer(i,j)*vdvdyfac
          advf(i,j) = advf(i,j)+adfmer(i,j)*ahdvdyfac
          adfmer(i,j) = 0.d0
        end do
      end do
      if (momviscosity) then
        call admom_v_yviscflux( bi,bj,k,advfld,adv4f,advf )
      endif
      if (momadvection) then
        call admom_v_adv_vv( vtrans,vfld,advtrans,advfld,adaf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfzon(i,j)*udvdxfac
          advf(i,j) = advf(i,j)+adfzon(i,j)*ahdvdxfac
          adfzon(i,j) = 0.d0
        end do
      end do
      if (momviscosity) then
        call admom_v_xviscflux( bi,bj,k,hfacz,advfld,adv4f,advf )
      endif
      if (momadvection) then
        call admom_v_adv_uv( utrans,vfld,adutrans,advfld,adaf )
      endif
      if (momviscosity) then
        call admom_v_del2v( bi,bj,k,hfacz,advfld,adv4f )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
        end do
      end do
      if (usingsphericalpolarmterms) then
        do j = jmin, jmax
          do i = imin, imax
            admt(i,j) = admt(i,j)+adgu(i,j,k,bi,bj)*mtfacu
          end do
        end do
        call admom_u_metric_sphere( bi,bj,ufld,vfld,adufld,advfld,admt )
        do j = jmin, jmax
          do i = imin, imax
            admt(i,j) = admt(i,j)+adgu(i,j,k,bi,bj)*mtfacu
          end do
        end do
        call admom_u_metric_nh( bi,bj,k,ufld,wvel,adufld,adwvel,admt )
      endif
      if (momforcing) then
        call adexternal_forcing_u( imin,imax,jmin,jmax,bi,bj,k )
      endif
      if (momviscosity .and. bottomdragterms) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgu(i,j,k,bi,bj)
          end do
        end do
        call admom_u_bottomdrag( bi,bj,k,ufld,ke,kapparu,adufld,adke,
     $adkapparu,advf )
      endif
      if (momviscosity .and. no_slip_sides) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgu(i,j,k,bi,bj)
          end do
        end do
        call admom_u_sidedrag( bi,bj,k,hfacz,adufld,adv4f,advf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adfmer(i,j+1) = adfmer(i,j+1)-adgu(i,j,k,bi,bj)*recip_hfacw(i,
     $j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adfmer(i,j) = adfmer(i,j)+adgu(i,j,k,bi,bj)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adfveru(i,j,kdown) = adfveru(i,j,kdown)+adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*rkfac
          adfveru(i,j,kup) = adfveru(i,j,kup)-adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*rkfac
          adfzon(i-1,j) = adfzon(i-1,j)+adgu(i,j,k,bi,bj)*recip_hfacw(i,
     $j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adfzon(i,j) = adfzon(i,j)-adgu(i,j,k,bi,bj)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)
          adpf(i,j) = adpf(i,j)+adgu(i,j,k,bi,bj)*phxfac
          adgu(i,j,k,bi,bj) = 0.d0
        end do
      end do
      if (mompressureforcing) then
        do j = jmin, jmax
          do i = imin, imax
            adphi_hyd(i-1,j,k) = adphi_hyd(i-1,j,k)+adpf(i,j)*
     $recip_dxc(i,j,bi,bj)
            adphi_hyd(i,j,k) = adphi_hyd(i,j,k)-adpf(i,j)*recip_dxc(i,j,
     $bi,bj)
            adpf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfveru(i,j,kdown)*rveldudrfac
          advrf(i,j) = advrf(i,j)+adfveru(i,j,kdown)*ardudrfac
          adfveru(i,j,kdown) = 0.d0
        end do
      end do
      if (momviscosity .and. ( .not. implicitviscosity)) then
        call admom_u_rviscflux( bi,bj,k,uvel,kapparu,aduvel,adkapparu,
     $advrf )
      endif
      if (momadvection) then
        help_h = k+1
        call admom_u_adv_wu( bi,bj,help_h,uvel,wvel,aduvel,adwvel,adaf )
      endif
      if (momadvection .and. k .eq. 1) then
        do j = jmin, jmax
          do i = imin, imax
            adaf(i,j) = adaf(i,j)+adfveru(i,j,kup)
            adfveru(i,j,kup) = 0.d0
          end do
        end do
        call admom_u_adv_wu( bi,bj,k,uvel,wvel,aduvel,adwvel,adaf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfmer(i,j)*vdudyfac
          advf(i,j) = advf(i,j)+adfmer(i,j)*ahdudyfac
          adfmer(i,j) = 0.d0
        end do
      end do
      if (momviscosity) then
        call admom_u_yviscflux( bi,bj,k,hfacz,adufld,adv4f,advf )
      endif
      if (momadvection) then
        call admom_u_adv_vu( vtrans,ufld,advtrans,adufld,adaf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adaf(i,j) = adaf(i,j)+adfzon(i,j)*ududxfac
          advf(i,j) = advf(i,j)+adfzon(i,j)*ahdudxfac
          adfzon(i,j) = 0.d0
        end do
      end do
      if (momviscosity) then
        call admom_u_xviscflux( bi,bj,k,adufld,adv4f,advf )
      endif
      if (momadvection) then
        call admom_u_adv_uu( utrans,ufld,adutrans,adufld,adaf )
      endif
      if (momviscosity) then
        call admom_u_del2u( bi,bj,k,hfacz,adufld,adv4f )
      endif
      call admom_calc_ke( bi,bj,k,ufld,vfld,adufld,advfld,adke )
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advfld(i,j) = advfld(i,j)+advtrans(i,j)*ya(i,j)
          advtrans(i,j) = 0.d0
          adufld(i,j) = adufld(i,j)+adutrans(i,j)*xa(i,j)
          adutrans(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advfld(i,j)
          advfld(i,j) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adufld(i,j)
          adufld(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_hdissip( bi, bj, viscat, viscas, adtension, 
     $adstrain, adudissip, advdissip )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adstrain(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtension(1-olx:snx+olx,1-oly:sny+oly)
      double precision adudissip(1-olx:snx+olx,1-oly:sny+oly)
      double precision advdissip(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision viscas
      double precision viscat

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 2-oly, sny+oly-1
        do i = 2-olx, snx+olx-1
          adstrain(i+1,j) = adstrain(i+1,j)+advdissip(i,j)*viscas*
     $recip_dyc(i,j,bi,bj)*recip_dyc(i,j,bi,bj)*recip_dxg(i,j,bi,bj)*
     $dyu(i+1,j,bi,bj)*dyu(i+1,j,bi,bj)
          adstrain(i,j) = adstrain(i,j)-advdissip(i,j)*viscas*
     $recip_dyc(i,j,bi,bj)*recip_dyc(i,j,bi,bj)*recip_dxg(i,j,bi,bj)*
     $dyu(i,j,bi,bj)*dyu(i,j,bi,bj)
          adtension(i,j-1) = adtension(i,j-1)+advdissip(i,j)*viscat*
     $recip_dxg(i,j,bi,bj)*recip_dxg(i,j,bi,bj)*recip_dyc(i,j,bi,bj)*
     $dxf(i,j-1,bi,bj)*dxf(i,j-1,bi,bj)
          adtension(i,j) = adtension(i,j)-advdissip(i,j)*viscat*
     $recip_dxg(i,j,bi,bj)*recip_dxg(i,j,bi,bj)*recip_dyc(i,j,bi,bj)*
     $dxf(i,j,bi,bj)*dxf(i,j,bi,bj)
          advdissip(i,j) = 0.d0
          adstrain(i,j+1) = adstrain(i,j+1)+adudissip(i,j)*viscas*
     $recip_dxc(i,j,bi,bj)*recip_dxc(i,j,bi,bj)*recip_dyg(i,j,bi,bj)*
     $dxv(i,j+1,bi,bj)*dxv(i,j+1,bi,bj)
          adstrain(i,j) = adstrain(i,j)-adudissip(i,j)*viscas*
     $recip_dxc(i,j,bi,bj)*recip_dxc(i,j,bi,bj)*recip_dyg(i,j,bi,bj)*
     $dxv(i,j,bi,bj)*dxv(i,j,bi,bj)
          adtension(i-1,j) = adtension(i-1,j)-adudissip(i,j)*viscat*
     $recip_dyg(i,j,bi,bj)*recip_dyg(i,j,bi,bj)*recip_dxc(i,j,bi,bj)*
     $dyf(i-1,j,bi,bj)*dyf(i-1,j,bi,bj)
          adtension(i,j) = adtension(i,j)+adudissip(i,j)*viscat*
     $recip_dyg(i,j,bi,bj)*recip_dyg(i,j,bi,bj)*recip_dxc(i,j,bi,bj)*
     $dyf(i,j,bi,bj)*dyf(i,j,bi,bj)
          adudissip(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_adv_uu( utrans, ufld, adutrans, adufld, 
     $adadvectfluxuu )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adadvectfluxuu(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adufld(i+1,j) = adufld(i+1,j)+0.25*adadvectfluxuu(i,j)*
     $(utrans(i,j)+utrans(i+1,j))
          adufld(i,j) = adufld(i,j)+0.25*adadvectfluxuu(i,j)*(utrans(i,
     $j)+utrans(i+1,j))
          adutrans(i+1,j) = adutrans(i+1,j)+0.25*adadvectfluxuu(i,j)*
     $(ufld(i,j)+ufld(i+1,j))
          adutrans(i,j) = adutrans(i,j)+0.25*adadvectfluxuu(i,j)*
     $(ufld(i,j)+ufld(i+1,j))
          adadvectfluxuu(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_adv_vu( vtrans, ufld, advtrans, adufld, 
     $adadvectfluxvu )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adadvectfluxvu(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx+1, snx+olx
          adufld(i,j-1) = adufld(i,j-1)+0.25*adadvectfluxvu(i,j)*
     $(vtrans(i,j)+vtrans(i-1,j))
          adufld(i,j) = adufld(i,j)+0.25*adadvectfluxvu(i,j)*(vtrans(i,
     $j)+vtrans(i-1,j))
          advtrans(i-1,j) = advtrans(i-1,j)+0.25*adadvectfluxvu(i,j)*
     $(ufld(i,j)+ufld(i,j-1))
          advtrans(i,j) = advtrans(i,j)+0.25*adadvectfluxvu(i,j)*
     $(ufld(i,j)+ufld(i,j-1))
          adadvectfluxvu(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_adv_wu( bi, bj, k, ufld, wfld, adufld, adwfld, 
     $adadvectivefluxwu )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision adadvectivefluxwu(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (k .gt. nr .or. k .eq. 1 .and. rigidlid) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adadvectivefluxwu(i,j) = 0.d0
          end do
        end do
      else if (k .eq. 1) then
        do j = 1-oly, sny+oly
          do i = 1-olx+1, snx+olx
            adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+0.5*
     $adadvectivefluxwu(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)+wfld(i-1,
     $j,k,bi,bj)*ra(i-1,j,bi,bj))
            adwfld(i-1,j,k,bi,bj) = adwfld(i-1,j,k,bi,bj)+0.5*
     $adadvectivefluxwu(i,j)*ra(i-1,j,bi,bj)*ufld(i,j,k,bi,bj)
            adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.5*
     $adadvectivefluxwu(i,j)*ra(i,j,bi,bj)*ufld(i,j,k,bi,bj)
            adadvectivefluxwu(i,j) = 0.d0
          end do
        end do
      else
        if ( .not. rigidlid) then
          do j = 1-oly, sny+oly
            do i = 1-olx+1, snx+olx
              adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)*(maskc(i,
     $j,k,bi,bj)-maskc(i,j,k-1,bi,bj))+wfld(i-1,j,k,bi,bj)*ra(i-1,j,bi,
     $bj)*(maskc(i-1,j,k,bi,bj)-maskc(i-1,j,k-1,bi,bj)))
              adwfld(i-1,j,k,bi,bj) = adwfld(i-1,j,k,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*ra(i-1,j,bi,bj)*(maskc(i-1,j,k,bi,bj)-
     $maskc(i-1,j,k-1,bi,bj))*ufld(i,j,k,bi,bj)
              adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*ra(i,j,bi,bj)*(maskc(i,j,k,bi,bj)-maskc(i,
     $j,k-1,bi,bj))*ufld(i,j,k,bi,bj)
            end do
          end do
        endif
        do j = 1-oly, sny+oly
          do i = 1-olx+1, snx+olx
            adufld(i,j,k-1,bi,bj) = adufld(i,j,k-1,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)+wfld(i-1,
     $j,k,bi,bj)*ra(i-1,j,bi,bj))
            adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)+wfld(i-1,
     $j,k,bi,bj)*ra(i-1,j,bi,bj))
            adwfld(i-1,j,k,bi,bj) = adwfld(i-1,j,k,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*ra(i-1,j,bi,bj)*(ufld(i,j,k,bi,bj)+ufld(i,
     $j,k-1,bi,bj))
            adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwu(i,j)*ra(i,j,bi,bj)*(ufld(i,j,k,bi,bj)+ufld(i,j,
     $k-1,bi,bj))
            adadvectivefluxwu(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine admom_u_bottomdrag( bi, bj, k, ufld, ke, kapparu, 
     $adufld, adke, adkapparu, adudragterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision adudragterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision ke(1-olx:snx+olx,1-oly:sny+oly)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer kp1
      double precision maskdown
      double precision rdrckp1
      double precision viscfac

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      rdrckp1 = recip_drc(kp1)
      if (k .eq. nr) then
        rdrckp1 = recip_drf(k)
      endif
      viscfac = 1.
      if ( .not. no_slip_bottom) then
        viscfac = 0.
      endif
      do j = 1-oly, sny+oly-1
        do i = 1-olx+1, snx+olx-1
          maskdown = maskw(i,j,kp1,bi,bj)
          if (k .eq. nr) then
            maskdown = 0.
          endif
          if (ke(i,j)+ke(i-1,j) .ne. 0.) then
            adke(i-1,j) = adke(i-1,j)-adudragterms(i,j)*recip_hfacw(i,j,
     $k,bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+
     $ke(i-1,j)))*(1.-maskdown)*ufld(i,j)
            adke(i,j) = adke(i,j)-adudragterms(i,j)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+ke(i-
     $1,j)))*(1.-maskdown)*ufld(i,j)
            adufld(i,j) = adufld(i,j)-adudragterms(i,j)*recip_hfacw(i,j,
     $k,bi,bj)*recip_drf(k)*bottomdragquadratic*(1.-maskdown)*sqrt(ke(i,
     $j)+ke(i-1,j))
          endif
          adkapparu(i,j,kp1) = adkapparu(i,j,kp1)-2*adudragterms(i,j)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*rkfac*rdrckp1*viscfac*(1.-
     $maskdown)*ufld(i,j)
          adufld(i,j) = adufld(i,j)-adudragterms(i,j)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*(2.*kapparu(i,j,kp1)*rkfac*rdrckp1*viscfac+
     $bottomdraglinear)*(1.-maskdown)
          adudragterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_del2u( bi, bj, k, hfacz, adufld, addel2u )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision addel2u(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision hfaczclosedn
      double precision hfaczcloseds
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (no_slip_sides) then
        do j = 0, sny+1
          do i = 0, snx+2
            hfaczcloseds = hfacw(i,j,k,bi,bj)-hfacz(i,j)
            hfaczclosedn = hfacw(i,j,k,bi,bj)-hfacz(i,j+1)
            adufld(i,j) = adufld(i,j)-2*addel2u(i,j)*recip_hfacw(i,j,k,
     $bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*(hfaczcloseds*dxv(i,j,bi,
     $bj)*recip_dyu(i,j,bi,bj)+hfaczclosedn*dxv(i,j+1,bi,bj)*
     $recip_dyu(i,j+1,bi,bj))*drf(k)*maskw(i,j,k,bi,bj)
          end do
        end do
      endif
      do j = 0, sny+1
        do i = 0, snx+2
          adfmer(i,j+1) = adfmer(i,j+1)+addel2u(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adfmer(i,j) = adfmer(i,j)-addel2u(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adfzon(i-1,j) = adfzon(i-1,j)-addel2u(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          adfzon(i,j) = adfzon(i,j)+addel2u(i,j)*recip_drf(k)*
     $recip_hfacw(i,j,k,bi,bj)*recip_raw(i,j,bi,bj)*maskw(i,j,k,bi,bj)
          addel2u(i,j) = 0.d0
        end do
      end do
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          adufld(i,j-1) = adufld(i,j-1)-adfmer(i,j)*drf(k)*hfacz(i,j)*
     $dxv(i,j,bi,bj)*recip_dyu(i,j,bi,bj)
          adufld(i,j) = adufld(i,j)+adfmer(i,j)*drf(k)*hfacz(i,j)*dxv(i,
     $j,bi,bj)*recip_dyu(i,j,bi,bj)
          adfmer(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx-1
          adufld(i+1,j) = adufld(i+1,j)+adfzon(i,j)*drf(k)*hfacc(i,j,k,
     $bi,bj)*dyf(i,j,bi,bj)*recip_dxf(i,j,bi,bj)
          adufld(i,j) = adufld(i,j)-adfzon(i,j)*drf(k)*hfacc(i,j,k,bi,
     $bj)*dyf(i,j,bi,bj)*recip_dxf(i,j,bi,bj)
          adfzon(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_metric_nh( bi, bj, k, ufld, wfld, adufld, 
     $adwfld, adumetricterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adumetricterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision wfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer kp1
      double precision wvelbottomoverride

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      wvelbottomoverride = 1.
      if (k .eq. nr) then
        wvelbottomoverride = 0.
      endif
      do j = 1-olx, sny+oly
        do i = 1-olx+1, snx+olx
          adufld(i,j) = adufld(i,j)-0.25*adumetricterms(i,j)*
     $recip_rsphere*(wvelbottomoverride*(wfld(i-1,j,kp1,bi,bj)+wfld(i,j,
     $kp1,bi,bj))+wfld(i-1,j,k,bi,bj)+wfld(i,j,k,bi,bj))*rkfac*
     $recip_horivertratio
          adwfld(i-1,j,k,bi,bj) = adwfld(i-1,j,k,bi,bj)-0.25*
     $adumetricterms(i,j)*ufld(i,j)*recip_rsphere*rkfac*
     $recip_horivertratio
          adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)-0.25*
     $adumetricterms(i,j)*ufld(i,j)*recip_rsphere*rkfac*
     $recip_horivertratio
          adwfld(i-1,j,kp1,bi,bj) = adwfld(i-1,j,kp1,bi,bj)-0.25*
     $adumetricterms(i,j)*ufld(i,j)*recip_rsphere*wvelbottomoverride*
     $rkfac*recip_horivertratio
          adwfld(i,j,kp1,bi,bj) = adwfld(i,j,kp1,bi,bj)-0.25*
     $adumetricterms(i,j)*ufld(i,j)*recip_rsphere*wvelbottomoverride*
     $rkfac*recip_horivertratio
          adumetricterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_metric_sphere( bi, bj, ufld, vfld, adufld, 
     $advfld, adumetricterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adumetricterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-olx, sny+oly-1
        do i = 1-olx+1, snx+olx
          adufld(i,j) = adufld(i,j)+0.25*adumetricterms(i,j)*
     $recip_rsphere*(vfld(i,j)+vfld(i-1,j)+vfld(i,j+1)+vfld(i-1,j+1))*
     $tanphiatu(i,j,bi,bj)
          advfld(i-1,j+1) = advfld(i-1,j+1)+0.25*adumetricterms(i,j)*
     $ufld(i,j)*recip_rsphere*tanphiatu(i,j,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)+0.25*adumetricterms(i,j)*ufld(i,
     $j)*recip_rsphere*tanphiatu(i,j,bi,bj)
          advfld(i-1,j) = advfld(i-1,j)+0.25*adumetricterms(i,j)*ufld(i,
     $j)*recip_rsphere*tanphiatu(i,j,bi,bj)
          advfld(i,j) = advfld(i,j)+0.25*adumetricterms(i,j)*ufld(i,j)*
     $recip_rsphere*tanphiatu(i,j,bi,bj)
          adumetricterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_rviscflux( bi, bj, k, ufld, kapparu, adufld, 
     $adkapparu, adrviscfluxu )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrviscfluxu(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer kp1

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adkapparu(i,j,kp1) = adkapparu(i,j,kp1)-adrviscfluxu(i,j)*
     $raw(i,j,bi,bj)*(ufld(i,j,k,bi,bj)-ufld(i,j,kp1,bi,bj))*rkfac*
     $recip_drc(kp1)*maskw(i,j,kp1,bi,bj)
          adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)-adrviscfluxu(i,j)*
     $kapparu(i,j,kp1)*raw(i,j,bi,bj)*rkfac*recip_drc(kp1)*maskw(i,j,
     $kp1,bi,bj)
          adufld(i,j,kp1,bi,bj) = adufld(i,j,kp1,bi,bj)+adrviscfluxu(i,
     $j)*kapparu(i,j,kp1)*raw(i,j,bi,bj)*rkfac*recip_drc(kp1)*maskw(i,j,
     $kp1,bi,bj)
          adrviscfluxu(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_sidedrag( bi, bj, k, hfacz, adufld, addel2u, 
     $adudragterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addel2u(1-olx:snx+olx,1-oly:sny+oly)
      double precision adudragterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      double precision hfaczclosedn
      double precision hfaczcloseds
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          hfaczcloseds = hfacw(i,j,k,bi,bj)-hfacz(i,j)
          hfaczclosedn = hfacw(i,j,k,bi,bj)-hfacz(i,j+1)
          addel2u(i,j) = addel2u(i,j)+2.*adudragterms(i,j)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*
     $(hfaczcloseds*dxv(i,j,bi,bj)*recip_dyu(i,j,bi,bj)+hfaczclosedn*
     $dxv(i,j+1,bi,bj)*recip_dyu(i,j+1,bi,bj))*drf(k)*visca4
          adufld(i,j) = adufld(i,j)-2.*adudragterms(i,j)*recip_hfacw(i,
     $j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*(hfaczcloseds*dxv(i,
     $j,bi,bj)*recip_dyu(i,j,bi,bj)+hfaczclosedn*dxv(i,j+1,bi,bj)*
     $recip_dyu(i,j+1,bi,bj))*drf(k)*viscah
          adudragterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_xviscflux( bi, bj, k, adufld, addel2u, 
     $adxviscfluxu )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addel2u(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adxviscfluxu(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          addel2u(i+1,j) = addel2u(i+1,j)+adxviscfluxu(i,j)*dyf(i,j,bi,
     $bj)*drf(k)*hfacc(i,j,k,bi,bj)*visca4*cosfacu(j,bi,bj)*recip_dxf(i,
     $j,bi,bj)
          addel2u(i,j) = addel2u(i,j)-adxviscfluxu(i,j)*dyf(i,j,bi,bj)*
     $drf(k)*hfacc(i,j,k,bi,bj)*visca4*cosfacu(j,bi,bj)*recip_dxf(i,j,
     $bi,bj)
          adufld(i+1,j) = adufld(i+1,j)-adxviscfluxu(i,j)*dyf(i,j,bi,bj)
     $*drf(k)*hfacc(i,j,k,bi,bj)*viscah*cosfacu(j,bi,bj)*recip_dxf(i,j,
     $bi,bj)
          adufld(i,j) = adufld(i,j)+adxviscfluxu(i,j)*dyf(i,j,bi,bj)*
     $drf(k)*hfacc(i,j,k,bi,bj)*viscah*cosfacu(j,bi,bj)*recip_dxf(i,j,
     $bi,bj)
          adxviscfluxu(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_u_yviscflux( bi, bj, k, hfacz, adufld, addel2u, 
     $adyviscfluxu )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addel2u(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adyviscfluxu(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx, snx+olx
          addel2u(i,j-1) = addel2u(i,j-1)-adyviscfluxu(i,j)*dxv(i,j,bi,
     $bj)*drf(k)*hfacz(i,j)*visca4*recip_dyu(i,j,bi,bj)
          addel2u(i,j) = addel2u(i,j)+adyviscfluxu(i,j)*dxv(i,j,bi,bj)*
     $drf(k)*hfacz(i,j)*visca4*recip_dyu(i,j,bi,bj)
          adufld(i,j-1) = adufld(i,j-1)+adyviscfluxu(i,j)*dxv(i,j,bi,bj)
     $*drf(k)*hfacz(i,j)*viscah*recip_dyu(i,j,bi,bj)
          adufld(i,j) = adufld(i,j)-adyviscfluxu(i,j)*dxv(i,j,bi,bj)*
     $drf(k)*hfacz(i,j)*viscah*recip_dyu(i,j,bi,bj)
          adyviscfluxu(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_adv_uv( utrans, vfld, adutrans, advfld, 
     $adadvectfluxuv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adadvectfluxuv(1-olx:snx+olx,1-oly:sny+oly)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly+1, sny+oly
        do i = 1-olx+1, snx+olx
          adutrans(i,j-1) = adutrans(i,j-1)+0.25*adadvectfluxuv(i,j)*
     $(vfld(i,j)+vfld(i-1,j))
          adutrans(i,j) = adutrans(i,j)+0.25*adadvectfluxuv(i,j)*
     $(vfld(i,j)+vfld(i-1,j))
          advfld(i-1,j) = advfld(i-1,j)+0.25*adadvectfluxuv(i,j)*
     $(utrans(i,j)+utrans(i,j-1))
          advfld(i,j) = advfld(i,j)+0.25*adadvectfluxuv(i,j)*(utrans(i,
     $j)+utrans(i,j-1))
          adadvectfluxuv(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_adv_vv( vtrans, vfld, advtrans, advfld, 
     $adadvectfluxvv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adadvectfluxvv(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          advfld(i,j+1) = advfld(i,j+1)+0.25*adadvectfluxvv(i,j)*
     $(vtrans(i,j)+vtrans(i,j+1))
          advfld(i,j) = advfld(i,j)+0.25*adadvectfluxvv(i,j)*(vtrans(i,
     $j)+vtrans(i,j+1))
          advtrans(i,j+1) = advtrans(i,j+1)+0.25*adadvectfluxvv(i,j)*
     $(vfld(i,j)+vfld(i,j+1))
          advtrans(i,j) = advtrans(i,j)+0.25*adadvectfluxvv(i,j)*
     $(vfld(i,j)+vfld(i,j+1))
          adadvectfluxvv(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_adv_wv( bi, bj, k, vfld, wfld, advfld, adwfld, 
     $adadvectivefluxwv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision adadvectivefluxwv(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (k .gt. nr .or. k .eq. 1 .and. rigidlid) then
        do j = 1-oly, sny+oly
          do i = 1-olx, snx+olx
            adadvectivefluxwv(i,j) = 0.d0
          end do
        end do
      else if (k .eq. 1) then
        do j = 1-oly+1, sny+oly
          do i = 1-olx, snx+olx
            advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+0.5*
     $adadvectivefluxwv(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)+wfld(i,j-
     $1,k,bi,bj)*ra(i,j-1,bi,bj))
            adwfld(i,j-1,k,bi,bj) = adwfld(i,j-1,k,bi,bj)+0.5*
     $adadvectivefluxwv(i,j)*ra(i,j-1,bi,bj)*vfld(i,j,k,bi,bj)
            adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.5*
     $adadvectivefluxwv(i,j)*ra(i,j,bi,bj)*vfld(i,j,k,bi,bj)
            adadvectivefluxwv(i,j) = 0.d0
          end do
        end do
      else
        if ( .not. rigidlid) then
          do j = 1-oly+1, sny+oly
            do i = 1-olx, snx+olx
              advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)*(maskc(i,
     $j,k,bi,bj)-maskc(i,j,k-1,bi,bj))+wfld(i,j-1,k,bi,bj)*ra(i,j-1,bi,
     $bj)*(maskc(i,j-1,k,bi,bj)-maskc(i,j-1,k-1,bi,bj)))
              adwfld(i,j-1,k,bi,bj) = adwfld(i,j-1,k,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*ra(i,j-1,bi,bj)*(maskc(i,j-1,k,bi,bj)-
     $maskc(i,j-1,k-1,bi,bj))*vfld(i,j,k,bi,bj)
              adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*ra(i,j,bi,bj)*(maskc(i,j,k,bi,bj)-maskc(i,
     $j,k-1,bi,bj))*vfld(i,j,k,bi,bj)
            end do
          end do
        endif
        do j = 1-oly+1, sny+oly
          do i = 1-olx, snx+olx
            advfld(i,j,k-1,bi,bj) = advfld(i,j,k-1,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)+wfld(i,j-
     $1,k,bi,bj)*ra(i,j-1,bi,bj))
            advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)+wfld(i,j-
     $1,k,bi,bj)*ra(i,j-1,bi,bj))
            adwfld(i,j-1,k,bi,bj) = adwfld(i,j-1,k,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*ra(i,j-1,bi,bj)*(vfld(i,j,k,bi,bj)+vfld(i,
     $j,k-1,bi,bj))
            adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.25*
     $adadvectivefluxwv(i,j)*ra(i,j,bi,bj)*(vfld(i,j,k,bi,bj)+vfld(i,j,
     $k-1,bi,bj))
            adadvectivefluxwv(i,j) = 0.d0
          end do
        end do
      endif

      end


      subroutine admom_v_bottomdrag( bi, bj, k, vfld, ke, kapparv, 
     $advfld, adke, adkapparv, advdragterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision advdragterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision ke(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer kp1
      double precision maskdown
      double precision rdrckp1
      double precision viscfac

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      rdrckp1 = recip_drc(kp1)
      viscfac = 1.
      if ( .not. no_slip_bottom) then
        viscfac = 0.
      endif
      if (k .eq. nr) then
        rdrckp1 = recip_drf(k)
      endif
      do j = 1-oly+1, sny+oly-1
        do i = 1-olx, snx+olx-1
          maskdown = masks(i,j,kp1,bi,bj)
          if (k .eq. nr) then
            maskdown = 0.
          endif
          if (ke(i,j)+ke(i,j-1) .ne. 0.) then
            adke(i,j-1) = adke(i,j-1)-advdragterms(i,j)*recip_hfacs(i,j,
     $k,bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+
     $ke(i,j-1)))*(1.-maskdown)*vfld(i,j)
            adke(i,j) = adke(i,j)-advdragterms(i,j)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*bottomdragquadratic*1./(2.*sqrt(ke(i,j)+ke(i,
     $j-1)))*(1.-maskdown)*vfld(i,j)
            advfld(i,j) = advfld(i,j)-advdragterms(i,j)*recip_hfacs(i,j,
     $k,bi,bj)*recip_drf(k)*bottomdragquadratic*(1.-maskdown)*sqrt(ke(i,
     $j)+ke(i,j-1))
          endif
          adkapparv(i,j,kp1) = adkapparv(i,j,kp1)-2*advdragterms(i,j)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*rkfac*rdrckp1*viscfac*(1.-
     $maskdown)*vfld(i,j)
          advfld(i,j) = advfld(i,j)-advdragterms(i,j)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*(2.*kapparv(i,j,kp1)*rkfac*rdrckp1*viscfac+
     $bottomdraglinear)*(1.-maskdown)
          advdragterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_del2v( bi, bj, k, hfacz, advfld, addel2v )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

C==============================================
C declare arguments
C==============================================
      double precision addel2v(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      double precision adfmer(1-olx:snx+olx,1-oly:sny+oly)
      double precision adfzon(1-olx:snx+olx,1-oly:sny+oly)
      double precision hfaczclosede
      double precision hfaczclosedw
      integer i
      integer ip1
      integer ip2
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfmer(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adfzon(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (no_slip_sides) then
        do j = 0, sny+2
          do i = 0, snx+1
            hfaczclosedw = hfacs(i,j,k,bi,bj)-hfacz(i,j)
            hfaczclosede = hfacs(i,j,k,bi,bj)-hfacz(i+1,j)
            advfld(i,j) = advfld(i,j)-2*addel2v(i,j)*recip_hfacs(i,j,k,
     $bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*(hfaczclosedw*dyu(i,j,bi,
     $bj)*recip_dxv(i,j,bi,bj)+hfaczclosede*dyu(i+1,j,bi,bj)*
     $recip_dxv(i+1,j,bi,bj))*drf(k)*masks(i,j,k,bi,bj)
          end do
        end do
      endif
      do j = 0, sny+2
        do i = 0, snx+1
          adfmer(i,j-1) = adfmer(i,j-1)-addel2v(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adfmer(i,j) = adfmer(i,j)+addel2v(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adfzon(i+1,j) = adfzon(i+1,j)+addel2v(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          adfzon(i,j) = adfzon(i,j)-addel2v(i,j)*recip_drf(k)*
     $recip_hfacs(i,j,k,bi,bj)*recip_ras(i,j,bi,bj)*masks(i,j,k,bi,bj)
          addel2v(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx
          advfld(i,j+1) = advfld(i,j+1)+adfmer(i,j)*drf(k)*hfacc(i,j,k,
     $bi,bj)*dxf(i,j,bi,bj)*recip_dyf(i,j,bi,bj)
          advfld(i,j) = advfld(i,j)-adfmer(i,j)*drf(k)*hfacc(i,j,k,bi,
     $bj)*dxf(i,j,bi,bj)*recip_dyf(i,j,bi,bj)
          adfmer(i,j) = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          advfld(i-1,j) = advfld(i-1,j)-adfzon(i,j)*drf(k)*hfacz(i,j)*
     $dyu(i,j,bi,bj)*recip_dxv(i,j,bi,bj)
          advfld(i,j) = advfld(i,j)+adfzon(i,j)*drf(k)*hfacz(i,j)*dyu(i,
     $j,bi,bj)*recip_dxv(i,j,bi,bj)
          adfzon(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_metric_nh( bi, bj, k, vfld, wfld, advfld, 
     $adwfld, advmetricterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advmetricterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision wfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer kp1
      double precision wvelbottomoverride

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      wvelbottomoverride = 1.
      if (k .eq. nr) then
        wvelbottomoverride = 0.
      endif
      do j = 1-olx+1, sny+oly
        do i = 1-olx, snx+olx
          advfld(i,j) = advfld(i,j)-0.25*advmetricterms(i,j)*
     $recip_rsphere*(wvelbottomoverride*(wfld(i,j,kp1,bi,bj)+wfld(i,j-1,
     $kp1,bi,bj))+wfld(i,j,k,bi,bj)+wfld(i,j-1,k,bi,bj))*rkfac*
     $recip_horivertratio
          adwfld(i,j-1,k,bi,bj) = adwfld(i,j-1,k,bi,bj)-0.25*
     $advmetricterms(i,j)*vfld(i,j)*recip_rsphere*rkfac*
     $recip_horivertratio
          adwfld(i,j-1,kp1,bi,bj) = adwfld(i,j-1,kp1,bi,bj)-0.25*
     $advmetricterms(i,j)*vfld(i,j)*recip_rsphere*wvelbottomoverride*
     $rkfac*recip_horivertratio
          adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)-0.25*
     $advmetricterms(i,j)*vfld(i,j)*recip_rsphere*rkfac*
     $recip_horivertratio
          adwfld(i,j,kp1,bi,bj) = adwfld(i,j,kp1,bi,bj)-0.25*
     $advmetricterms(i,j)*vfld(i,j)*recip_rsphere*wvelbottomoverride*
     $rkfac*recip_horivertratio
          advmetricterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_metric_sphere( bi, bj, ufld, adufld, 
     $advmetricterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advmetricterms(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-olx+1, sny+oly
        do i = 1-olx, snx+olx-1
          adufld(i+1,j-1) = adufld(i+1,j-1)-0.125*advmetricterms(i,j)*
     $recip_rsphere*(ufld(i,j)+ufld(i+1,j)+ufld(i,j-1)+ufld(i+1,j-1))*
     $tanphiatv(i,j,bi,bj)
          adufld(i,j-1) = adufld(i,j-1)-0.125*advmetricterms(i,j)*
     $recip_rsphere*(ufld(i,j)+ufld(i+1,j)+ufld(i,j-1)+ufld(i+1,j-1))*
     $tanphiatv(i,j,bi,bj)
          adufld(i+1,j) = adufld(i+1,j)-0.125*advmetricterms(i,j)*
     $recip_rsphere*(ufld(i,j)+ufld(i+1,j)+ufld(i,j-1)+ufld(i+1,j-1))*
     $tanphiatv(i,j,bi,bj)
          adufld(i,j) = adufld(i,j)-0.125*advmetricterms(i,j)*
     $recip_rsphere*(ufld(i,j)+ufld(i+1,j)+ufld(i,j-1)+ufld(i+1,j-1))*
     $tanphiatv(i,j,bi,bj)
          advmetricterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_rviscflux( bi, bj, k, vfld, kapparv, advfld, 
     $adkapparv, adrviscfluxv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrviscfluxv(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j
      integer kp1

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adkapparv(i,j,kp1) = adkapparv(i,j,kp1)-adrviscfluxv(i,j)*
     $ras(i,j,bi,bj)*(vfld(i,j,k,bi,bj)-vfld(i,j,kp1,bi,bj))*rkfac*
     $recip_drc(kp1)*masks(i,j,kp1,bi,bj)
          advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)-adrviscfluxv(i,j)*
     $kapparv(i,j,kp1)*ras(i,j,bi,bj)*rkfac*recip_drc(kp1)*masks(i,j,
     $kp1,bi,bj)
          advfld(i,j,kp1,bi,bj) = advfld(i,j,kp1,bi,bj)+adrviscfluxv(i,
     $j)*kapparv(i,j,kp1)*ras(i,j,bi,bj)*rkfac*recip_drc(kp1)*masks(i,j,
     $kp1,bi,bj)
          adrviscfluxv(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_sidedrag( bi, bj, k, hfacz, advfld, addel2v, 
     $advdragterms )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addel2v(1-olx:snx+olx,1-oly:sny+oly)
      double precision advdragterms(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      double precision hfaczclosede
      double precision hfaczclosedw
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          hfaczclosedw = hfacs(i,j,k,bi,bj)-hfacz(i,j)
          hfaczclosede = hfacs(i,j,k,bi,bj)-hfacz(i+1,j)
          addel2v(i,j) = addel2v(i,j)+4*advdragterms(i,j)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*(hfaczclosedw*dyu(i,
     $j,bi,bj)*recip_dxv(i,j,bi,bj)+hfaczclosede*dyu(i+1,j,bi,bj)*
     $recip_dxv(i+1,j,bi,bj))*drf(k)*visca4*cosfacv(j,bi,bj)
          advfld(i,j) = advfld(i,j)-2.*advdragterms(i,j)*recip_hfacs(i,
     $j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*(hfaczclosedw*dyu(i,
     $j,bi,bj)*recip_dxv(i,j,bi,bj)+hfaczclosede*dyu(i+1,j,bi,bj)*
     $recip_dxv(i+1,j,bi,bj))*drf(k)*viscah*cosfacv(j,bi,bj)
          advdragterms(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_xviscflux( bi, bj, k, hfacz, advfld, addel2v, 
     $adxviscfluxv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addel2v(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adxviscfluxv(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 1-olx+1, snx+olx
          addel2v(i-1,j) = addel2v(i-1,j)-adxviscfluxv(i,j)*dyu(i,j,bi,
     $bj)*drf(k)*hfacz(i,j)*visca4*cosfacv(j,bi,bj)*recip_dxv(i,j,bi,bj)
          addel2v(i,j) = addel2v(i,j)+adxviscfluxv(i,j)*dyu(i,j,bi,bj)*
     $drf(k)*hfacz(i,j)*visca4*cosfacv(j,bi,bj)*recip_dxv(i,j,bi,bj)
          advfld(i-1,j) = advfld(i-1,j)+adxviscfluxv(i,j)*dyu(i,j,bi,bj)
     $*drf(k)*hfacz(i,j)*viscah*cosfacv(j,bi,bj)*recip_dxv(i,j,bi,bj)
          advfld(i,j) = advfld(i,j)-adxviscfluxv(i,j)*dyu(i,j,bi,bj)*
     $drf(k)*hfacz(i,j)*viscah*cosfacv(j,bi,bj)*recip_dxv(i,j,bi,bj)
          adxviscfluxv(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_v_yviscflux( bi, bj, k, advfld, addel2v, 
     $adyviscfluxv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addel2v(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision adyviscfluxv(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          addel2v(i,j+1) = addel2v(i,j+1)+adyviscfluxv(i,j)*dxf(i,j,bi,
     $bj)*drf(k)*hfacc(i,j,k,bi,bj)*visca4*recip_dyf(i,j,bi,bj)
          addel2v(i,j) = addel2v(i,j)-adyviscfluxv(i,j)*dxf(i,j,bi,bj)*
     $drf(k)*hfacc(i,j,k,bi,bj)*visca4*recip_dyf(i,j,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)-adyviscfluxv(i,j)*dxf(i,j,bi,bj)
     $*drf(k)*hfacc(i,j,k,bi,bj)*viscah*recip_dyf(i,j,bi,bj)
          advfld(i,j) = advfld(i,j)+adyviscfluxv(i,j)*dxf(i,j,bi,bj)*
     $drf(k)*hfacc(i,j,k,bi,bj)*viscah*recip_dyf(i,j,bi,bj)
          adyviscfluxv(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vecinv( bi, bj, imin, imax, jmin, jmax, k, kup, 
     $kdown, kapparu, kapparv, adphi_hyd, adkapparu, adkapparv, adfveru,
     $ adfverv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adfveru(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfverv(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphi_hyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision kapparu(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kapparv(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kup

C==============================================
C declare local variables
C==============================================
      double precision addel2u(1-olx:snx+olx,1-oly:sny+oly)
      double precision addel2v(1-olx:snx+olx,1-oly:sny+oly)
      double precision addstar(1-olx:snx+olx,1-oly:sny+oly)
      double precision adhdiv(1-olx:snx+olx,1-oly:sny+oly)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision adpf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adstrain(1-olx:snx+olx,1-oly:sny+oly)
      double precision adtension(1-olx:snx+olx,1-oly:sny+oly)
      double precision aducf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adudiss(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advcf(1-olx:snx+olx,1-oly:sny+oly)
      double precision advdiss(1-olx:snx+olx,1-oly:sny+oly)
      double precision advf(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advort3(1-olx:snx+olx,1-oly:sny+oly)
      double precision advrf(1-olx:snx+olx,1-oly:sny+oly)
      double precision adzstar(1-olx:snx+olx,1-oly:sny+oly)
      double precision ardudrfac
      double precision ardvdrfac
      logical bottomdragterms
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j
      double precision ke(1-olx:snx+olx,1-oly:sny+oly)
      integer mythid
      double precision phxfac
      double precision phyfac
      double precision r_hfacz(1-olx:snx+olx,1-oly:sny+oly)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vort3(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare external procedures and functions
C==============================================
      logical different_multiple
      external different_multiple

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addel2u(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addel2v(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          addstar(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adhdiv(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adke(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adpf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adstrain(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adtension(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          aducf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adudiss(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adufld(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advcf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advdiss(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advfld(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advort3(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advrf(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adzstar(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      ardudrfac = vffacmom*1.
      phxfac = pffacmom*1.
      ardvdrfac = vffacmom*1.
      phyfac = pffacmom*1.
      if (no_slip_bottom .or. bottomdragquadratic .ne. 0. .or. 
     $bottomdraglinear .ne. 0.) then
        bottomdragterms =  .true. 
      else
        bottomdragterms =  .false. 
      endif
      if (staggertimestep) then
        phxfac = 0.
        phyfac = 0.
      endif
      call mom_calc_hfacz( bi,bj,k,hfacz,r_hfacz,mythid )
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          ufld(i,j) = uvel(i,j,k,bi,bj)
          vfld(i,j) = vvel(i,j,k,bi,bj)
        end do
      end do
      call mom_vi_calc_ke( bi,bj,k,ufld,vfld,ke,mythid )
      call mom_vi_calc_relvort3( bi,bj,k,ufld,vfld,hfacz,vort3,mythid )
      if (momadvection) then
        do j = jmin, jmax
          do i = imin, imax
            advcf(i,j) = advcf(i,j)+adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
            adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
          end do
        end do
        call admom_vi_v_grad_ke( bi,bj,k,adke,advcf )
        do j = jmin, jmax
          do i = imin, imax
            aducf(i,j) = aducf(i,j)+adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
            adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
          end do
        end do
        call admom_vi_u_grad_ke( bi,bj,k,adke,aducf )
        do j = jmin, jmax
          do i = imin, imax
            advcf(i,j) = advcf(i,j)+adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
            adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
          end do
        end do
        call admom_vi_v_vertshear( bi,bj,k,vvel,wvel,advvel,adwvel,
     $advcf )
        do j = jmin, jmax
          do i = imin, imax
            aducf(i,j) = aducf(i,j)+adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
            adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
          end do
        end do
        call admom_vi_u_vertshear( bi,bj,k,uvel,wvel,aduvel,adwvel,
     $aducf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          advcf(i,j) = advcf(i,j)+adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
        end do
      end do
      call admom_vi_v_coriolis( bi,bj,k,ufld,vort3,r_hfacz,adufld,
     $advort3,advcf )
      do j = jmin, jmax
        do i = imin, imax
          aducf(i,j) = aducf(i,j)+adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
        end do
      end do
      call admom_vi_u_coriolis( bi,bj,k,vfld,vort3,r_hfacz,advfld,
     $advort3,aducf )
      do j = jmin, jmax
        do i = imin, imax
          advcf(i,j) = advcf(i,j)+adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
          aducf(i,j) = aducf(i,j)+adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
        end do
      end do
      call admom_vi_coriolis( bi,bj,k,r_hfacz,adufld,advfld,aducf,advcf 
     $)
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)*masks(i,j,k,bi,bj)
        end do
      end do
      if (momforcing) then
        call adexternal_forcing_v( imin,imax,jmin,jmax,bi,bj,k )
      endif
      if (momviscosity .and. bottomdragterms) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgv(i,j,k,bi,bj)
          end do
        end do
        call admom_v_bottomdrag( bi,bj,k,vfld,ke,kapparv,advfld,adke,
     $adkapparv,advf )
      endif
      if (momviscosity .and. no_slip_sides) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgv(i,j,k,bi,bj)
          end do
        end do
        call admom_v_sidedrag( bi,bj,k,hfacz,advfld,addel2v,advf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adfverv(i,j,kdown) = adfverv(i,j,kdown)+adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*rkfac
          adfverv(i,j,kup) = adfverv(i,j,kup)-adgv(i,j,k,bi,bj)*
     $recip_hfacs(i,j,k,bi,bj)*recip_drf(k)*recip_ras(i,j,bi,bj)*rkfac
          adpf(i,j) = adpf(i,j)+adgv(i,j,k,bi,bj)*phyfac
          advdiss(i,j) = advdiss(i,j)+adgv(i,j,k,bi,bj)
          adgv(i,j,k,bi,bj) = 0.d0
        end do
      end do
      if (mompressureforcing) then
        do j = jmin, jmax
          do i = imin, imax
            adphi_hyd(i,j-1,k) = adphi_hyd(i,j-1,k)+adpf(i,j)*
     $recip_dyc(i,j,bi,bj)
            adphi_hyd(i,j,k) = adphi_hyd(i,j,k)-adpf(i,j)*recip_dyc(i,j,
     $bi,bj)
            adpf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          advrf(i,j) = advrf(i,j)+adfverv(i,j,kdown)*ardvdrfac
          adfverv(i,j,kdown) = 0.d0
        end do
      end do
      if (momviscosity .and. ( .not. implicitviscosity)) then
        call admom_v_rviscflux( bi,bj,k,vvel,kapparv,advvel,adkapparv,
     $advrf )
      endif
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)*maskw(i,j,k,bi,bj)
        end do
      end do
      if (momforcing) then
        call adexternal_forcing_u( imin,imax,jmin,jmax,bi,bj,k )
      endif
      if (momviscosity .and. bottomdragterms) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgu(i,j,k,bi,bj)
          end do
        end do
        call admom_u_bottomdrag( bi,bj,k,ufld,ke,kapparu,adufld,adke,
     $adkapparu,advf )
      endif
      if (momviscosity .and. no_slip_sides) then
        do j = jmin, jmax
          do i = imin, imax
            advf(i,j) = advf(i,j)+adgu(i,j,k,bi,bj)
          end do
        end do
        call admom_u_sidedrag( bi,bj,k,hfacz,adufld,addel2u,advf )
      endif
      do j = 2-oly, sny+oly-1
        do i = 2-olx, snx+olx-1
          adfveru(i,j,kdown) = adfveru(i,j,kdown)+adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*rkfac
          adfveru(i,j,kup) = adfveru(i,j,kup)-adgu(i,j,k,bi,bj)*
     $recip_hfacw(i,j,k,bi,bj)*recip_drf(k)*recip_raw(i,j,bi,bj)*rkfac
          adpf(i,j) = adpf(i,j)+adgu(i,j,k,bi,bj)*phxfac
          adudiss(i,j) = adudiss(i,j)+adgu(i,j,k,bi,bj)
          adgu(i,j,k,bi,bj) = 0.d0
        end do
      end do
      if (mompressureforcing) then
        do j = 1-olx, sny+oly
          do i = 2-olx, snx+olx
            adphi_hyd(i-1,j,k) = adphi_hyd(i-1,j,k)+adpf(i,j)*
     $recip_dxc(i,j,bi,bj)
            adphi_hyd(i,j,k) = adphi_hyd(i,j,k)-adpf(i,j)*recip_dxc(i,j,
     $bi,bj)
            adpf(i,j) = 0.d0
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          advrf(i,j) = advrf(i,j)+adfveru(i,j,kdown)*ardudrfac
          adfveru(i,j,kdown) = 0.d0
        end do
      end do
      if (momviscosity .and. ( .not. implicitviscosity)) then
        call admom_u_rviscflux( bi,bj,k,uvel,kapparu,aduvel,adkapparu,
     $advrf )
      endif
      if (momviscosity) then
        if (viscastrain .ne. 0. .or. viscatension .ne. 0.) then
          call admom_hdissip( bi,bj,viscatension,viscastrain,adtension,
     $adstrain,adudiss,advdiss )
          call admom_calc_strain( bi,bj,hfacz,adufld,advfld,adstrain )
          call admom_calc_tension( bi,bj,adufld,advfld,adtension )
        endif
        if (viscah .ne. 0. .or. visca4 .ne. 0.) then
          call admom_vi_hdissip( bi,bj,k,hfacz,adhdiv,advort3,addstar,
     $adzstar,adudiss,advdiss )
        endif
        if (visca4 .ne. 0.) then
          call admom_vi_calc_relvort3( bi,bj,hfacz,addel2u,addel2v,
     $adzstar )
          call admom_vi_calc_hdiv( bi,bj,k,addel2u,addel2v,addstar )
          call admom_vi_del2uv( bi,bj,k,hfacz,adhdiv,advort3,addel2u,
     $addel2v )
        endif
      endif
      call admom_vi_calc_relvort3( bi,bj,hfacz,adufld,advfld,advort3 )
      call admom_vi_calc_hdiv( bi,bj,k,adufld,advfld,adhdiv )
      call admom_vi_calc_ke( ufld,vfld,adufld,advfld,adke )
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+advfld(i,j)
          advfld(i,j) = 0.d0
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adufld(i,j)
          adufld(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vi_calc_hdiv( bi, bj, k, adufld, advfld, adhdiv )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adhdiv(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adufld(i+1,j) = adufld(i+1,j)+adhdiv(i,j)*dyg(i+1,j,bi,bj)*
     $hfacw(i+1,j,k,bi,bj)*recip_ra(i,j,bi,bj)*recip_hfacc(i,j,k,bi,bj)
          adufld(i,j) = adufld(i,j)-adhdiv(i,j)*dyg(i,j,bi,bj)*hfacw(i,
     $j,k,bi,bj)*recip_ra(i,j,bi,bj)*recip_hfacc(i,j,k,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)+adhdiv(i,j)*dxg(i,j+1,bi,bj)*
     $hfacs(i,j+1,k,bi,bj)*recip_ra(i,j,bi,bj)*recip_hfacc(i,j,k,bi,bj)
          advfld(i,j) = advfld(i,j)-adhdiv(i,j)*dxg(i,j,bi,bj)*hfacs(i,
     $j,k,bi,bj)*recip_ra(i,j,bi,bj)*recip_hfacc(i,j,k,bi,bj)
          adhdiv(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vi_calc_ke( ufld, vfld, adufld, advfld, adke )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
C==============================================
C declare arguments
C==============================================
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly-1
        do i = 1-olx, snx+olx-1
          adufld(i+1,j) = adufld(i+1,j)+0.5*adke(i,j)*ufld(i+1,j)
          adufld(i,j) = adufld(i,j)+0.5*adke(i,j)*ufld(i,j)
          advfld(i,j+1) = advfld(i,j+1)+0.5*adke(i,j)*vfld(i,j+1)
          advfld(i,j) = advfld(i,j)+0.5*adke(i,j)*vfld(i,j)
          adke(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vi_calc_relvort3( bi, bj, hfacz, adufld, advfld, 
     $advort3 )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      logical eebooterror
      logical eeenderror
      logical fatalerror
      logical usecubedsphereexchange
      common /eeparams_l/ eebooterror, fatalerror, eeenderror, 
     $usecubedsphereexchange

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advort3(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (usecubedsphereexchange) then
        i = snx+1
        j = sny+1
        adufld(i,j-1) = adufld(i,j-1)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j-1,bi,bj)
        adufld(i,j) = adufld(i,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j,bi,bj)
        advfld(i-1,j) = advfld(i-1,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dyc(i-1,j,bi,bj)
        advort3(i,j) = 0.d0
        i = 1
        j = sny+1
        adufld(i,j-1) = adufld(i,j-1)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j-1,bi,bj)
        adufld(i,j) = adufld(i,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j,bi,bj)
        advfld(i,j) = advfld(i,j)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dyc(i,j,bi,bj)
        advort3(i,j) = 0.d0
        i = snx+1
        j = 1
        adufld(i,j-1) = adufld(i,j-1)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j-1,bi,bj)
        adufld(i,j) = adufld(i,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j,bi,bj)
        advfld(i-1,j) = advfld(i-1,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dyc(i-1,j,bi,bj)
        advort3(i,j) = 0.d0
        i = 1
        j = 1
        adufld(i,j-1) = adufld(i,j-1)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j-1,bi,bj)
        adufld(i,j) = adufld(i,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j,bi,bj)
        advfld(i,j) = advfld(i,j)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dyc(i,j,bi,bj)
        advort3(i,j) = 0.d0
      endif
      do j = 2-oly, sny+oly
        do i = 2-olx, snx+olx
          if (hfacz(i,j) .ne. 0.) then
          else
            advort3(i,j) = 0.d0
          endif
          adufld(i,j-1) = adufld(i,j-1)+advort3(i,j)*recip_raz(i,j,bi,
     $bj)*dxc(i,j-1,bi,bj)
          adufld(i,j) = adufld(i,j)-advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dxc(i,j,bi,bj)
          advfld(i-1,j) = advfld(i-1,j)-advort3(i,j)*recip_raz(i,j,bi,
     $bj)*dyc(i-1,j,bi,bj)
          advfld(i,j) = advfld(i,j)+advort3(i,j)*recip_raz(i,j,bi,bj)*
     $dyc(i,j,bi,bj)
          advort3(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vi_coriolis( bi, bj, k, r_hfacz, adufld, advfld, 
     $aducoriolisterm, advcoriolisterm )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision aducoriolisterm(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advcoriolisterm(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision r_hfacz(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adubarxy
      double precision advbarxy
      integer i
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adubarxy = 0.d0
      advbarxy = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 2-oly, sny+oly
        adubarxy = 0.d0
        do i = 1-olx, snx+olx-1
          adubarxy = 0.d0
          adubarxy = adubarxy-0.5*advcoriolisterm(i,j)*(fcorig(i,j,bi,
     $bj)*r_hfacz(i,j)+fcorig(i+1,j,bi,bj)*r_hfacz(i+1,j))*recip_dyc(i,
     $j,bi,bj)*masks(i,j,k,bi,bj)
          advcoriolisterm(i,j) = 0.d0
          adufld(i+1,j-1) = adufld(i+1,j-1)+0.25*adubarxy*dyg(i+1,j-1,
     $bi,bj)*hfacw(i+1,j-1,k,bi,bj)
          adufld(i,j-1) = adufld(i,j-1)+0.25*adubarxy*dyg(i,j-1,bi,bj)*
     $hfacw(i,j-1,k,bi,bj)
          adufld(i+1,j) = adufld(i+1,j)+0.25*adubarxy*dyg(i+1,j,bi,bj)*
     $hfacw(i+1,j,k,bi,bj)
          adufld(i,j) = adufld(i,j)+0.25*adubarxy*dyg(i,j,bi,bj)*
     $hfacw(i,j,k,bi,bj)
          adubarxy = 0.d0
        end do
      end do
      do j = 1-oly, sny+oly-1
        advbarxy = 0.d0
        do i = 2-olx, snx+olx
          advbarxy = 0.d0
          advbarxy = advbarxy+0.5*aducoriolisterm(i,j)*(fcorig(i,j,bi,
     $bj)*r_hfacz(i,j)+fcorig(i,j+1,bi,bj)*r_hfacz(i,j+1))*recip_dxc(i,
     $j,bi,bj)*maskw(i,j,k,bi,bj)
          aducoriolisterm(i,j) = 0.d0
          advfld(i-1,j+1) = advfld(i-1,j+1)+0.25*advbarxy*dxg(i-1,j+1,
     $bi,bj)*hfacs(i-1,j+1,k,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)+0.25*advbarxy*dxg(i,j+1,bi,bj)*
     $hfacs(i,j+1,k,bi,bj)
          advfld(i-1,j) = advfld(i-1,j)+0.25*advbarxy*dxg(i-1,j,bi,bj)*
     $hfacs(i-1,j,k,bi,bj)
          advfld(i,j) = advfld(i,j)+0.25*advbarxy*dxg(i,j,bi,bj)*
     $hfacs(i,j,k,bi,bj)
          advbarxy = 0.d0
        end do
      end do

      end


      subroutine admom_vi_del2uv( bi, bj, k, hfacz, adhdiv, advort3, 
     $addel2u, addel2v )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addel2u(1-olx:snx+olx,1-oly:sny+oly)
      double precision addel2v(1-olx:snx+olx,1-oly:sny+oly)
      double precision adhdiv(1-olx:snx+olx,1-oly:sny+oly)
      double precision advort3(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      double precision addij
      double precision addim
      double precision addmj
      double precision adzij
      double precision adzip
      double precision adzpj
      integer i
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addij = 0.d0
      addim = 0.d0
      addmj = 0.d0
      adzij = 0.d0
      adzip = 0.d0
      adzpj = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 2-oly, sny+oly-1
        addij = 0.d0
        addim = 0.d0
        addmj = 0.d0
        adzij = 0.d0
        adzip = 0.d0
        adzpj = 0.d0
        do i = 2-olx, snx+olx-1
          addij = 0.d0
          addim = 0.d0
          addmj = 0.d0
          adzij = 0.d0
          adzip = 0.d0
          adzpj = 0.d0
          addij = addij+addel2v(i,j)*recip_dyc(i,j,bi,bj)
          addim = addim-addel2v(i,j)*recip_dyc(i,j,bi,bj)
          adzij = adzij-addel2v(i,j)*recip_hfacs(i,j,k,bi,bj)*
     $recip_dxg(i,j,bi,bj)
          adzpj = adzpj+addel2v(i,j)*recip_hfacs(i,j,k,bi,bj)*
     $recip_dxg(i,j,bi,bj)
          addel2v(i,j) = 0.d0
          addij = addij+addel2u(i,j)*recip_dxc(i,j,bi,bj)
          addmj = addmj-addel2u(i,j)*recip_dxc(i,j,bi,bj)
          adzij = adzij+addel2u(i,j)*recip_hfacw(i,j,k,bi,bj)*
     $recip_dyg(i,j,bi,bj)
          adzip = adzip-addel2u(i,j)*recip_hfacw(i,j,k,bi,bj)*
     $recip_dyg(i,j,bi,bj)
          addel2u(i,j) = 0.d0
          advort3(i+1,j) = advort3(i+1,j)+adzpj*hfacz(i+1,j)
          adzpj = 0.d0
          advort3(i,j) = advort3(i,j)+adzij*hfacz(i,j)
          adzij = 0.d0
          advort3(i,j+1) = advort3(i,j+1)+adzip*hfacz(i,j+1)
          adzip = 0.d0
          adhdiv(i-1,j) = adhdiv(i-1,j)+addmj
          addmj = 0.d0
          adhdiv(i,j) = adhdiv(i,j)+addij
          addij = 0.d0
          adhdiv(i,j-1) = adhdiv(i,j-1)+addim
          addim = 0.d0
        end do
      end do

      end


      subroutine admom_vi_hdissip( bi, bj, k, hfacz, adhdiv, advort3, 
     $addstar, adzstar, adudissip, advdissip )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addstar(1-olx:snx+olx,1-oly:sny+oly)
      double precision adhdiv(1-olx:snx+olx,1-oly:sny+oly)
      double precision adudissip(1-olx:snx+olx,1-oly:sny+oly)
      double precision advdissip(1-olx:snx+olx,1-oly:sny+oly)
      double precision advort3(1-olx:snx+olx,1-oly:sny+oly)
      double precision adzstar(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      double precision hfacz(1-olx:snx+olx,1-oly:sny+oly)
      integer k

C==============================================
C declare local variables
C==============================================
      double precision addij
      double precision addim
      double precision addmj
      double precision adud2
      double precision adud4
      double precision advd2
      double precision advd4
      double precision adzij
      double precision adzip
      double precision adzpj
      integer i
      integer j

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      addij = 0.d0
      addim = 0.d0
      addmj = 0.d0
      adud2 = 0.d0
      adud4 = 0.d0
      advd2 = 0.d0
      advd4 = 0.d0
      adzij = 0.d0
      adzip = 0.d0
      adzpj = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 2-oly, sny+oly-1
        addij = 0.d0
        addim = 0.d0
        addmj = 0.d0
        adud2 = 0.d0
        adud4 = 0.d0
        advd2 = 0.d0
        advd4 = 0.d0
        adzij = 0.d0
        adzip = 0.d0
        adzpj = 0.d0
        do i = 2-olx, snx+olx-1
          addij = 0.d0
          addim = 0.d0
          addmj = 0.d0
          adud2 = 0.d0
          adud4 = 0.d0
          advd2 = 0.d0
          advd4 = 0.d0
          adzij = 0.d0
          adzip = 0.d0
          adzpj = 0.d0
          advd2 = advd2+advdissip(i,j)
          advd4 = advd4-advdissip(i,j)
          advdissip(i,j) = 0.d0
          adud2 = adud2+adudissip(i,j)
          adud4 = adud4-adudissip(i,j)
          adudissip(i,j) = 0.d0
          addij = addij+advd4*recip_ras(i,j,bi,bj)*visca4
          addim = addim-advd4*recip_ras(i,j,bi,bj)*visca4
          adzij = adzij-advd4*recip_ras(i,j,bi,bj)*recip_hfacs(i,j,k,bi,
     $bj)*visca4*cosfacv(j,bi,bj)
          adzpj = adzpj+advd4*recip_ras(i,j,bi,bj)*recip_hfacs(i,j,k,bi,
     $bj)*visca4*cosfacv(j,bi,bj)
          advd4 = 0.d0
          addij = addij+adud4*recip_raw(i,j,bi,bj)*visca4*cosfacu(j,bi,
     $bj)
          addmj = addmj-adud4*recip_raw(i,j,bi,bj)*visca4*cosfacu(j,bi,
     $bj)
          adzij = adzij+adud4*recip_raw(i,j,bi,bj)*recip_hfacw(i,j,k,bi,
     $bj)*visca4
          adzip = adzip-adud4*recip_raw(i,j,bi,bj)*recip_hfacw(i,j,k,bi,
     $bj)*visca4
          adud4 = 0.d0
          adzstar(i+1,j) = adzstar(i+1,j)+adzpj*dxv(i+1,j,bi,bj)*
     $hfacz(i+1,j)
          adzpj = 0.d0
          adzstar(i,j) = adzstar(i,j)+adzij*dxv(i,j,bi,bj)*hfacz(i,j)
          adzij = 0.d0
          adzstar(i,j+1) = adzstar(i,j+1)+adzip*dxv(i,j+1,bi,bj)*
     $hfacz(i,j+1)
          adzip = 0.d0
          addstar(i-1,j) = addstar(i-1,j)+addmj*dyf(i-1,j,bi,bj)
          addmj = 0.d0
          addstar(i,j) = addstar(i,j)+addij*dyf(i,j,bi,bj)
          addij = 0.d0
          addstar(i,j-1) = addstar(i,j-1)+addim*dyf(i,j-1,bi,bj)
          addim = 0.d0
          addij = addij+advd2*viscah*recip_dyc(i,j,bi,bj)
          addim = addim-advd2*viscah*recip_dyc(i,j,bi,bj)
          adzij = adzij-advd2*viscah*recip_hfacs(i,j,k,bi,bj)*
     $recip_dxg(i,j,bi,bj)*cosfacv(j,bi,bj)
          adzpj = adzpj+advd2*viscah*recip_hfacs(i,j,k,bi,bj)*
     $recip_dxg(i,j,bi,bj)*cosfacv(j,bi,bj)
          advd2 = 0.d0
          addij = addij+adud2*viscah*cosfacu(j,bi,bj)*recip_dxc(i,j,bi,
     $bj)
          addmj = addmj-adud2*viscah*cosfacu(j,bi,bj)*recip_dxc(i,j,bi,
     $bj)
          adzij = adzij+adud2*viscah*recip_hfacw(i,j,k,bi,bj)*
     $recip_dyg(i,j,bi,bj)
          adzip = adzip-adud2*viscah*recip_hfacw(i,j,k,bi,bj)*
     $recip_dyg(i,j,bi,bj)
          adud2 = 0.d0
          advort3(i+1,j) = advort3(i+1,j)+adzpj*hfacz(i+1,j)
          adzpj = 0.d0
          advort3(i,j) = advort3(i,j)+adzij*hfacz(i,j)
          adzij = 0.d0
          advort3(i,j+1) = advort3(i,j+1)+adzip*hfacz(i,j+1)
          adzip = 0.d0
          adhdiv(i-1,j) = adhdiv(i-1,j)+addmj
          addmj = 0.d0
          adhdiv(i,j) = adhdiv(i,j)+addij
          addij = 0.d0
          adhdiv(i,j-1) = adhdiv(i,j-1)+addim
          addim = 0.d0
        end do
      end do

      end


      subroutine admom_vi_u_coriolis( bi, bj, k, vfld, omega3, r_hfacz, 
     $advfld, adomega3, aducoriolisterm )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adomega3(1-olx:snx+olx,1-oly:sny+oly)
      double precision aducoriolisterm(1-olx:snx+olx,1-oly:sny+oly)
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision omega3(1-olx:snx+olx,1-oly:sny+oly)
      double precision r_hfacz(1-olx:snx+olx,1-oly:sny+oly)
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision advbarxy
      double precision advort3u
      integer i
      integer j
      logical upwindvort3
      double precision vbarxy
      double precision vort3u

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      advbarxy = 0.d0
      advort3u = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      upwindvort3 =  .false. 
      do j = sny+oly-1, 1-oly, -1
        do i = snx+olx, 2-olx, -1
          vbarxy = 0.25*(vfld(i,j)*dxg(i,j,bi,bj)*hfacs(i,j,k,bi,bj)+
     $vfld(i,j+1)*dxg(i,j+1,bi,bj)*hfacs(i,j+1,k,bi,bj)+vfld(i-1,j)*
     $dxg(i-1,j,bi,bj)*hfacs(i-1,j,k,bi,bj)+vfld(i-1,j+1)*dxg(i-1,j+1,
     $bi,bj)*hfacs(i-1,j+1,k,bi,bj))
          if (upwindvort3) then
            if (vbarxy .gt. 0.) then
              vort3u = omega3(i,j)*r_hfacz(i,j)
            else
              vort3u = omega3(i,j+1)*r_hfacz(i,j+1)
            endif
          else
            vort3u = 0.5*(omega3(i,j)*r_hfacz(i,j)+omega3(i,j+1)*
     $r_hfacz(i,j+1))
          endif
          advbarxy = advbarxy+aducoriolisterm(i,j)*vort3u*recip_dxc(i,j,
     $bi,bj)*maskw(i,j,k,bi,bj)
          advort3u = advort3u+aducoriolisterm(i,j)*vbarxy*recip_dxc(i,j,
     $bi,bj)*maskw(i,j,k,bi,bj)
          aducoriolisterm(i,j) = 0.d0
          if (upwindvort3) then
            if (vbarxy .gt. 0.) then
              adomega3(i,j) = adomega3(i,j)+advort3u*r_hfacz(i,j)
              advort3u = 0.d0
            else
              adomega3(i,j+1) = adomega3(i,j+1)+advort3u*r_hfacz(i,j+1)
              advort3u = 0.d0
            endif
          else
            adomega3(i,j+1) = adomega3(i,j+1)+0.5*advort3u*r_hfacz(i,j+
     $1)
            adomega3(i,j) = adomega3(i,j)+0.5*advort3u*r_hfacz(i,j)
            advort3u = 0.d0
          endif
          advfld(i-1,j+1) = advfld(i-1,j+1)+0.25*advbarxy*dxg(i-1,j+1,
     $bi,bj)*hfacs(i-1,j+1,k,bi,bj)
          advfld(i,j+1) = advfld(i,j+1)+0.25*advbarxy*dxg(i,j+1,bi,bj)*
     $hfacs(i,j+1,k,bi,bj)
          advfld(i-1,j) = advfld(i-1,j)+0.25*advbarxy*dxg(i-1,j,bi,bj)*
     $hfacs(i-1,j,k,bi,bj)
          advfld(i,j) = advfld(i,j)+0.25*advbarxy*dxg(i,j,bi,bj)*
     $hfacs(i,j,k,bi,bj)
          advbarxy = 0.d0
        end do
      end do

      end


      subroutine admom_vi_u_grad_ke( bi, bj, k, adke, addkedx )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addkedx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 1-oly, sny+oly
        do i = 2-olx, snx+olx
          adke(i-1,j) = adke(i-1,j)+addkedx(i,j)*recip_dxc(i,j,bi,bj)*
     $maskw(i,j,k,bi,bj)
          adke(i,j) = adke(i,j)-addkedx(i,j)*recip_dxc(i,j,bi,bj)*
     $maskw(i,j,k,bi,bj)
          addkedx(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vi_u_vertshear( bi, bj, k, ufld, wfld, adufld, 
     $adwfld, adushearterm )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adushearterm(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision aduzm
      double precision aduzp
      double precision adwbarxm
      double precision adwbarxp
      integer i
      integer j
      integer km1
      integer kp1
      double precision mask_km1
      double precision mask_kp1
      double precision uzm
      double precision uzp
      double precision wbarxm
      double precision wbarxp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      aduzm = 0.d0
      aduzp = 0.d0
      adwbarxm = 0.d0
      adwbarxp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      mask_kp1 = 1.
      if (k .eq. nr) then
        mask_kp1 = 0.
      endif
      km1 = max(k-1,1)
      mask_km1 = 1.
      if (k .eq. 1) then
        mask_km1 = 0.
      endif
      do j = 1-oly, sny+oly
        aduzm = 0.d0
        aduzp = 0.d0
        adwbarxm = 0.d0
        adwbarxp = 0.d0
        do i = 2-olx, snx+olx
          aduzm = 0.d0
          aduzp = 0.d0
          adwbarxm = 0.d0
          adwbarxp = 0.d0
          wbarxm = 0.5*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)*maskc(i,j,km1,
     $bi,bj)+wfld(i-1,j,k,bi,bj)*ra(i-1,j,bi,bj)*maskc(i-1,j,km1,bi,bj))
     $*mask_km1
          wbarxp = 0.5*(wfld(i,j,kp1,bi,bj)*ra(i,j,bi,bj)+wfld(i-1,j,
     $kp1,bi,bj)*ra(i-1,j,bi,bj))*mask_kp1
          uzm = mask_km1*ufld(i,j,km1,bi,bj)-ufld(i,j,k,bi,bj)
          uzp = ufld(i,j,k,bi,bj)-mask_kp1*ufld(i,j,kp1,bi,bj)
          aduzm = aduzm-0.5*adushearterm(i,j)*wbarxm*recip_raw(i,j,bi,
     $bj)*recip_hfacw(i,j,k,bi,bj)*recip_drf(k)
          aduzp = aduzp-0.5*adushearterm(i,j)*wbarxp*recip_raw(i,j,bi,
     $bj)*recip_hfacw(i,j,k,bi,bj)*recip_drf(k)
          adwbarxm = adwbarxm-0.5*adushearterm(i,j)*uzm*recip_raw(i,j,
     $bi,bj)*recip_hfacw(i,j,k,bi,bj)*recip_drf(k)
          adwbarxp = adwbarxp-0.5*adushearterm(i,j)*uzp*recip_raw(i,j,
     $bi,bj)*recip_hfacw(i,j,k,bi,bj)*recip_drf(k)
          adushearterm(i,j) = 0.d0
          adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)+aduzp
          adufld(i,j,kp1,bi,bj) = adufld(i,j,kp1,bi,bj)-aduzp*mask_kp1
          aduzp = 0.d0
          adufld(i,j,k,bi,bj) = adufld(i,j,k,bi,bj)-aduzm
          adufld(i,j,km1,bi,bj) = adufld(i,j,km1,bi,bj)+aduzm*mask_km1
          aduzm = 0.d0
          adwfld(i-1,j,kp1,bi,bj) = adwfld(i-1,j,kp1,bi,bj)+0.5*
     $adwbarxp*ra(i-1,j,bi,bj)*mask_kp1
          adwfld(i,j,kp1,bi,bj) = adwfld(i,j,kp1,bi,bj)+0.5*adwbarxp*
     $ra(i,j,bi,bj)*mask_kp1
          adwbarxp = 0.d0
          adwfld(i-1,j,k,bi,bj) = adwfld(i-1,j,k,bi,bj)+0.5*adwbarxm*
     $ra(i-1,j,bi,bj)*maskc(i-1,j,km1,bi,bj)*mask_km1
          adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.5*adwbarxm*ra(i,j,
     $bi,bj)*maskc(i,j,km1,bi,bj)*mask_km1
          adwbarxm = 0.d0
        end do
      end do

      end


      subroutine admom_vi_v_coriolis( bi, bj, k, ufld, omega3, r_hfacz, 
     $adufld, adomega3, advcoriolisterm )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision adomega3(1-olx:snx+olx,1-oly:sny+oly)
      double precision adufld(1-olx:snx+olx,1-oly:sny+oly)
      double precision advcoriolisterm(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k
      double precision omega3(1-olx:snx+olx,1-oly:sny+oly)
      double precision r_hfacz(1-olx:snx+olx,1-oly:sny+oly)
      double precision ufld(1-olx:snx+olx,1-oly:sny+oly)

C==============================================
C declare local variables
C==============================================
      double precision adubarxy
      double precision advort3v
      integer i
      integer j
      double precision ubarxy
      logical upwindvort3
      double precision vort3v

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adubarxy = 0.d0
      advort3v = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      upwindvort3 =  .false. 
      do j = sny+oly, 2-oly, -1
        do i = snx+olx-1, 1-olx, -1
          ubarxy = 0.25*(ufld(i,j)*dyg(i,j,bi,bj)*hfacw(i,j,k,bi,bj)+
     $ufld(i+1,j)*dyg(i+1,j,bi,bj)*hfacw(i+1,j,k,bi,bj)+ufld(i,j-1)*
     $dyg(i,j-1,bi,bj)*hfacw(i,j-1,k,bi,bj)+ufld(i+1,j-1)*dyg(i+1,j-1,
     $bi,bj)*hfacw(i+1,j-1,k,bi,bj))
          if (upwindvort3) then
            if (ubarxy .gt. 0.) then
              vort3v = omega3(i,j)*r_hfacz(i,j)
            else
              vort3v = omega3(i+1,j)*r_hfacz(i+1,j)
            endif
          else
            vort3v = 0.5*(omega3(i,j)*r_hfacz(i,j)+omega3(i+1,j)*
     $r_hfacz(i+1,j))
          endif
          adubarxy = adubarxy-advcoriolisterm(i,j)*vort3v*recip_dyc(i,j,
     $bi,bj)*masks(i,j,k,bi,bj)
          advort3v = advort3v-advcoriolisterm(i,j)*ubarxy*recip_dyc(i,j,
     $bi,bj)*masks(i,j,k,bi,bj)
          advcoriolisterm(i,j) = 0.d0
          if (upwindvort3) then
            if (ubarxy .gt. 0.) then
              adomega3(i,j) = adomega3(i,j)+advort3v*r_hfacz(i,j)
              advort3v = 0.d0
            else
              adomega3(i+1,j) = adomega3(i+1,j)+advort3v*r_hfacz(i+1,j)
              advort3v = 0.d0
            endif
          else
            adomega3(i+1,j) = adomega3(i+1,j)+0.5*advort3v*r_hfacz(i+1,
     $j)
            adomega3(i,j) = adomega3(i,j)+0.5*advort3v*r_hfacz(i,j)
            advort3v = 0.d0
          endif
          adufld(i+1,j-1) = adufld(i+1,j-1)+0.25*adubarxy*dyg(i+1,j-1,
     $bi,bj)*hfacw(i+1,j-1,k,bi,bj)
          adufld(i,j-1) = adufld(i,j-1)+0.25*adubarxy*dyg(i,j-1,bi,bj)*
     $hfacw(i,j-1,k,bi,bj)
          adufld(i+1,j) = adufld(i+1,j)+0.25*adubarxy*dyg(i+1,j,bi,bj)*
     $hfacw(i+1,j,k,bi,bj)
          adufld(i,j) = adufld(i,j)+0.25*adubarxy*dyg(i,j,bi,bj)*
     $hfacw(i,j,k,bi,bj)
          adubarxy = 0.d0
        end do
      end do

      end


      subroutine admom_vi_v_grad_ke( bi, bj, k, adke, addkedy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision addkedy(1-olx:snx+olx,1-oly:sny+oly)
      double precision adke(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = 2-oly, sny+oly
        do i = 1-olx, snx+olx
          adke(i,j-1) = adke(i,j-1)+addkedy(i,j)*recip_dyc(i,j,bi,bj)*
     $masks(i,j,k,bi,bj)
          adke(i,j) = adke(i,j)-addkedy(i,j)*recip_dyc(i,j,bi,bj)*
     $masks(i,j,k,bi,bj)
          addkedy(i,j) = 0.d0
        end do
      end do

      end


      subroutine admom_vi_v_vertshear( bi, bj, k, vfld, wfld, advfld, 
     $adwfld, advshearterm )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

C==============================================
C declare arguments
C==============================================
      double precision advfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advshearterm(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer k
      double precision vfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wfld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)

C==============================================
C declare local variables
C==============================================
      double precision advzm
      double precision advzp
      double precision adwbarym
      double precision adwbaryp
      integer i
      integer j
      integer km1
      integer kp1
      double precision mask_km1
      double precision mask_kp1
      double precision vzm
      double precision vzp
      double precision wbarym
      double precision wbaryp

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      advzm = 0.d0
      advzp = 0.d0
      adwbarym = 0.d0
      adwbaryp = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      kp1 = min(k+1,nr)
      mask_kp1 = 1.
      if (k .eq. nr) then
        mask_kp1 = 0.
      endif
      km1 = max(k-1,1)
      mask_km1 = 1.
      if (k .eq. 1) then
        mask_km1 = 0.
      endif
      do j = 2-oly, sny+oly
        advzm = 0.d0
        advzp = 0.d0
        adwbarym = 0.d0
        adwbaryp = 0.d0
        do i = 1-olx, snx+olx
          advzm = 0.d0
          advzp = 0.d0
          adwbarym = 0.d0
          adwbaryp = 0.d0
          wbarym = 0.5*(wfld(i,j,k,bi,bj)*ra(i,j,bi,bj)*maskc(i,j,km1,
     $bi,bj)+wfld(i,j-1,k,bi,bj)*ra(i,j-1,bi,bj)*maskc(i,j-1,km1,bi,bj))
     $*mask_km1
          wbaryp = 0.5*(wfld(i,j,kp1,bi,bj)*ra(i,j,bi,bj)+wfld(i,j-1,
     $kp1,bi,bj)*ra(i,j-1,bi,bj))*mask_kp1
          vzm = mask_km1*vfld(i,j,km1,bi,bj)-vfld(i,j,k,bi,bj)
          vzp = vfld(i,j,k,bi,bj)-mask_kp1*vfld(i,j,kp1,bi,bj)
          advzm = advzm-0.5*advshearterm(i,j)*wbarym*recip_ras(i,j,bi,
     $bj)*recip_hfacs(i,j,k,bi,bj)*recip_drf(k)
          advzp = advzp-0.5*advshearterm(i,j)*wbaryp*recip_ras(i,j,bi,
     $bj)*recip_hfacs(i,j,k,bi,bj)*recip_drf(k)
          adwbarym = adwbarym-0.5*advshearterm(i,j)*vzm*recip_ras(i,j,
     $bi,bj)*recip_hfacs(i,j,k,bi,bj)*recip_drf(k)
          adwbaryp = adwbaryp-0.5*advshearterm(i,j)*vzp*recip_ras(i,j,
     $bi,bj)*recip_hfacs(i,j,k,bi,bj)*recip_drf(k)
          advshearterm(i,j) = 0.d0
          advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)+advzp
          advfld(i,j,kp1,bi,bj) = advfld(i,j,kp1,bi,bj)-advzp*mask_kp1
          advzp = 0.d0
          advfld(i,j,k,bi,bj) = advfld(i,j,k,bi,bj)-advzm
          advfld(i,j,km1,bi,bj) = advfld(i,j,km1,bi,bj)+advzm*mask_km1
          advzm = 0.d0
          adwfld(i,j-1,kp1,bi,bj) = adwfld(i,j-1,kp1,bi,bj)+0.5*
     $adwbaryp*ra(i,j-1,bi,bj)*mask_kp1
          adwfld(i,j,kp1,bi,bj) = adwfld(i,j,kp1,bi,bj)+0.5*adwbaryp*
     $ra(i,j,bi,bj)*mask_kp1
          adwbaryp = 0.d0
          adwfld(i,j-1,k,bi,bj) = adwfld(i,j-1,k,bi,bj)+0.5*adwbarym*
     $ra(i,j-1,bi,bj)*maskc(i,j-1,km1,bi,bj)*mask_km1
          adwfld(i,j,k,bi,bj) = adwfld(i,j,k,bi,bj)+0.5*adwbarym*ra(i,j,
     $bi,bj)*maskc(i,j,km1,bi,bj)*mask_km1
          adwbarym = 0.d0
        end do
      end do

      end


      subroutine adostres( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      double precision half
      parameter ( half = 0.5d0 )
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adwindx(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adwindy(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adwind/ adwindx, adwindy

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call adexch_xy_rs( mythid,adfv )
      call adexch_xy_rs( mythid,adfu )
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1, sny
            do i = 1, snx
              adwindy(i-1,j-1,bi,bj) = adwindy(i-1,j-1,bi,bj)+adfv(i,j,
     $bi,bj)*half
              adwindy(i,j-1,bi,bj) = adwindy(i,j-1,bi,bj)+adfv(i,j,bi,
     $bj)*half
              adfv(i,j,bi,bj) = 0.d0
              adwindx(i-1,j-1,bi,bj) = adwindx(i-1,j-1,bi,bj)+adfu(i,j,
     $bi,bj)*half
              adwindx(i-1,j,bi,bj) = adwindx(i-1,j,bi,bj)+adfu(i,j,bi,
     $bj)*half
              adfu(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adexch_xy_rl( mythid,adwindy )
      call adexch_xy_rl( mythid,adwindx )

      end


      subroutine adpackages_init_variables( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare common blocks
C==============================================
      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

C==============================================
C declare arguments
C==============================================
      integer mythid

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (useecco) then
        call adecco_init( mythid )
      endif
      if (useseaice) then
        call adseaice_init
      endif

      end


      subroutine adri_iwmix( kmtj, shsq, dbloc, dblocsm, adshsq, 
     $addbloc, addblocsm, addiffus )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )

C==============================================
C declare common blocks
C==============================================
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision bvsqcon
      double precision difm0
      double precision difmcon
      double precision difs0
      double precision difscon
      double precision dift0
      double precision diftcon
      double precision riinfty
      common /kmixcri_r/ riinfty, bvsqcon, difm0, difs0, dift0, difmcon,
     $ difscon, diftcon

      double precision hwide(0:nr+1)
      double precision pmask(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision zgrid(0:nr+1)
      common /kpp_r1/ pmask, zgrid, hwide

C==============================================
C declare arguments
C==============================================
      double precision addbloc(imt,nr)
      double precision addblocsm(imt,nr)
      double precision addiffus(imt,0:nrp1,3)
      double precision adshsq(imt,nr)
      double precision dbloc(imt,nr)
      double precision dblocsm(imt,nr)
      integer kmtj(imt)
      double precision shsq(imt,nr)

C==============================================
C declare local variables
C==============================================
      double precision adfcon
      double precision adfri
      double precision adratio
      double precision adrig
      double precision c0
      double precision c1
      double precision diffus(imt,0:nrp1,3)
      double precision fcon
      double precision fri
      integer i
      integer ki
      double precision ratio
      double precision rig

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfcon = 0.d0
      adfri = 0.d0
      adratio = 0.d0
      adrig = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      c1 = 1.
      c0 = 0.
      diffus(1,1,1) = 0.
      do ki = 1, nr
        do i = 1, imt
          if (kmtj(i) .le. 1) then
            diffus(i,ki,1) = 0.
            diffus(i,ki,2) = 0.
          else if (ki .ge. kmtj(i)) then
            diffus(i,ki,1) = diffus(i,ki-1,1)
            diffus(i,ki,2) = diffus(i,ki-1,2)
          else
            diffus(i,ki,1) = dblocsm(i,ki)*(zgrid(ki)-zgrid(ki+1))/
     $max(shsq(i,ki),phepsi)
            diffus(i,ki,2) = dbloc(i,ki)/(zgrid(ki)-zgrid(ki+1))
          endif
        end do
      end do
      do i = 1, imt
        addiffus(i,0,3) = 0.d0
        addiffus(i,0,2) = 0.d0
        addiffus(i,0,1) = 0.d0
      end do
      do ki = 1, nr
        adfcon = 0.d0
        adfri = 0.d0
        adratio = 0.d0
        adrig = 0.d0
        do i = 1, imt
          adfcon = 0.d0
          adfri = 0.d0
          adratio = 0.d0
          adrig = 0.d0
          rig = max(diffus(i,ki,2),bvsqcon)
          ratio = min((bvsqcon-rig)/bvsqcon,c1)
          fcon = c1-ratio*ratio
          rig = max(diffus(i,ki,1),c0)
          ratio = min(rig/riinfty,c1)
          fri = c1-ratio*ratio
          adfcon = adfcon+addiffus(i,ki,3)*difscon
          adfri = adfri+addiffus(i,ki,3)*difs0
          addiffus(i,ki,3) = 0.d0
          adfcon = adfcon+addiffus(i,ki,2)*difscon
          adfri = adfri+addiffus(i,ki,2)*difs0
          addiffus(i,ki,2) = 0.d0
          adfcon = adfcon+addiffus(i,ki,1)*difmcon
          adfri = adfri+addiffus(i,ki,1)*difm0
          addiffus(i,ki,1) = 0.d0
          adfri = 3*adfri*fri*fri
          adratio = adratio-2*adfri*ratio
          adfri = 0.d0
          adrig = adrig+adratio*((0.5+sign(0.5d0,c1-rig/riinfty))/
     $riinfty)
          adratio = 0.d0
          addiffus(i,ki,1) = addiffus(i,ki,1)+adrig*(0.5+sign(0.5d0,
     $diffus(i,ki,1)-c0))
          adrig = 0.d0
          adfcon = 3*adfcon*fcon*fcon
          rig = max(diffus(i,ki,2),bvsqcon)
          ratio = min((bvsqcon-rig)/bvsqcon,c1)
          adratio = adratio-2*adfcon*ratio
          adfcon = 0.d0
          rig = max(diffus(i,ki,2),bvsqcon)
          adrig = adrig-adratio*((0.5+sign(0.5d0,c1-(bvsqcon-rig)/
     $bvsqcon))/bvsqcon)
          adratio = 0.d0
          addiffus(i,ki,2) = addiffus(i,ki,2)+adrig*(0.5+sign(0.5d0,
     $diffus(i,ki,2)-bvsqcon))
          adrig = 0.d0
        end do
      end do
      do ki = nr, 1, -1
        do i = 1, imt
          if (kmtj(i) .le. 1) then
            addiffus(i,ki,2) = 0.d0
            addiffus(i,ki,1) = 0.d0
          else if (ki .ge. kmtj(i)) then
            addiffus(i,ki-1,2) = addiffus(i,ki-1,2)+addiffus(i,ki,2)
            addiffus(i,ki,2) = 0.d0
            addiffus(i,ki-1,1) = addiffus(i,ki-1,1)+addiffus(i,ki,1)
            addiffus(i,ki,1) = 0.d0
          else
            addbloc(i,ki) = addbloc(i,ki)+addiffus(i,ki,2)/(zgrid(ki)-
     $zgrid(ki+1))
            addiffus(i,ki,2) = 0.d0
            addblocsm(i,ki) = addblocsm(i,ki)+addiffus(i,ki,1)*
     $((zgrid(ki)-zgrid(ki+1))/max(shsq(i,ki),phepsi))
            adshsq(i,ki) = adshsq(i,ki)-addiffus(i,ki,1)*(dblocsm(i,ki)*
     $(zgrid(ki)-zgrid(ki+1))*(0.5+sign(0.5d0,shsq(i,ki)-phepsi))/
     $(max(shsq(i,ki),phepsi)*max(shsq(i,ki),phepsi)))
            addiffus(i,ki,1) = 0.d0
          endif
        end do
      end do
      addiffus(1,1,1) = 0.d0

      end


      subroutine adseaice_exch( mythid, adfld )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

C==============================================
C declare arguments
C==============================================
      double precision adfld(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adtempvar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer j
      integer k

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adtempvar(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do k = 3, 1, -1
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                adtempvar(i,j,bi,bj) = adtempvar(i,j,bi,bj)+adfld(i,j,k,
     $bi,bj)
                adfld(i,j,k,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
        call adexch_xy_rl( mythid,adtempvar )
        do bj = mybylo(mythid), mybyhi(mythid)
          do bi = mybxlo(mythid), mybxhi(mythid)
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                adfld(i,j,k,bi,bj) = adfld(i,j,k,bi,bj)+adtempvar(i,j,
     $bi,bj)
                adtempvar(i,j,bi,bj) = 0.d0
              end do
            end do
          end do
        end do
      end do

      end


      subroutine adseaice_init
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adtice(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmix(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /admix/ adtmix, adtice

      double precision adsurfacetendencytice(1-olx:snx+olx,1-oly:sny+
     $oly,nsx,nsy)
      common /adseaice_external/ adsurfacetendencytice

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4

C----------------------------------------------
C RESET ADJOINT COMMON BLOCK VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adtice(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencytice(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adseaice_model( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      double precision adevap(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_evap/ adevap

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adarea(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      common /adseaice_dynvars/ adarea

      double precision adsurfacetendencytice(1-olx:snx+olx,1-oly:sny+
     $oly,nsx,nsy)
      common /adseaice_external/ adsurfacetendencytice

      double precision adheff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision adhsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adtrans/ adheff, adhsnow

      double precision heffm(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision uvm(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /array/ heffm, uvm

      double precision aqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_temp_r/ atemp, aqh, lwflux, precip

      double precision uwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_atm_wind_r/ uwind, vwind

      double precision lwdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_rad_down_r/ swdown, lwdown, swdown0, swdown1, lwdown0,
     $ lwdown1

      double precision area(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision uice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision vice(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      common /seaice_dynvars/ uice, vice, area

      double precision heff(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision hsnow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /trans/ heff, hsnow

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision areah(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision heffh(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      double precision uwindh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwindh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              vwindh(ip1,ip2,ip3,ip4) = vwind(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              uwindh(ip1,ip2,ip3,ip4) = uwind(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heffh(ip1,ip2,ip3,ip4,ip5) = heff(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                areah(ip1,ip2,ip3,ip4,ip5) = area(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      call exch_xy_rl( uwind,mythid )
      call exch_xy_rl( vwind,mythid )
      call exch_xy_rl( atemp,mythid )
      call exch_xy_rl( aqh,mythid )
      call exch_xy_rl( lwdown,mythid )
      call exch_xy_rl( swdown,mythid )
      call exch_xy_rl( precip,mythid )
      call advect( uice,vice,heff,heffm,mythid )
      call advect( uice,vice,area,heffm,mythid )
      call barrier( mythid )
      call adexch_xyz_rl( mythid,adtheta )
      call adexch_xy_rs( mythid,adqsw )
      call adexch_xy_rs( mythid,adsurfacetendencytice )
      call adexch_xy_rs( mythid,adqnet )
      call adexch_xy_rs( mythid,adempmr )
      call adexch_xy_rs( mythid,adfv )
      call adexch_xy_rs( mythid,adfu )
      call adseaice_exch( mythid,adarea )
      call adseaice_exch( mythid,adheff )
      call barrier( mythid )
      call adgrowth( mythid )
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                area(ip1,ip2,ip3,ip4,ip5) = areah(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      call adadvect( uice,vice,area,heffm,mythid,adarea )
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                heff(ip1,ip2,ip3,ip4,ip5) = heffh(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      call adadvect( uice,vice,heff,heffm,mythid,adheff )
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              uwind(ip1,ip2,ip3,ip4) = uwindh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              vwind(ip1,ip2,ip3,ip4) = vwindh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      call exch_xy_rl( uwind,mythid )
      call exch_xy_rl( vwind,mythid )
      call addynsolver( mythid )
      call adexch_xy_rl( mythid,adevap )
      call adexch_xy_rl( mythid,adaqh )
      call adexch_xy_rl( mythid,adatemp )
      call adexch_xy_rl( mythid,advwind )
      call adexch_xy_rl( mythid,aduwind )

C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adsolve_for_pressure( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adcg2d_b(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adcg2d_x(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adsfp_common_r8/ adcg2d_x, adcg2d_b

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision bo_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_bo(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /solve_barot/ bo_surf, recip_bo

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      double precision adcg2d_bh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer bi
      integer bj
      double precision firstresidual
      integer i
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer j
      integer k
      double precision lastresidual
      integer numiters
      double precision uf(1-olx:snx+olx,1-oly:sny+oly)
      double precision vf(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adcg2d_bh(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      firstresidual = 0.
      lastresidual = 0.
      numiters = cg2dmaxiters
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adcg2d_x(i,j,bi,bj) = adcg2d_x(i,j,bi,bj)+adetan(i,j,bi,
     $bj)*recip_bo(i,j,bi,bj)
              adetan(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do
      call adexch_xy_rl( mythid,adcg2d_x )
      call cg2d( adcg2d_x,adcg2d_bh,firstresidual,lastresidual,numiters,
     $mythid )
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adcg2d_b(ip1,ip2,ip3,ip4) = adcg2d_b(ip1,ip2,ip3,ip4)+
     $adcg2d_bh(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adcg2d_x(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          if (exactconserv) then
            do j = 1, sny
              do i = 1, snx
                adetah(i,j,bi,bj) = adetah(i,j,bi,bj)-adcg2d_b(i,j,bi,
     $bj)*(freesurffac*ra(i,j,bi,bj)/deltatmom/deltatmom)
              end do
            end do
          else
            do j = 1, sny
              do i = 1, snx
                adetan(i,j,bi,bj) = adetan(i,j,bi,bj)-adcg2d_b(i,j,bi,
     $bj)*(freesurffac*ra(i,j,bi,bj)/deltatmom/deltatmom)
              end do
            end do
          endif
        end do
      end do
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          do k = 1, nr
            do j = 1, sny+1
              do i = 1, snx+1
                uf(i,j) = dyg(i,j,bi,bj)*drf(k)*hfacw(i,j,k,bi,bj)
                vf(i,j) = dxg(i,j,bi,bj)*drf(k)*hfacs(i,j,k,bi,bj)
              end do
            end do
            call adcalc_div_ghat( bi,bj,k,uf,vf,adcg2d_b )
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adcg2d_b(i,j,bi,bj) = 0.d0
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adcg2d_x(i,j,bi,bj)*
     $bo_surf(i,j,bi,bj)
              adcg2d_x(i,j,bi,bj) = 0.d0
              adetan(i,j,bi,bj) = adetan(i,j,bi,bj)+adetanm1(i,j,bi,bj)
              adetanm1(i,j,bi,bj) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine adstatekpp( bi, bj, adrho1, addbloc, addbsfc, 
     $adttalpha, adssbeta )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer ibot
      parameter ( ibot = 1-olx )
      integer snx
      parameter ( snx = 20 )
      integer itop
      parameter ( itop = snx+olx )
      integer oly
      parameter ( oly = 4 )
      integer jbot
      parameter ( jbot = 1-oly )
      integer sny
      parameter ( sny = 16 )
      integer jtop
      parameter ( jtop = sny+oly )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nrp1
      parameter ( nrp1 = nr+1 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer ny
      parameter ( ny = sny*nsy*npy )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision addbloc(ibot:itop,jbot:jtop,nr)
      double precision addbsfc(ibot:itop,jbot:jtop,nr)
      double precision adrho1(ibot:itop,jbot:jtop)
      double precision adssbeta(ibot:itop,jbot:jtop,nrp1)
      double precision adttalpha(ibot:itop,jbot:jtop,nrp1)
      integer bi
      integer bj

C==============================================
C declare local variables
C==============================================
      double precision adrho1k(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwork1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwork2(1-olx:snx+olx,1-oly:sny+oly)
      double precision adwork3(1-olx:snx+olx,1-oly:sny+oly)
      integer help_h
      integer i
      integer ip1
      integer ip2
      integer j
      integer k
      integer mythid
      double precision rho1k(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrho1k(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adwork1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adwork2(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adwork3(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jbot, jtop
        do i = ibot, itop
          addbloc(i,j,nr) = 0.d0
          adssbeta(i,j,nr) = adssbeta(i,j,nr)+adssbeta(i,j,nrp1)
          adssbeta(i,j,nrp1) = 0.d0
          adttalpha(i,j,nr) = adttalpha(i,j,nr)+adttalpha(i,j,nrp1)
          adttalpha(i,j,nrp1) = 0.d0
        end do
      end do
      do k = nr, 2, -1
        call find_rho( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,theta,salt,
     $rhok,mythid )
        help_h = k-1
        call find_rho( bi,bj,ibot,itop,jbot,jtop,help_h,k,eostype,theta,
     $salt,rhokm1,mythid )
        call find_rho( bi,bj,ibot,itop,jbot,jtop,1,k,eostype,theta,salt,
     $rho1k,mythid )
        do j = jbot, jtop
          do i = ibot, itop
            adrho1k(i,j) = adrho1k(i,j)-addbsfc(i,j,k)*(gravity/(rhok(i,
     $j)+rhonil))
            adrhok(i,j) = adrhok(i,j)+addbsfc(i,j,k)*(gravity/(rhok(i,j)
     $+rhonil)-gravity*(rhok(i,j)-rho1k(i,j))/((rhok(i,j)+rhonil)*
     $(rhok(i,j)+rhonil)))
            addbsfc(i,j,k) = 0.d0
            adrhok(i,j) = adrhok(i,j)+addbloc(i,j,k-1)*(gravity/(rhok(i,
     $j)+rhonil)-gravity*(rhok(i,j)-rhokm1(i,j))/((rhok(i,j)+rhonil)*
     $(rhok(i,j)+rhonil)))
            adrhokm1(i,j) = adrhokm1(i,j)-addbloc(i,j,k-1)*(gravity/
     $(rhok(i,j)+rhonil))
            addbloc(i,j,k-1) = 0.d0
            adwork2(i,j) = adwork2(i,j)+adssbeta(i,j,k)
            adssbeta(i,j,k) = 0.d0
            adwork1(i,j) = adwork1(i,j)+adttalpha(i,j,k)
            adttalpha(i,j,k) = 0.d0
          end do
        end do
        call adfind_beta( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,adwork2 
     $)
        call adfind_alpha( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,
     $adwork1 )
        call adfind_rho( bi,bj,ibot,itop,jbot,jtop,1,k,eostype,theta,
     $salt,adtheta,adsalt,adrho1k )
        call adfind_rho( bi,bj,ibot,itop,jbot,jtop,help_h,k,eostype,
     $theta,salt,adtheta,adsalt,adrhokm1 )
        call adfind_rho( bi,bj,ibot,itop,jbot,jtop,k,k,eostype,theta,
     $salt,adtheta,adsalt,adrhok )
      end do
      do j = jbot, jtop
        do i = ibot, itop
          adwork3(i,j) = adwork3(i,j)+adssbeta(i,j,1)
          adssbeta(i,j,1) = 0.d0
          adwork2(i,j) = adwork2(i,j)+adttalpha(i,j,1)
          adttalpha(i,j,1) = 0.d0
          adwork1(i,j) = adwork1(i,j)+adrho1(i,j)
          adrho1(i,j) = 0.d0
        end do
      end do
      call adfind_beta( bi,bj,ibot,itop,jbot,jtop,1,1,eostype,adwork3 )
      call adfind_alpha( bi,bj,ibot,itop,jbot,jtop,1,1,eostype,adwork2 )
      call adfind_rho( bi,bj,ibot,itop,jbot,jtop,1,1,eostype,theta,salt,
     $adtheta,adsalt,adwork1 )

      end


      subroutine adswfrac( imax, fact, mytime, swdk, adswdk )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nwtype
      parameter ( nwtype = 5 )

C==============================================
C declare arguments
C==============================================
      integer imax
      double precision adswdk(imax)
      double precision fact
      double precision mytime
      double precision swdk(imax)

C==============================================
C declare local variables
C==============================================
      double precision a1(nwtype)
      double precision a2(nwtype)
      double precision adfacz
      logical changed
      integer count0
      integer count1
      double precision fac
      double precision facz
      logical first
      integer i
      integer jerl(12)
      integer jwtype
      integer myiter
      integer mythid
      double precision rfac(nwtype)

C==============================================
C declare data
C==============================================
      data jerl/2,2,2,3,3,3,4,4,4,4,3,2/
      data rfac/0.58,0.62,0.67,0.77,0.78/
      data a1/0.35,0.6,1.,1.5,1.4/
      data a2/23.,20.,17.,14.,7.9/

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfacz = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      myiter = 0
      call cal_getmonthsrec( fac,first,changed,count0,count1,mytime,
     $myiter,mythid )
      jwtype = jerl(count0)
      do i = 1, imax
        adfacz = 0.d0
        facz = fact*swdk(i)
        if (facz .lt. (-200.)) then
          adswdk(i) = 0.d0
        else
          adfacz = adfacz+adswdk(i)*(rfac(jwtype)/a1(jwtype)*exp(facz/
     $a1(jwtype))+(1.-rfac(jwtype))/a2(jwtype)*exp(facz/a2(jwtype)))
          adswdk(i) = 0.d0
        endif
        adswdk(i) = adswdk(i)+adfacz*fact
        adfacz = 0.d0
      end do

      end


      subroutine adthe_correction_step( mytime, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer jmax
      integer jmin
      integer k

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfx(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adphisurfy(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (exactconserv .and. implicdiv2dflow .ne. 0.d0) then
        call adexch_xy_rl( mythid,adetan )
      endif
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          if (exactconserv) then
            call adcalc_exact_eta(  .true. ,bi,bj,mytime,aduvel,advvel )
          endif
          call adconvective_adjustment( bi,bj,imin,imax,jmin,jmax,
     $mytime,mythid )
        end do
      end do
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          do k = nr, 1, -1
            if (saltstepping) then
              call adcycle_tracer( bi,bj,imin,imax,jmin,jmax,k,adsalt,
     $adgs,adgsnm1 )
            endif
            if (tempstepping) then
              call adcycle_tracer( bi,bj,imin,imax,jmin,jmax,k,adtheta,
     $adgt,adgtnm1 )
            endif
            if (momstepping) then
              call adcorrection_step( bi,bj,imin,imax,jmin,jmax,k,
     $adphisurfx,adphisurfy )
            endif
          end do
          call adcalc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,adetan,
     $adphisurfx,adphisurfy )
        end do
      end do

      end


      subroutine mdthe_correction_step( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      double precision phisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision phisurfy(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          call calc_grad_phi_surf( bi,bj,imin,imax,jmin,jmax,etan,
     $phisurfx,phisurfy,mythid )
          do k = 1, nr
            if (momstepping) then
              call correction_step( bi,bj,imin,imax,jmin,jmax,k,
     $phisurfx,phisurfy,mytime,mythid )
            endif
            if (tempstepping) then
              call cycle_tracer( bi,bj,imin,imax,jmin,jmax,k,theta,gt,
     $gtnm1,mytime,mythid )
            endif
            if (saltstepping) then
              call cycle_tracer( bi,bj,imin,imax,jmin,jmax,k,salt,gs,
     $gsnm1,mytime,mythid )
            endif
          end do
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          call mdconvective_adjustment( bi,bj,imin,imax,jmin,jmax,
     $mytime,myiter,mythid )
          if (exactconserv) then
            call calc_exact_eta(  .true. ,bi,bj,uvel,vvel,mytime,myiter,
     $mythid )
          endif
        end do
      end do
      if (exactconserv .and. implicdiv2dflow .ne. 0.d0) then
        call exch_xy_rl( etan,mythid )
      endif
      end


      subroutine adthe_main_loop( mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer nchklev_1
      parameter ( nchklev_1 = 24 )
      integer nchklev_2
      parameter ( nchklev_2 = 4 )
      integer nchklev_3
      parameter ( nchklev_3 = 3 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision fc
      double precision objf_aqh(nsx,nsy)
      double precision objf_argos(nsx,nsy)
      double precision objf_argot(nsx,nsy)
      double precision objf_atemp(nsx,nsy)
      double precision objf_atl(nsx,nsy)
      double precision objf_ctds(nsx,nsy)
      double precision objf_ctdt(nsx,nsy)
      double precision objf_drift(nsx,nsy)
      double precision objf_h(nsx,nsy)
      double precision objf_hflux(nsx,nsy)
      double precision objf_hfluxm(nsx,nsy)
      double precision objf_hfluxmm(nsx,nsy)
      double precision objf_hmean
      double precision objf_obcse(nsx,nsy)
      double precision objf_obcsn(nsx,nsy)
      double precision objf_obcss(nsx,nsy)
      double precision objf_obcsw(nsx,nsy)
      double precision objf_salt(nsx,nsy)
      double precision objf_salt0(nsx,nsy)
      double precision objf_scatx(nsx,nsy)
      double precision objf_scatxm(nsx,nsy)
      double precision objf_scaty(nsx,nsy)
      double precision objf_scatym(nsx,nsy)
      double precision objf_sdrift(nsx,nsy)
      double precision objf_sflux(nsx,nsy)
      double precision objf_sfluxm(nsx,nsy)
      double precision objf_sfluxmm(nsx,nsy)
      double precision objf_sss(nsx,nsy)
      double precision objf_sst(nsx,nsy)
      double precision objf_tauu(nsx,nsy)
      double precision objf_tauum(nsx,nsy)
      double precision objf_tauv(nsx,nsy)
      double precision objf_tauvm(nsx,nsy)
      double precision objf_tdrift(nsx,nsy)
      double precision objf_temp(nsx,nsy)
      double precision objf_temp0(nsx,nsy)
      double precision objf_uwind(nsx,nsy)
      double precision objf_vwind(nsx,nsy)
      double precision objf_wdrift(nsx,nsy)
      double precision objf_xbt(nsx,nsy)
      common /cost_r/ fc, objf_hflux, objf_hfluxm, objf_hfluxmm, 
     $objf_sflux, objf_sfluxm, objf_sfluxmm, objf_tauu, objf_tauum, 
     $objf_tauv, objf_tauvm, objf_hmean, objf_h, objf_temp, objf_salt, 
     $objf_temp0, objf_salt0, objf_sst, objf_sss, objf_atl, objf_ctdt, 
     $objf_ctds, objf_xbt, objf_argot, objf_argos, objf_drift, 
     $objf_tdrift, objf_sdrift, objf_wdrift, objf_scatx, objf_scaty, 
     $objf_scatxm, objf_scatym, objf_atemp, objf_aqh, objf_uwind, 
     $objf_vwind, objf_obcsn, objf_obcss, objf_obcsw, objf_obcse

      double precision etanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision unm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_cd/ uveld, vveld, etanm1, unm1, vnm1, gucd, gvcd

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      double precision hdivflow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exact_eta_local/ hdivflow

      double precision evap(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_evap/ evap

      double precision lwdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exf_rad_down_r/ swdown, lwdown, swdown0, swdown1, lwdown0,
     $ lwdown1

      double precision aqh0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision aqh1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_aqh_r/ aqh0, aqh1

      double precision atemp0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision atemp1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_atemp_r/ atemp0, atemp1

      double precision lwflux0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwflux1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_lwflux_r/ lwflux0, lwflux1

      double precision precip0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision precip1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_precip_r/ precip0, precip1

      double precision runoff(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_runoff_r/ runoff

      double precision swflux0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swflux1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_swflux_r/ swflux0, swflux1

      double precision uwind0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision uwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_uwind_r/ uwind0, uwind1

      double precision vwind0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision vwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /exfl_vwind_r/ vwind0, vwind1

      double precision mix1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision mix2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /mix/ mix1, mix2

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      double precision seaice_dynvars1(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision seaice_dynvars2(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision seaice_dynvars3(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      common /seaice_dynvars/ seaice_dynvars1, seaice_dynvars2, 
     $seaice_dynvars3

      double precision seaice_external1(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      common /seaice_external/ seaice_external1

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      double precision trans1(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision trans2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /trans/ trans1, trans2

C==============================================
C declare arguments
C==============================================
      integer mythid

C==============================================
C declare local variables
C==============================================
      integer bi
      integer bj
      double precision comlev1_aqh0_1h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nsx,nsy,24)
      double precision comlev1_aqh1_2h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nsx,nsy,24)
      double precision comlev1_atemp0_3h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nsx,nsy,24)
      double precision comlev1_atemp1_4h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nsx,nsy,24)
      double precision comlev1_evap_11h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nsx,nsy,24)
      double precision comlev1_lwflux0_7h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_lwflux1_8h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_precip0_5h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_precip1_6h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_swflux0_9h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_swflux1_10h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_theta_16h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,nsx,nsy,24)
      double precision comlev1_uwind0_12h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_uwind1_13h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_vwind0_14h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision comlev1_vwind1_15h(1+snx+olx-(1-olx),1+sny+oly-
     $(1-oly),nsx,nsy,24)
      double precision evaph(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fch
      integer ilev_1
      integer ilev_18
      integer ilev_2
      integer ilev_24
      integer ilev_3
      integer ilev_32
      integer iloop
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5
      double precision lwdown0l(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown0m(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1l(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision lwdown1m(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      integer max_lev2
      integer max_lev3
      integer myiter
      double precision mytime
      double precision runoffr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision runofft(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision runoffu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0l(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown0m(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1l(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision swdown1m(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ymix2r(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ymix2t(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ymix2u(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yseaice_dynvars1h(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision yseaice_dynvars2h(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision yseaice_dynvars3o(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision yseaice_dynvars3s(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision yseaice_dynvars3u(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision yseaice_dynvars3v(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      double precision yseaice_external1l(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision yseaice_external1m(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision ytrans1o(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision ytrans1s(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision ytrans1u(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision ytrans1v(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision ytrans2o(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ytrans2s(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ytrans2u(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ytrans2v(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)

C----------------------------------------------
C SAVE REQUIRED INPUT VARIABLES
C----------------------------------------------
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              ytrans2o(ip1,ip2,ip3,ip4) = trans2(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                ytrans1o(ip1,ip2,ip3,ip4,ip5) = trans1(ip1,ip2,ip3,ip4,
     $ip5)
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                yseaice_dynvars3o(ip1,ip2,ip3,ip4,ip5) = 
     $seaice_dynvars3(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                yseaice_dynvars2h(ip1,ip2,ip3,ip4,ip5) = 
     $seaice_dynvars2(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                yseaice_dynvars1h(ip1,ip2,ip3,ip4,ip5) = 
     $seaice_dynvars1(ip1,ip2,ip3,ip4,ip5)
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              evaph(ip1,ip2,ip3,ip4) = evap(ip1,ip2,ip3,ip4)
            end do
          end do
        end do
      end do

C----------------------------------------------
C RESET GLOBAL ADJOINT VARIABLES
C----------------------------------------------
      call adzero

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
C----------------------------------------------
C OPEN TAPE tapelev3
C----------------------------------------------
      call adopen ( mythid,
     &            'tapelev3_1_the_main_loop_gsnm1',30,9,1,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_2_the_main_loop_gtnm1',30,9,2,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_3_the_main_loop_gunm1',30,9,3,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_4_the_main_loop_gvnm1',30,9,4,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_5_the_main_loop_theta',30,9,5,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_6_the_main_loop_salt',29,9,6,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_7_the_main_loop_uvel',29,9,7,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_8_the_main_loop_vvel',29,9,8,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_9_the_main_loop_wvel',29,9,9,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_10_the_main_loop_etan',30,9,10,8,672 )
      call adopen ( mythid,
     &            'tapelev3_11_the_main_loop_gu',28,9,11,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_12_the_main_loop_gv',28,9,12,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_13_the_main_loop_uveld',31,9,13,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_14_the_main_loop_vveld',31,9,14,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_15_the_main_loop_etanm1',32,9,15,8,672 )
      call adopen ( mythid,
     &            'tapelev3_16_the_main_loop_unm1',30,9,16,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_17_the_main_loop_vnm1',30,9,17,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_18_the_main_loop_gucd',30,9,18,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_19_the_main_loop_gvcd',30,9,19,8,15456 )
      call adopen ( mythid,
     &            'tapelev3_20_the_main_loop_etah',30,9,20,8,672 )
      call adopen ( mythid,
     &            'tapelev3_21_the_main_loop_hdivflow',34,9,21,8,672 )
      call adopen ( mythid,
     &            'tapelev3_22_the_main_loop_aqh0',30,9,22,8,672 )
      call adopen ( mythid,
     &            'tapelev3_23_the_main_loop_aqh1',30,9,23,8,672 )
      call adopen ( mythid,
     &            'tapelev3_24_the_main_loop_atemp0',32,9,24,8,672 )
      call adopen ( mythid,
     &            'tapelev3_25_the_main_loop_atemp1',32,9,25,8,672 )
      call adopen ( mythid,
     &            'tapelev3_26_the_main_loop_precip0',33,9,26,8,672 )
      call adopen ( mythid,
     &            'tapelev3_27_the_main_loop_precip1',33,9,27,8,672 )
      call adopen ( mythid,
     &            'tapelev3_28_the_main_loop_lwflux0',33,9,28,8,672 )
      call adopen ( mythid,
     &            'tapelev3_29_the_main_loop_lwflux1',33,9,29,8,672 )
      call adopen ( mythid,
     &            'tapelev3_30_the_main_loop_swflux0',33,9,30,8,672 )
      call adopen ( mythid,
     &            'tapelev3_31_the_main_loop_swflux1',33,9,31,8,672 )
      call adopen ( mythid,
     &            'tapelev3_32_the_main_loop_evap',30,9,32,8,672 )
      call adopen ( mythid,
     &            'tapelev3_33_the_main_loop_uwind0',32,9,33,8,672 )
      call adopen ( mythid,
     &            'tapelev3_34_the_main_loop_uwind1',32,9,34,8,672 )
      call adopen ( mythid,
     &            'tapelev3_35_the_main_loop_vwind0',32,9,35,8,672 )
      call adopen ( mythid,
     &            'tapelev3_36_the_main_loop_vwind1',32,9,36,8,672 )

C----------------------------------------------
C OPEN TAPE tapelev_ini_bibj_k
C----------------------------------------------
      call adopen ( mythid,
     &            'tapelev_ini_bibj_k_1_the_main_loop_theta',40,5,1,4,
     $672 )
      call adopen ( mythid,
     &            'tapelev_ini_bibj_k_2_the_main_loop_salt',39,5,2,4,
     $672 )
      call adopen ( mythid,
     &            'tapelev_ini_bibj_k_3_the_main_loop_theta',40,5,3,4,
     $672 )
      call adopen ( mythid,
     &            'tapelev_ini_bibj_k_4_the_main_loop_salt',39,5,4,4,
     $672 )
      call adopen ( mythid,
     &            'tapelev_ini_bibj_k_5_the_main_loop_rhokm1',41,5,5,4,
     $672 )
      call adopen ( mythid,
     &            'tapelev_ini_bibj_k_6_the_main_loop_rhok',39,5,6,4,
     $672 )

C----------------------------------------------
C FUNCTION AND TAPE COMPUTATIONS
C----------------------------------------------
      niter0 = int(starttime/deltatclock)
      mytime = starttime
      myiter = niter0
      call mdinitialise_varia( mythid )
      call cost_forcing( myiter,mytime,mythid )
      call barrier( mythid )
      max_lev3 = ntimesteps/(nchklev_1*nchklev_2)+1
      max_lev2 = ntimesteps/nchklev_1+1
      do ilev_3 = 1, nchklev_3
        if (ilev_3 .le. max_lev3) then
          call adwrite( mythid,
     &            'tapelev3_1_the_main_loop_gsnm1',30,9,1,gsnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_2_the_main_loop_gtnm1',30,9,2,gtnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_3_the_main_loop_gunm1',30,9,3,gunm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_4_the_main_loop_gvnm1',30,9,4,gvnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_5_the_main_loop_theta',30,9,5,theta,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_6_the_main_loop_salt',29,9,6,salt,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_7_the_main_loop_uvel',29,9,7,uvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_8_the_main_loop_vvel',29,9,8,vvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_9_the_main_loop_wvel',29,9,9,wvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_10_the_main_loop_etan',30,9,10,etan,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_11_the_main_loop_gu',28,9,11,gu,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_12_the_main_loop_gv',28,9,12,gv,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_13_the_main_loop_uveld',31,9,13,uveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_14_the_main_loop_vveld',31,9,14,vveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_15_the_main_loop_etanm1',32,9,15,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_16_the_main_loop_unm1',30,9,16,unm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_17_the_main_loop_vnm1',30,9,17,vnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_18_the_main_loop_gucd',30,9,18,gucd,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_19_the_main_loop_gvcd',30,9,19,gvcd,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_20_the_main_loop_etah',30,9,20,etah,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_21_the_main_loop_hdivflow',34,9,21,
     $hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 
     $)
          call adwrite( mythid,
     &            'tapelev3_22_the_main_loop_aqh0',30,9,22,aqh0,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_23_the_main_loop_aqh1',30,9,23,aqh1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_24_the_main_loop_atemp0',32,9,24,
     $atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_25_the_main_loop_atemp1',32,9,25,
     $atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_26_the_main_loop_precip0',33,9,26,
     $precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_27_the_main_loop_precip1',33,9,27,
     $precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_28_the_main_loop_lwflux0',33,9,28,
     $lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_29_the_main_loop_lwflux1',33,9,29,
     $lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_30_the_main_loop_swflux0',33,9,30,
     $swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_31_the_main_loop_swflux1',33,9,31,
     $swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_32_the_main_loop_evap',30,9,32,evap,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_33_the_main_loop_uwind0',32,9,33,
     $uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_34_the_main_loop_uwind1',32,9,34,
     $uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_35_the_main_loop_vwind0',32,9,35,
     $vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adwrite( mythid,
     &            'tapelev3_36_the_main_loop_vwind1',32,9,36,
     $vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          do ilev_2 = 1, nchklev_2
            if (ilev_2 .le. max_lev2) then
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  niter0 = int(starttime/deltatclock)
                  ikey_dynamics = ilev_1
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call cost_averagesfields( mytime,myiter,mythid )
                  if (exactconserv) then
                    do bj = mybylo(mythid), mybyhi(mythid)
      do bi = mybxlo(mythid), mybxhi(mythid)
        call calc_exact_eta(  .false. ,bi,bj,uvel,vvel,starttime,niter0,
     $mythid )
      end do
                    end do
                    if (implicdiv2dflow .ne. 1.d0) then
      call exch_xy_rl( etah,mythid )
                    endif
                  endif
                  call exf_getforcing( mytime,myiter,mythid )
                  call barrier( mythid )
                  if (useseaice) then
                    call seaice_model( mytime,myiter,mythid )
                  endif
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call thermodynamics( mytime,myiter,mythid )
                  if (momstepping) then
                    call dynamics( mytime,myiter,mythid )
                  endif
                  call solve_for_pressure( mythid )
                  mytime = starttime+float(iloop)*deltatclock
                  call the_correction_step( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                endif
              end do
            endif
          end do
        endif
      end do
      call barrier( mythid )
      call cost_averagesfields( mytime,myiter,mythid )
      call cost_hyd( myiter,mytime,mythid )
      call cost_ssh( myiter,mytime,mythid )
      call cost_sst( myiter,mytime,mythid )
      call barrier( mythid )
      call cost_final( mythid )

C----------------------------------------------
C SAVE DEPENDEND VARIABLES
C----------------------------------------------
      fch = fc

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
C BEGIN OVERWRITING xx_psbar_mean_dummy,xx_sbar_mean_dummy,xx_tbar_mean_
C dummy
      call initialise_varia( mythid )
C END OVERWRITING   xx_psbar_mean_dummy,xx_sbar_mean_dummy,xx_tbar_mean_
C dummy
      call barrier( mythid )
      do ilev_3 = 1, nchklev_3
        if (ilev_3 .le. max_lev3) then
          do ilev_2 = 1, nchklev_2
            if (ilev_2 .le. max_lev2) then
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  niter0 = int(starttime/deltatclock)
                  call barrier( mythid )
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                endif
              end do
            endif
          end do
        endif
      end do
      call barrier( mythid )
      call barrier( mythid )
      call adcost_final( mythid )
      call barrier( mythid )
      call adcost_sst( mythid )
      call adcost_ssh( mythid )
      call adcost_hyd( mythid )
      call adcost_averagesfields( mytime,myiter,mythid )
      call barrier( mythid )
      do ilev_3 = nchklev_3, 1, -1
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                evap(ip1,ip2,ip3,ip4) = evaph(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip5 = 1, nsy
          do ip4 = 1, nsx
            do ip3 = 1, 3
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  seaice_dynvars3(ip1,ip2,ip3,ip4,ip5) = 
     $yseaice_dynvars3o(ip1,ip2,ip3,ip4,ip5)
                end do
              end do
            end do
          end do
        end do
        do ip5 = 1, nsy
          do ip4 = 1, nsx
            do ip3 = 1, 3
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  trans1(ip1,ip2,ip3,ip4,ip5) = ytrans1o(ip1,ip2,ip3,
     $ip4,ip5)
                end do
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                trans2(ip1,ip2,ip3,ip4) = ytrans2o(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        call initialise_varia( mythid )
        call barrier( mythid )
        do ilev_32 = 1, ilev_3-1
          if (ilev_32 .le. max_lev3) then
            do ilev_2 = 1, nchklev_2
              if (ilev_2 .le. max_lev2) then
                do ilev_1 = 1, nchklev_1
                  iloop = (ilev_32-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                  if (iloop .le. ntimesteps) then
                    niter0 = int(starttime/deltatclock)
                    ikey_dynamics = ilev_1
                    myiter = niter0+iloop-1
                    mytime = starttime+float(iloop-1)*deltatclock
                    if (exactconserv) then
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          call calc_exact_eta(  .false. ,bi,bj,uvel,vvel,starttime,
     $niter0,mythid )
        end do
      end do
      if (implicdiv2dflow .ne. 1.d0) then
        call exch_xy_rl( etah,mythid )
      endif
                    endif
                    call exf_getforcing( mytime,myiter,mythid )
                    call barrier( mythid )
                    if (useseaice) then
      call seaice_model( mytime,myiter,mythid )
                    endif
                    myiter = niter0+iloop
                    mytime = starttime+float(iloop)*deltatclock
                    call dummy_in_stepping( mytime,myiter,mythid )
                    call do_fields_blocking_exchanges( mythid )
                    myiter = niter0+iloop-1
                    mytime = starttime+float(iloop-1)*deltatclock
                    call thermodynamics( mytime,myiter,mythid )
                    if (momstepping) then
      call dynamics( mytime,myiter,mythid )
                    endif
                    call solve_for_pressure( mythid )
                    mytime = starttime+float(iloop)*deltatclock
                    call the_correction_step( mytime,myiter,mythid )
                    call do_fields_blocking_exchanges( mythid )
                  endif
                end do
              endif
            end do
          endif
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                ytrans2s(ip1,ip2,ip3,ip4) = trans2(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip5 = 1, nsy
          do ip4 = 1, nsx
            do ip3 = 1, 3
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  ytrans1s(ip1,ip2,ip3,ip4,ip5) = trans1(ip1,ip2,ip3,
     $ip4,ip5)
                end do
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                yseaice_external1l(ip1,ip2,ip3,ip4) = 
     $seaice_external1(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip5 = 1, nsy
          do ip4 = 1, nsx
            do ip3 = 1, 3
              do ip2 = 1-oly, sny+oly
                do ip1 = 1-olx, snx+olx
                  yseaice_dynvars3s(ip1,ip2,ip3,ip4,ip5) = 
     $seaice_dynvars3(ip1,ip2,ip3,ip4,ip5)
                end do
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                ymix2r(ip1,ip2,ip3,ip4) = mix2(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                swdown1l(ip1,ip2,ip3,ip4) = swdown1(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                swdown0l(ip1,ip2,ip3,ip4) = swdown0(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                runoffr(ip1,ip2,ip3,ip4) = runoff(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                lwdown1l(ip1,ip2,ip3,ip4) = lwdown1(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        do ip4 = 1, nsy
          do ip3 = 1, nsx
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                lwdown0l(ip1,ip2,ip3,ip4) = lwdown0(ip1,ip2,ip3,ip4)
              end do
            end do
          end do
        end do
        if (ilev_3 .le. max_lev3) then
          call adread ( mythid,
     &            'tapelev3_1_the_main_loop_gsnm1',30,9,1,gsnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_2_the_main_loop_gtnm1',30,9,2,gtnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_3_the_main_loop_gunm1',30,9,3,gunm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_4_the_main_loop_gvnm1',30,9,4,gvnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_5_the_main_loop_theta',30,9,5,theta,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_6_the_main_loop_salt',29,9,6,salt,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_7_the_main_loop_uvel',29,9,7,uvel,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_8_the_main_loop_vvel',29,9,8,vvel,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_9_the_main_loop_wvel',29,9,9,wvel,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_10_the_main_loop_etan',30,9,10,etan,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_11_the_main_loop_gu',28,9,11,gu,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_12_the_main_loop_gv',28,9,12,gv,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_13_the_main_loop_uveld',31,9,13,uveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_14_the_main_loop_vveld',31,9,14,vveld,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_15_the_main_loop_etanm1',32,9,15,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_16_the_main_loop_unm1',30,9,16,unm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_17_the_main_loop_vnm1',30,9,17,vnm1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_18_the_main_loop_gucd',30,9,18,gucd,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_19_the_main_loop_gvcd',30,9,19,gvcd,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_20_the_main_loop_etah',30,9,20,etah,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_21_the_main_loop_hdivflow',34,9,21,
     $hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 
     $)
          call adread ( mythid,
     &            'tapelev3_22_the_main_loop_aqh0',30,9,22,aqh0,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_23_the_main_loop_aqh1',30,9,23,aqh1,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_24_the_main_loop_atemp0',32,9,24,
     $atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_25_the_main_loop_atemp1',32,9,25,
     $atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_26_the_main_loop_precip0',33,9,26,
     $precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_27_the_main_loop_precip1',33,9,27,
     $precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_28_the_main_loop_lwflux0',33,9,28,
     $lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_29_the_main_loop_lwflux1',33,9,29,
     $lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_30_the_main_loop_swflux0',33,9,30,
     $swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_31_the_main_loop_swflux1',33,9,31,
     $swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_32_the_main_loop_evap',30,9,32,evap,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_33_the_main_loop_uwind0',32,9,33,
     $uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_34_the_main_loop_uwind1',32,9,34,
     $uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_35_the_main_loop_vwind0',32,9,35,
     $vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
          call adread ( mythid,
     &            'tapelev3_36_the_main_loop_vwind1',32,9,36,
     $vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
C----------------------------------------------
C OPEN TAPE tapelev2
C----------------------------------------------
          call adopen ( mythid,
     &            'tapelev2_1_the_main_loop_gsnm1',30,10,1,8,15456 
     $)
          call adopen ( mythid,
     &            'tapelev2_2_the_main_loop_gtnm1',30,10,2,8,15456 
     $)
          call adopen ( mythid,
     &            'tapelev2_3_the_main_loop_gunm1',30,10,3,8,15456 
     $)
          call adopen ( mythid,
     &            'tapelev2_4_the_main_loop_gvnm1',30,10,4,8,15456 
     $)
          call adopen ( mythid,
     &            'tapelev2_5_the_main_loop_theta',30,10,5,8,15456 
     $)
          call adopen ( mythid,
     &            'tapelev2_6_the_main_loop_salt',29,10,6,8,15456 )
          call adopen ( mythid,
     &            'tapelev2_7_the_main_loop_uvel',29,10,7,8,15456 )
          call adopen ( mythid,
     &            'tapelev2_8_the_main_loop_vvel',29,10,8,8,15456 )
          call adopen ( mythid,
     &            'tapelev2_9_the_main_loop_wvel',29,10,9,8,15456 )
          call adopen ( mythid,
     &            'tapelev2_10_the_main_loop_etan',30,10,10,8,672 )
          call adopen ( mythid,
     &            'tapelev2_11_the_main_loop_gu',28,10,11,8,15456 )
          call adopen ( mythid,
     &            'tapelev2_12_the_main_loop_gv',28,10,12,8,15456 )
          call adopen ( mythid,
     &            'tapelev2_13_the_main_loop_uveld',31,10,13,8,
     $15456 )
          call adopen ( mythid,
     &            'tapelev2_14_the_main_loop_vveld',31,10,14,8,
     $15456 )
          call adopen ( mythid,
     &            'tapelev2_15_the_main_loop_etanm1',32,10,15,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_16_the_main_loop_unm1',30,10,16,8,
     $15456 )
          call adopen ( mythid,
     &            'tapelev2_17_the_main_loop_vnm1',30,10,17,8,
     $15456 )
          call adopen ( mythid,
     &            'tapelev2_18_the_main_loop_gucd',30,10,18,8,
     $15456 )
          call adopen ( mythid,
     &            'tapelev2_19_the_main_loop_gvcd',30,10,19,8,
     $15456 )
          call adopen ( mythid,
     &            'tapelev2_20_the_main_loop_etah',30,10,20,8,672 )
          call adopen ( mythid,
     &            'tapelev2_21_the_main_loop_hdivflow',34,10,21,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_22_the_main_loop_aqh0',30,10,22,8,672 )
          call adopen ( mythid,
     &            'tapelev2_23_the_main_loop_aqh1',30,10,23,8,672 )
          call adopen ( mythid,
     &            'tapelev2_24_the_main_loop_atemp0',32,10,24,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_25_the_main_loop_atemp1',32,10,25,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_26_the_main_loop_precip0',33,10,26,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_27_the_main_loop_precip1',33,10,27,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_28_the_main_loop_lwflux0',33,10,28,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_29_the_main_loop_lwflux1',33,10,29,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_30_the_main_loop_swflux0',33,10,30,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_31_the_main_loop_swflux1',33,10,31,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_32_the_main_loop_evap',30,10,32,8,672 )
          call adopen ( mythid,
     &            'tapelev2_33_the_main_loop_uwind0',32,10,33,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_34_the_main_loop_uwind1',32,10,34,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_35_the_main_loop_vwind0',32,10,35,8,
     $672 )
          call adopen ( mythid,
     &            'tapelev2_36_the_main_loop_vwind1',32,10,36,8,
     $672 )

C----------------------------------------------
C TAPE COMPUTATIONS
C----------------------------------------------
          do ilev_2 = 1, nchklev_2-1
            if (ilev_2 .le. max_lev2) then
              call adwrite( mythid,
     &            'tapelev2_1_the_main_loop_gsnm1',30,10,1,
     $gsnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_2_the_main_loop_gtnm1',30,10,2,
     $gtnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_3_the_main_loop_gunm1',30,10,3,
     $gunm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_4_the_main_loop_gvnm1',30,10,4,
     $gvnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_5_the_main_loop_theta',30,10,5,
     $theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_6_the_main_loop_salt',29,10,6,
     $salt,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_7_the_main_loop_uvel',29,10,7,
     $uvel,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_8_the_main_loop_vvel',29,10,8,
     $vvel,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_9_the_main_loop_wvel',29,10,9,
     $wvel,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_10_the_main_loop_etan',30,10,10,
     $etan,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_11_the_main_loop_gu',28,10,11,gu,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_12_the_main_loop_gv',28,10,12,gv,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_13_the_main_loop_uveld',31,10,13,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_14_the_main_loop_vveld',31,10,14,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adwrite( mythid,
     &            'tapelev2_15_the_main_loop_etanm1',32,10,15,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_16_the_main_loop_unm1',30,10,16,
     $unm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_17_the_main_loop_vnm1',30,10,17,
     $vnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_18_the_main_loop_gucd',30,10,18,
     $gucd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_19_the_main_loop_gvcd',30,10,19,
     $gvcd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_20_the_main_loop_etah',30,10,20,
     $etah,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_21_the_main_loop_hdivflow',34,10,
     $21,hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_22_the_main_loop_aqh0',30,10,22,
     $aqh0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_23_the_main_loop_aqh1',30,10,23,
     $aqh1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_24_the_main_loop_atemp0',32,10,24,
     $atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_25_the_main_loop_atemp1',32,10,25,
     $atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_26_the_main_loop_precip0',33,10,
     $26,precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_27_the_main_loop_precip1',33,10,
     $27,precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_28_the_main_loop_lwflux0',33,10,
     $28,lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_29_the_main_loop_lwflux1',33,10,
     $29,lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_30_the_main_loop_swflux0',33,10,
     $30,swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_31_the_main_loop_swflux1',33,10,
     $31,swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_32_the_main_loop_evap',30,10,32,
     $evap,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_33_the_main_loop_uwind0',32,10,33,
     $uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_34_the_main_loop_uwind1',32,10,34,
     $uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_35_the_main_loop_vwind0',32,10,35,
     $vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adwrite( mythid,
     &            'tapelev2_36_the_main_loop_vwind1',32,10,36,
     $vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  niter0 = int(starttime/deltatclock)
                  ikey_dynamics = ilev_1
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  if (exactconserv) then
                    do bj = mybylo(mythid), mybyhi(mythid)
      do bi = mybxlo(mythid), mybxhi(mythid)
        call calc_exact_eta(  .false. ,bi,bj,uvel,vvel,starttime,niter0,
     $mythid )
      end do
                    end do
                    if (implicdiv2dflow .ne. 1.d0) then
      call exch_xy_rl( etah,mythid )
                    endif
                  endif
                  call exf_getforcing( mytime,myiter,mythid )
                  call barrier( mythid )
                  if (useseaice) then
                    call seaice_model( mytime,myiter,mythid )
                  endif
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call thermodynamics( mytime,myiter,mythid )
                  if (momstepping) then
                    call dynamics( mytime,myiter,mythid )
                  endif
                  call solve_for_pressure( mythid )
                  mytime = starttime+float(iloop)*deltatclock
                  call the_correction_step( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                endif
              end do
            endif
          end do
          ilev_2 = nchklev_2
          if (ilev_2 .le. max_lev2) then
            call adwrite( mythid,
     &            'tapelev2_1_the_main_loop_gsnm1',30,10,1,
     $gsnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_2_the_main_loop_gtnm1',30,10,2,
     $gtnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_3_the_main_loop_gunm1',30,10,3,
     $gunm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_4_the_main_loop_gvnm1',30,10,4,
     $gvnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_5_the_main_loop_theta',30,10,5,
     $theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_6_the_main_loop_salt',29,10,6,salt,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_7_the_main_loop_uvel',29,10,7,uvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_8_the_main_loop_vvel',29,10,8,vvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_9_the_main_loop_wvel',29,10,9,wvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_10_the_main_loop_etan',30,10,10,
     $etan,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_11_the_main_loop_gu',28,10,11,gu,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_12_the_main_loop_gv',28,10,12,gv,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_13_the_main_loop_uveld',31,10,13,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_14_the_main_loop_vveld',31,10,14,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_15_the_main_loop_etanm1',32,10,15,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_16_the_main_loop_unm1',30,10,16,
     $unm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_17_the_main_loop_vnm1',30,10,17,
     $vnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_18_the_main_loop_gucd',30,10,18,
     $gucd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_19_the_main_loop_gvcd',30,10,19,
     $gvcd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_20_the_main_loop_etah',30,10,20,
     $etah,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_21_the_main_loop_hdivflow',34,10,21,
     $hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 
     $)
            call adwrite( mythid,
     &            'tapelev2_22_the_main_loop_aqh0',30,10,22,
     $aqh0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_23_the_main_loop_aqh1',30,10,23,
     $aqh1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_24_the_main_loop_atemp0',32,10,24,
     $atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_25_the_main_loop_atemp1',32,10,25,
     $atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_26_the_main_loop_precip0',33,10,26,
     $precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_27_the_main_loop_precip1',33,10,27,
     $precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_28_the_main_loop_lwflux0',33,10,28,
     $lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_29_the_main_loop_lwflux1',33,10,29,
     $lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_30_the_main_loop_swflux0',33,10,30,
     $swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_31_the_main_loop_swflux1',33,10,31,
     $swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_32_the_main_loop_evap',30,10,32,
     $evap,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_33_the_main_loop_uwind0',32,10,33,
     $uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_34_the_main_loop_uwind1',32,10,34,
     $uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_35_the_main_loop_vwind0',32,10,35,
     $vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            call adwrite( mythid,
     &            'tapelev2_36_the_main_loop_vwind1',32,10,36,
     $vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
            do ilev_1 = 1, nchklev_1
              iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
              if (iloop .le. ntimesteps) then
                niter0 = int(starttime/deltatclock)
                call barrier( mythid )
                myiter = niter0+iloop
                mytime = starttime+float(iloop)*deltatclock
                call dummy_in_stepping( mytime,myiter,mythid )
              endif
            end do
          endif

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
          do ilev_2 = nchklev_2, 1, -1
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    lwdown0(ip1,ip2,ip3,ip4) = lwdown0l(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    lwdown1(ip1,ip2,ip3,ip4) = lwdown1l(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    runoff(ip1,ip2,ip3,ip4) = runoffr(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    swdown0(ip1,ip2,ip3,ip4) = swdown0l(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    swdown1(ip1,ip2,ip3,ip4) = swdown1l(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    mix2(ip1,ip2,ip3,ip4) = ymix2r(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip5 = 1, nsy
              do ip4 = 1, nsx
                do ip3 = 1, 3
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      seaice_dynvars3(ip1,ip2,ip3,ip4,ip5) = yseaice_dynvars3s(ip1,ip2,
     $ip3,ip4,ip5)
                    end do
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    seaice_external1(ip1,ip2,ip3,ip4) = 
     $yseaice_external1l(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip5 = 1, nsy
              do ip4 = 1, nsx
                do ip3 = 1, 3
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      trans1(ip1,ip2,ip3,ip4,ip5) = ytrans1s(ip1,ip2,ip3,ip4,ip5)
                    end do
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    trans2(ip1,ip2,ip3,ip4) = ytrans2s(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            call adread ( mythid,
     &            'tapelev3_1_the_main_loop_gsnm1',30,9,1,gsnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_2_the_main_loop_gtnm1',30,9,2,gtnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_3_the_main_loop_gunm1',30,9,3,gunm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_4_the_main_loop_gvnm1',30,9,4,gvnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_5_the_main_loop_theta',30,9,5,theta,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_6_the_main_loop_salt',29,9,6,salt,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_7_the_main_loop_uvel',29,9,7,uvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_8_the_main_loop_vvel',29,9,8,vvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_9_the_main_loop_wvel',29,9,9,wvel,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_10_the_main_loop_etan',30,9,10,etan,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_11_the_main_loop_gu',28,9,11,gu,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_12_the_main_loop_gv',28,9,12,gv,8,(1+
     $snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_13_the_main_loop_uveld',31,9,13,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 
     $)
            call adread ( mythid,
     &            'tapelev3_14_the_main_loop_vveld',31,9,14,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 
     $)
            call adread ( mythid,
     &            'tapelev3_15_the_main_loop_etanm1',32,9,15,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_16_the_main_loop_unm1',30,9,16,unm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_17_the_main_loop_vnm1',30,9,17,vnm1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_18_the_main_loop_gucd',30,9,18,gucd,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_19_the_main_loop_gvcd',30,9,19,gvcd,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_20_the_main_loop_etah',30,9,20,etah,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_21_the_main_loop_hdivflow',34,9,21,
     $hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 
     $)
            call adread ( mythid,
     &            'tapelev3_22_the_main_loop_aqh0',30,9,22,aqh0,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_23_the_main_loop_aqh1',30,9,23,aqh1,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_24_the_main_loop_atemp0',32,9,24,
     $atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_25_the_main_loop_atemp1',32,9,25,
     $atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_26_the_main_loop_precip0',33,9,26,
     $precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_27_the_main_loop_precip1',33,9,27,
     $precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_28_the_main_loop_lwflux0',33,9,28,
     $lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_29_the_main_loop_lwflux1',33,9,29,
     $lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_30_the_main_loop_swflux0',33,9,30,
     $swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_31_the_main_loop_swflux1',33,9,31,
     $swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_32_the_main_loop_evap',30,9,32,evap,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_33_the_main_loop_uwind0',32,9,33,
     $uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_34_the_main_loop_uwind1',32,9,34,
     $uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_35_the_main_loop_vwind0',32,9,35,
     $vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            call adread ( mythid,
     &            'tapelev3_36_the_main_loop_vwind1',32,9,36,
     $vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_3 )
            do ilev_24 = 1, ilev_2-1
              if (ilev_24 .le. max_lev2) then
                do ilev_1 = 1, nchklev_1
                  iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_24-1)*
     $nchklev_1+ilev_1
                  if (iloop .le. ntimesteps) then
                    niter0 = int(starttime/deltatclock)
                    ikey_dynamics = ilev_1
                    myiter = niter0+iloop-1
                    mytime = starttime+float(iloop-1)*deltatclock
                    if (exactconserv) then
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          call calc_exact_eta(  .false. ,bi,bj,uvel,vvel,starttime,
     $niter0,mythid )
        end do
      end do
      if (implicdiv2dflow .ne. 1.d0) then
        call exch_xy_rl( etah,mythid )
      endif
                    endif
                    call exf_getforcing( mytime,myiter,mythid )
                    call barrier( mythid )
                    if (useseaice) then
      call seaice_model( mytime,myiter,mythid )
                    endif
                    myiter = niter0+iloop
                    mytime = starttime+float(iloop)*deltatclock
                    call dummy_in_stepping( mytime,myiter,mythid )
                    call do_fields_blocking_exchanges( mythid )
                    myiter = niter0+iloop-1
                    mytime = starttime+float(iloop-1)*deltatclock
                    call thermodynamics( mytime,myiter,mythid )
                    if (momstepping) then
      call dynamics( mytime,myiter,mythid )
                    endif
                    call solve_for_pressure( mythid )
                    mytime = starttime+float(iloop)*deltatclock
                    call the_correction_step( mytime,myiter,mythid )
                    call do_fields_blocking_exchanges( mythid )
                  endif
                end do
              endif
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    ytrans2u(ip1,ip2,ip3,ip4) = trans2(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip5 = 1, nsy
              do ip4 = 1, nsx
                do ip3 = 1, 3
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      ytrans1u(ip1,ip2,ip3,ip4,ip5) = trans1(ip1,ip2,ip3,ip4,ip5)
                    end do
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    yseaice_external1m(ip1,ip2,ip3,ip4) = 
     $seaice_external1(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip5 = 1, nsy
              do ip4 = 1, nsx
                do ip3 = 1, 3
                  do ip2 = 1-oly, sny+oly
                    do ip1 = 1-olx, snx+olx
      yseaice_dynvars3u(ip1,ip2,ip3,ip4,ip5) = seaice_dynvars3(ip1,ip2,
     $ip3,ip4,ip5)
                    end do
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    ymix2t(ip1,ip2,ip3,ip4) = mix2(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    swdown1m(ip1,ip2,ip3,ip4) = swdown1(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    swdown0m(ip1,ip2,ip3,ip4) = swdown0(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    runofft(ip1,ip2,ip3,ip4) = runoff(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    lwdown1m(ip1,ip2,ip3,ip4) = lwdown1(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            do ip4 = 1, nsy
              do ip3 = 1, nsx
                do ip2 = 1-oly, sny+oly
                  do ip1 = 1-olx, snx+olx
                    lwdown0m(ip1,ip2,ip3,ip4) = lwdown0(ip1,ip2,ip3,ip4)
                  end do
                end do
              end do
            end do
            if (ilev_2 .le. max_lev2) then
              call adread ( mythid,
     &            'tapelev2_1_the_main_loop_gsnm1',30,10,1,
     $gsnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_2_the_main_loop_gtnm1',30,10,2,
     $gtnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_3_the_main_loop_gunm1',30,10,3,
     $gunm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_4_the_main_loop_gvnm1',30,10,4,
     $gvnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_5_the_main_loop_theta',30,10,5,
     $theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_6_the_main_loop_salt',29,10,6,salt,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_7_the_main_loop_uvel',29,10,7,uvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_8_the_main_loop_vvel',29,10,8,vvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_9_the_main_loop_wvel',29,10,9,wvel,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_10_the_main_loop_etan',30,10,10,
     $etan,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_11_the_main_loop_gu',28,10,11,gu,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_12_the_main_loop_gv',28,10,12,gv,8,
     $(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_13_the_main_loop_uveld',31,10,13,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_14_the_main_loop_vveld',31,10,14,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
              call adread ( mythid,
     &            'tapelev2_15_the_main_loop_etanm1',32,10,15,
     $etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_16_the_main_loop_unm1',30,10,16,
     $unm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_17_the_main_loop_vnm1',30,10,17,
     $vnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_18_the_main_loop_gucd',30,10,18,
     $gucd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_19_the_main_loop_gvcd',30,10,19,
     $gvcd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_20_the_main_loop_etah',30,10,20,
     $etah,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_21_the_main_loop_hdivflow',34,10,
     $21,hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
              call adread ( mythid,
     &            'tapelev2_22_the_main_loop_aqh0',30,10,22,
     $aqh0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_23_the_main_loop_aqh1',30,10,23,
     $aqh1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_24_the_main_loop_atemp0',32,10,24,
     $atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_25_the_main_loop_atemp1',32,10,25,
     $atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_26_the_main_loop_precip0',33,10,26,
     $precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_27_the_main_loop_precip1',33,10,27,
     $precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_28_the_main_loop_lwflux0',33,10,28,
     $lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_29_the_main_loop_lwflux1',33,10,29,
     $lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_30_the_main_loop_swflux0',33,10,30,
     $swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_31_the_main_loop_swflux1',33,10,31,
     $swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_32_the_main_loop_evap',30,10,32,
     $evap,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_33_the_main_loop_uwind0',32,10,33,
     $uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_34_the_main_loop_uwind1',32,10,34,
     $uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_35_the_main_loop_vwind0',32,10,35,
     $vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
              call adread ( mythid,
     &            'tapelev2_36_the_main_loop_vwind1',32,10,36,
     $vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
C----------------------------------------------
C TAPE COMPUTATIONS
C----------------------------------------------
              do ilev_1 = 1, nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  niter0 = int(starttime/deltatclock)
                  ikey_dynamics = ilev_1
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  if (exactconserv) then
                    do bj = mybylo(mythid), mybyhi(mythid)
      do bi = mybxlo(mythid), mybxhi(mythid)
        call calc_exact_eta(  .false. ,bi,bj,uvel,vvel,starttime,niter0,
     $mythid )
      end do
                    end do
                    if (implicdiv2dflow .ne. 1.d0) then
      call exch_xy_rl( etah,mythid )
                    endif
                  endif
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_aqh0_1h(ip1,ip2,ip3,ip4,ikey_dynamics) = aqh0(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_aqh1_2h(ip1,ip2,ip3,ip4,ikey_dynamics) = aqh1(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_atemp0_3h(ip1,ip2,ip3,ip4,ikey_dynamics) = atemp0(ip1-
     $1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_atemp1_4h(ip1,ip2,ip3,ip4,ikey_dynamics) = atemp1(ip1-
     $1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_precip0_5h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $precip0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_precip1_6h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $precip1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_lwflux0_7h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $lwflux0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_lwflux1_8h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $lwflux1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_swflux0_9h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $swflux0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_swflux1_10h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $swflux1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_evap_11h(ip1,ip2,ip3,ip4,ikey_dynamics) = evap(ip1-1+
     $1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_uwind0_12h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $uwind0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_uwind1_13h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $uwind1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_vwind0_14h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $vwind0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          comlev1_vwind1_15h(ip1,ip2,ip3,ip4,ikey_dynamics) = 
     $vwind1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            comlev1_theta_16h(ip1,ip2,ip3,ip4,ip5,ikey_dynamics) = 
     $theta(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5)
          end do
        end do
      end do
                    end do
                  end do
                  call mdexf_getforcing( mytime,myiter,mythid )
                  call barrier( mythid )
                  if (useseaice) then
                    call seaice_model( mytime,myiter,mythid )
                  endif
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call mdthermodynamics( mytime,myiter,mythid )
                  if (momstepping) then
                    call mddynamics( mytime,myiter,mythid )
                  endif
                  call solve_for_pressure( mythid )
                  mytime = starttime+float(iloop)*deltatclock
                  call mdthe_correction_step( mytime,myiter,mythid )
                  call do_fields_blocking_exchanges( mythid )
                endif
              end do

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
              do ilev_1 = nchklev_1, 1, -1
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        lwdown0(ip1,ip2,ip3,ip4) = lwdown0m(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        lwdown1(ip1,ip2,ip3,ip4) = lwdown1m(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        runoff(ip1,ip2,ip3,ip4) = runofft(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        swdown0(ip1,ip2,ip3,ip4) = swdown0m(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        swdown1(ip1,ip2,ip3,ip4) = swdown1m(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        mix2(ip1,ip2,ip3,ip4) = ymix2t(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip5 = 1, nsy
                  do ip4 = 1, nsx
                    do ip3 = 1, 3
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          seaice_dynvars3(ip1,ip2,ip3,ip4,ip5) = yseaice_dynvars3u(ip1,
     $ip2,ip3,ip4,ip5)
        end do
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        seaice_external1(ip1,ip2,ip3,ip4) = yseaice_external1m(ip1,ip2,
     $ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip5 = 1, nsy
                  do ip4 = 1, nsx
                    do ip3 = 1, 3
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          trans1(ip1,ip2,ip3,ip4,ip5) = ytrans1u(ip1,ip2,ip3,ip4,ip5)
        end do
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        trans2(ip1,ip2,ip3,ip4) = ytrans2u(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                call adread ( mythid,
     &            'tapelev2_1_the_main_loop_gsnm1',30,10,1,
     $gsnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_2_the_main_loop_gtnm1',30,10,2,
     $gtnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_3_the_main_loop_gunm1',30,10,3,
     $gunm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_4_the_main_loop_gvnm1',30,10,4,
     $gvnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_5_the_main_loop_theta',30,10,5,
     $theta,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_6_the_main_loop_salt',29,10,6,
     $salt,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_7_the_main_loop_uvel',29,10,7,
     $uvel,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_8_the_main_loop_vvel',29,10,8,
     $vvel,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_9_the_main_loop_wvel',29,10,9,
     $wvel,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_10_the_main_loop_etan',30,10,10,
     $etan,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_11_the_main_loop_gu',28,10,11,gu,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_12_the_main_loop_gv',28,10,12,gv,
     $8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_13_the_main_loop_uveld',31,10,13,
     $uveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_14_the_main_loop_vveld',31,10,14,
     $vveld,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 
     $)
                call adread ( mythid,
     &            'tapelev2_15_the_main_loop_etanm1',32,10,
     $15,etanm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_16_the_main_loop_unm1',30,10,16,
     $unm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_17_the_main_loop_vnm1',30,10,17,
     $vnm1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_18_the_main_loop_gucd',30,10,18,
     $gucd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_19_the_main_loop_gvcd',30,10,19,
     $gvcd,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nr*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_20_the_main_loop_etah',30,10,20,
     $etah,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_21_the_main_loop_hdivflow',34,10,
     $21,hdivflow,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_22_the_main_loop_aqh0',30,10,22,
     $aqh0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_23_the_main_loop_aqh1',30,10,23,
     $aqh1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_24_the_main_loop_atemp0',32,10,
     $24,atemp0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_25_the_main_loop_atemp1',32,10,
     $25,atemp1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_26_the_main_loop_precip0',33,10,
     $26,precip0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_27_the_main_loop_precip1',33,10,
     $27,precip1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_28_the_main_loop_lwflux0',33,10,
     $28,lwflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_29_the_main_loop_lwflux1',33,10,
     $29,lwflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_30_the_main_loop_swflux0',33,10,
     $30,swflux0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_31_the_main_loop_swflux1',33,10,
     $31,swflux1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_32_the_main_loop_evap',30,10,32,
     $evap,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,ilev_2 )
                call adread ( mythid,
     &            'tapelev2_33_the_main_loop_uwind0',32,10,
     $33,uwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_34_the_main_loop_uwind1',32,10,
     $34,uwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_35_the_main_loop_vwind0',32,10,
     $35,vwind0,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                call adread ( mythid,
     &            'tapelev2_36_the_main_loop_vwind1',32,10,
     $36,vwind1,8,(1+snx+olx-(1-olx))*(1+sny+oly-(1-oly))*nsx*nsy,
     $ilev_2 )
                do ilev_18 = 1, nchklev_1-1
                  iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_18
                  if (iloop .le. ntimesteps) then
                    niter0 = int(starttime/deltatclock)
                    ikey_dynamics = ilev_18
                    myiter = niter0+iloop-1
                    mytime = starttime+float(iloop-1)*deltatclock
                    if (exactconserv) then
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          call calc_exact_eta(  .false. ,bi,bj,uvel,vvel,starttime,
     $niter0,mythid )
        end do
      end do
      if (implicdiv2dflow .ne. 1.d0) then
        call exch_xy_rl( etah,mythid )
      endif
                    endif
                    call exf_getforcing( mytime,myiter,mythid )
                    call barrier( mythid )
                    if (useseaice) then
      call seaice_model( mytime,myiter,mythid )
                    endif
                    myiter = niter0+iloop
                    mytime = starttime+float(iloop)*deltatclock
                    call dummy_in_stepping( mytime,myiter,mythid )
                    call do_fields_blocking_exchanges( mythid )
                    myiter = niter0+iloop-1
                    mytime = starttime+float(iloop-1)*deltatclock
                    call thermodynamics( mytime,myiter,mythid )
                    if (momstepping) then
      call dynamics( mytime,myiter,mythid )
                    endif
                    call solve_for_pressure( mythid )
                    mytime = starttime+float(iloop)*deltatclock
                    call the_correction_step( mytime,myiter,mythid )
                    call do_fields_blocking_exchanges( mythid )
                  endif
                end do
                ilev_18 = nchklev_1
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_18
                if (iloop .le. ntimesteps) then
                  niter0 = int(starttime/deltatclock)
                  ikey_dynamics = ilev_18
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call exf_getforcing( mytime,myiter,mythid )
                  call barrier( mythid )
                  if (useseaice) then
                    call seaice_model( mytime,myiter,mythid )
                  endif
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                endif
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        ytrans2v(ip1,ip2,ip3,ip4) = trans2(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip5 = 1, nsy
                  do ip4 = 1, nsx
                    do ip3 = 1, 3
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          ytrans1v(ip1,ip2,ip3,ip4,ip5) = trans1(ip1,ip2,ip3,ip4,ip5)
        end do
      end do
                    end do
                  end do
                end do
                do ip5 = 1, nsy
                  do ip4 = 1, nsx
                    do ip3 = 1, 3
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          yseaice_dynvars3v(ip1,ip2,ip3,ip4,ip5) = seaice_dynvars3(ip1,
     $ip2,ip3,ip4,ip5)
        end do
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        ymix2u(ip1,ip2,ip3,ip4) = mix2(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                do ip4 = 1, nsy
                  do ip3 = 1, nsx
                    do ip2 = 1-oly, sny+oly
      do ip1 = 1-olx, snx+olx
        runoffu(ip1,ip2,ip3,ip4) = runoff(ip1,ip2,ip3,ip4)
      end do
                    end do
                  end do
                end do
                iloop = (ilev_3-1)*nchklev_2*nchklev_1+(ilev_2-1)*
     $nchklev_1+ilev_1
                if (iloop .le. ntimesteps) then
                  niter0 = int(starttime/deltatclock)
                  ikey_dynamics = ilev_1
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          aqh0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = comlev1_aqh0_1h(ip1,
     $ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          aqh1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = comlev1_aqh1_2h(ip1,
     $ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          atemp0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_atemp0_3h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          atemp1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_atemp1_4h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          precip0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_precip0_5h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          precip1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_precip1_6h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          lwflux0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_lwflux0_7h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          lwflux1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_lwflux1_8h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          swflux0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_swflux0_9h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          swflux1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_swflux1_10h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          evap(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = comlev1_evap_11h(ip1,
     $ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          uwind0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_uwind0_12h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          uwind1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_uwind1_13h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          vwind0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_vwind0_14h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          vwind1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_vwind1_15h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            theta(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5) = 
     $comlev1_theta_16h(ip1,ip2,ip3,ip4,ip5,ikey_dynamics)
          end do
        end do
      end do
                    end do
                  end do
                  call exf_getforcing( mytime,myiter,mythid )
                  call barrier( mythid )
                  if (useseaice) then
                    call seaice_model( mytime,myiter,mythid )
                  endif
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call dummy_in_stepping( mytime,myiter,mythid )
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop)*deltatclock
                  call addo_fields_blocking_exchanges( mythid )
                  call adthe_correction_step( mytime,mythid )
                  call adsolve_for_pressure( mythid )
                  if (momstepping) then
                    call addynamics( myiter,mythid )
                  endif
                  mytime = starttime+float(iloop-1)*deltatclock
                  call adthermodynamics( mytime,myiter,mythid )
                  call addo_fields_blocking_exchanges( mythid )
                  myiter = niter0+iloop
                  mytime = starttime+float(iloop)*deltatclock
                  call addummy_in_stepping( mytime,myiter,mythid )
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          runoff(ip1,ip2,ip3,ip4) = runoffu(ip1,ip2,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          mix2(ip1,ip2,ip3,ip4) = ymix2u(ip1,ip2,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, 3
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            seaice_dynvars3(ip1,ip2,ip3,ip4,ip5) = 
     $yseaice_dynvars3v(ip1,ip2,ip3,ip4,ip5)
          end do
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, 3
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            trans1(ip1,ip2,ip3,ip4,ip5) = ytrans1v(ip1,ip2,ip3,ip4,ip5)
          end do
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          trans2(ip1,ip2,ip3,ip4) = ytrans2v(ip1,ip2,ip3,ip4)
        end do
      end do
                    end do
                  end do
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          evap(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = comlev1_evap_11h(ip1,
     $ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            theta(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5) = 
     $comlev1_theta_16h(ip1,ip2,ip3,ip4,ip5,ikey_dynamics)
          end do
        end do
      end do
                    end do
                  end do
                  call exf_getforcing( mytime,myiter,mythid )
                  call barrier( mythid )
                  if (useseaice) then
                    call adseaice_model( mythid )
                  endif
                  call barrier( mythid )
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          aqh0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = comlev1_aqh0_1h(ip1,
     $ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          aqh1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = comlev1_aqh1_2h(ip1,
     $ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          atemp0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_atemp0_3h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          atemp1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_atemp1_4h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          uwind0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_uwind0_12h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          uwind1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_uwind1_13h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          vwind0(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_vwind0_14h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip4 = 1, nsy
                    do ip3 = 1, nsx
      do ip2 = 1, 1+sny+oly-(1-oly)
        do ip1 = 1, 1+snx+olx-(1-olx)
          vwind1(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4) = 
     $comlev1_vwind1_15h(ip1,ip2,ip3,ip4,ikey_dynamics)
        end do
      end do
                    end do
                  end do
                  do ip5 = 1, nsy
                    do ip4 = 1, nsx
      do ip3 = 1, nr
        do ip2 = 1, 1+sny+oly-(1-oly)
          do ip1 = 1, 1+snx+olx-(1-olx)
            theta(ip1-1+1-olx,ip2-1+1-oly,ip3,ip4,ip5) = 
     $comlev1_theta_16h(ip1,ip2,ip3,ip4,ip5,ikey_dynamics)
          end do
        end do
      end do
                    end do
                  end do
                  call adexf_getforcing( mytime,myiter,mythid )
                  if (exactconserv) then
                    if (implicdiv2dflow .ne. 1.d0) then
      call adexch_xy_rl( mythid,adetah )
                    endif
                    do bj = mybyhi(mythid), mybylo(mythid), -1
      do bi = mybxhi(mythid), mybxlo(mythid), -1
        call adcalc_exact_eta(  .false. ,bi,bj,starttime,aduvel,advvel )
      end do
                    end do
                  endif
                  myiter = niter0+iloop-1
                  mytime = starttime+float(iloop-1)*deltatclock
                  call adcost_averagesfields( mytime,myiter,mythid )
                endif
              end do

            endif
          end do

C----------------------------------------------
C CLOSE TAPE tapelev2
C----------------------------------------------
          call adclose( mythid,
     &            'tapelev2_1_the_main_loop_gsnm1',30,10,1,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_2_the_main_loop_gtnm1',30,10,2,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_3_the_main_loop_gunm1',30,10,3,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_4_the_main_loop_gvnm1',30,10,4,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_5_the_main_loop_theta',30,10,5,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_6_the_main_loop_salt',29,10,6,8,15456 
     $)
          call adclose( mythid,
     &            'tapelev2_7_the_main_loop_uvel',29,10,7,8,15456 
     $)
          call adclose( mythid,
     &            'tapelev2_8_the_main_loop_vvel',29,10,8,8,15456 
     $)
          call adclose( mythid,
     &            'tapelev2_9_the_main_loop_wvel',29,10,9,8,15456 
     $)
          call adclose( mythid,
     &            'tapelev2_10_the_main_loop_etan',30,10,10,8,672 
     $)
          call adclose( mythid,
     &            'tapelev2_11_the_main_loop_gu',28,10,11,8,15456 
     $)
          call adclose( mythid,
     &            'tapelev2_12_the_main_loop_gv',28,10,12,8,15456 
     $)
          call adclose( mythid,
     &            'tapelev2_13_the_main_loop_uveld',31,10,13,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_14_the_main_loop_vveld',31,10,14,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_15_the_main_loop_etanm1',32,10,15,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_16_the_main_loop_unm1',30,10,16,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_17_the_main_loop_vnm1',30,10,17,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_18_the_main_loop_gucd',30,10,18,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_19_the_main_loop_gvcd',30,10,19,8,
     $15456 )
          call adclose( mythid,
     &            'tapelev2_20_the_main_loop_etah',30,10,20,8,672 
     $)
          call adclose( mythid,
     &            'tapelev2_21_the_main_loop_hdivflow',34,10,21,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_22_the_main_loop_aqh0',30,10,22,8,672 
     $)
          call adclose( mythid,
     &            'tapelev2_23_the_main_loop_aqh1',30,10,23,8,672 
     $)
          call adclose( mythid,
     &            'tapelev2_24_the_main_loop_atemp0',32,10,24,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_25_the_main_loop_atemp1',32,10,25,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_26_the_main_loop_precip0',33,10,26,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_27_the_main_loop_precip1',33,10,27,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_28_the_main_loop_lwflux0',33,10,28,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_29_the_main_loop_lwflux1',33,10,29,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_30_the_main_loop_swflux0',33,10,30,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_31_the_main_loop_swflux1',33,10,31,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_32_the_main_loop_evap',30,10,32,8,672 
     $)
          call adclose( mythid,
     &            'tapelev2_33_the_main_loop_uwind0',32,10,33,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_34_the_main_loop_uwind1',32,10,34,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_35_the_main_loop_vwind0',32,10,35,8,
     $672 )
          call adclose( mythid,
     &            'tapelev2_36_the_main_loop_vwind1',32,10,36,8,
     $672 )

        endif
      end do
      call barrier( mythid )
      call adcost_forcing( mythid )
      call adinitialise_varia( mythid )

C----------------------------------------------
C CLOSE TAPE tapelev3
C----------------------------------------------
      call adclose( mythid,
     &            'tapelev3_1_the_main_loop_gsnm1',30,9,1,8,15456 )
      call adclose( mythid,
     &            'tapelev3_2_the_main_loop_gtnm1',30,9,2,8,15456 )
      call adclose( mythid,
     &            'tapelev3_3_the_main_loop_gunm1',30,9,3,8,15456 )
      call adclose( mythid,
     &            'tapelev3_4_the_main_loop_gvnm1',30,9,4,8,15456 )
      call adclose( mythid,
     &            'tapelev3_5_the_main_loop_theta',30,9,5,8,15456 )
      call adclose( mythid,
     &            'tapelev3_6_the_main_loop_salt',29,9,6,8,15456 )
      call adclose( mythid,
     &            'tapelev3_7_the_main_loop_uvel',29,9,7,8,15456 )
      call adclose( mythid,
     &            'tapelev3_8_the_main_loop_vvel',29,9,8,8,15456 )
      call adclose( mythid,
     &            'tapelev3_9_the_main_loop_wvel',29,9,9,8,15456 )
      call adclose( mythid,
     &            'tapelev3_10_the_main_loop_etan',30,9,10,8,672 )
      call adclose( mythid,
     &            'tapelev3_11_the_main_loop_gu',28,9,11,8,15456 )
      call adclose( mythid,
     &            'tapelev3_12_the_main_loop_gv',28,9,12,8,15456 )
      call adclose( mythid,
     &            'tapelev3_13_the_main_loop_uveld',31,9,13,8,15456 )
      call adclose( mythid,
     &            'tapelev3_14_the_main_loop_vveld',31,9,14,8,15456 )
      call adclose( mythid,
     &            'tapelev3_15_the_main_loop_etanm1',32,9,15,8,672 )
      call adclose( mythid,
     &            'tapelev3_16_the_main_loop_unm1',30,9,16,8,15456 )
      call adclose( mythid,
     &            'tapelev3_17_the_main_loop_vnm1',30,9,17,8,15456 )
      call adclose( mythid,
     &            'tapelev3_18_the_main_loop_gucd',30,9,18,8,15456 )
      call adclose( mythid,
     &            'tapelev3_19_the_main_loop_gvcd',30,9,19,8,15456 )
      call adclose( mythid,
     &            'tapelev3_20_the_main_loop_etah',30,9,20,8,672 )
      call adclose( mythid,
     &            'tapelev3_21_the_main_loop_hdivflow',34,9,21,8,672 )
      call adclose( mythid,
     &            'tapelev3_22_the_main_loop_aqh0',30,9,22,8,672 )
      call adclose( mythid,
     &            'tapelev3_23_the_main_loop_aqh1',30,9,23,8,672 )
      call adclose( mythid,
     &            'tapelev3_24_the_main_loop_atemp0',32,9,24,8,672 )
      call adclose( mythid,
     &            'tapelev3_25_the_main_loop_atemp1',32,9,25,8,672 )
      call adclose( mythid,
     &            'tapelev3_26_the_main_loop_precip0',33,9,26,8,672 )
      call adclose( mythid,
     &            'tapelev3_27_the_main_loop_precip1',33,9,27,8,672 )
      call adclose( mythid,
     &            'tapelev3_28_the_main_loop_lwflux0',33,9,28,8,672 )
      call adclose( mythid,
     &            'tapelev3_29_the_main_loop_lwflux1',33,9,29,8,672 )
      call adclose( mythid,
     &            'tapelev3_30_the_main_loop_swflux0',33,9,30,8,672 )
      call adclose( mythid,
     &            'tapelev3_31_the_main_loop_swflux1',33,9,31,8,672 )
      call adclose( mythid,
     &            'tapelev3_32_the_main_loop_evap',30,9,32,8,672 )
      call adclose( mythid,
     &            'tapelev3_33_the_main_loop_uwind0',32,9,33,8,672 )
      call adclose( mythid,
     &            'tapelev3_34_the_main_loop_uwind1',32,9,34,8,672 )
      call adclose( mythid,
     &            'tapelev3_35_the_main_loop_vwind0',32,9,35,8,672 )
      call adclose( mythid,
     &            'tapelev3_36_the_main_loop_vwind1',32,9,36,8,672 )

C----------------------------------------------
C CLOSE TAPE tapelev_ini_bibj_k
C----------------------------------------------
      call adclose( mythid,
     &            'tapelev_ini_bibj_k_1_the_main_loop_theta',40,5,1,4,
     $672 )
      call adclose( mythid,
     &            'tapelev_ini_bibj_k_2_the_main_loop_salt',39,5,2,4,
     $672 )
      call adclose( mythid,
     &            'tapelev_ini_bibj_k_3_the_main_loop_theta',40,5,3,4,
     $672 )
      call adclose( mythid,
     &            'tapelev_ini_bibj_k_4_the_main_loop_salt',39,5,4,4,
     $672 )
      call adclose( mythid,
     &            'tapelev_ini_bibj_k_5_the_main_loop_rhokm1',41,5,5,
     $4,672 )
      call adclose( mythid,
     &            'tapelev_ini_bibj_k_6_the_main_loop_rhok',39,5,6,4,
     $672 )

C----------------------------------------------
C GET DEPENDEND VARIABLES
C----------------------------------------------
      fc = fch


C----------------------------------------------
C FREE DYNAMIC MEMORY
C----------------------------------------------

      end


      subroutine adthermodynamics( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adkux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adgm_hortensor/ adkux, adkvy

      real*4 comlev1_bibj_gs_32h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,
     $24)
      common /cadgs/ comlev1_bibj_gs_32h

      real*4 comlev1_bibj_gt_31h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,
     $24)
      common /cadgt/ comlev1_bibj_gt_31h

      real*4 comlev1_bibj_k_gt_22h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadgu/ comlev1_bibj_k_gt_22h

      real*4 comlev1_bibj_k_kappars_21h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadkappars/ comlev1_bibj_k_kappars_21h

      real*4 comlev1_bibj_k_kappart_20h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadkappart/ comlev1_bibj_k_kappart_20h

      real*4 comlev1_bibj_kappars_26h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkapparu/ comlev1_bibj_kappars_26h

      real*4 comlev1_bibj_kappart_25h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkapparv/ comlev1_bibj_kappart_25h

      real*4 comlev1_bibj_kppdiffkzs_23h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppdiffkzs/ comlev1_bibj_kppdiffkzs_23h

      real*4 comlev1_bibj_kppdiffkzt_22h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppdiffkzt/ comlev1_bibj_kppdiffkzt_22h

      real*4 comlev1_bibj_kppfrac_24h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadkppfrac/ comlev1_bibj_kppfrac_24h

      real*4 comlev1_bibj_kppghat_21h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppghat/ comlev1_bibj_kppghat_21h

      real*4 comlev1_bibj_kwx_18h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadkwx/ comlev1_bibj_kwx_18h

      real*4 comlev1_bibj_kwy_19h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadkwy/ comlev1_bibj_kwy_19h

      real*4 comlev1_bibj_kwz_20h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadkwz/ comlev1_bibj_kwz_20h

      real*4 comlev1_bibj_k_rhokm1_11h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadrhokm2/ comlev1_bibj_k_rhokm1_11h

      real*4 comlev1_bibj_k_rhok_12h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadrhol/ comlev1_bibj_k_rhok_12h

      real*4 comlev1_bibj_salt_28h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadsalw/ comlev1_bibj_salt_28h

      real*4 comlev1_bibj_salt_10h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadsalx/ comlev1_bibj_salt_10h

      real*4 comlev1_bibj_k_salt_16h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadsaly/ comlev1_bibj_k_salt_16h

      real*4 comlev1_bibj_k_salt_14h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadsalz/ comlev1_bibj_k_salt_14h

      real*4 comlev1_bibj_surfacetendencys_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencys/ comlev1_bibj_surfacetendencys_1

      real*4 comlev1_bibj_surfacetendencyt_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencyt/ comlev1_bibj_surfacetendencyt_1

      real*4 comlev1_bibj_surfacetendencyu_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencyu/ comlev1_bibj_surfacetendencyu_1

      real*4 comlev1_bibj_surfacetendencyv_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencyv/ comlev1_bibj_surfacetendencyv_1

      real*4 comlev1_bibj_theta_27h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadthetd/ comlev1_bibj_theta_27h

      real*4 comlev1_bibj_theta_9h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadthete/ comlev1_bibj_theta_9h

      real*4 comlev1_bibj_k_theta_15h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadthetf/ comlev1_bibj_k_theta_15h

      real*4 comlev1_bibj_k_theta_13h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadthetg/ comlev1_bibj_k_theta_13h

      real*4 comlev1_bibj_uvel_29h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduvem/ comlev1_bibj_uvel_29h

      real*4 comlev1_bibj_uvel_11h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduven/ comlev1_bibj_uvel_11h

      real*4 comlev1_bibj_vvel_30h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvvem/ comlev1_bibj_vvel_30h

      real*4 comlev1_bibj_vvel_12h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvven/ comlev1_bibj_vvel_12h

      real*4 comlev1_bibj_wvel_13h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadwvem/ comlev1_bibj_wvel_13h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      logical eebooterror
      logical eeenderror
      logical fatalerror
      logical usecubedsphereexchange
      common /eeparams_l/ eebooterror, fatalerror, eeenderror, 
     $usecubedsphereexchange

      double precision kwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_wtensor/ kwx, kwy, kwz

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /kpp_short/ kppfrac

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      double precision adfvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adfvert(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision adkappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adkappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adrhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision adrtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision adsigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adsigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adutrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision advtrans(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer help_h
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kkey
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip3 = 1, 2
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adfvers(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, 2
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adfvert(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkappars(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adkappart(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhok(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrhokm1(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adrtrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adsigmar(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adsigmax(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip3 = 1, nr
        do ip2 = 1-oly, sny+oly
          do ip1 = 1-olx, snx+olx
            adsigmay(ip1,ip2,ip3) = 0.d0
          end do
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adutrans(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          advtrans(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (staggertimestep .and. usecubedsphereexchange) then
        call adexch_xyz_rl( mythid,adgs )
        call adexch_xyz_rl( mythid,adgt )
      endif
      do bj = mybyhi(mythid), mybylo(mythid), -1
        do bi = mybxhi(mythid), mybxlo(mythid), -1
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                wvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_wvel_13h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              surfacetendencyu(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_surfacetendencyu_1(ip1,ip2,ikey)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              surfacetendencyv(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_surfacetendencyv_1(ip1,ip2,ikey)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              surfacetendencys(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_surfacetendencys_1(ip1,ip2,ikey)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              surfacetendencyt(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_surfacetendencyt_1(ip1,ip2,ikey)
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kwx(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kwx_18h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kwy(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kwy_19h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kwz(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kwz_20h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppghat(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kppghat_21h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppdiffkzt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kppdiffkzt_22h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kppdiffkzs(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_kppdiffkzs_23h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              kppfrac(ip1-1+1-olx,ip2-1+1-oly,bi,bj) = 
     $comlev1_bibj_kppfrac_24h(ip1,ip2,ikey)
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappart(ip1-1+1-olx,ip2-1+1-oly,ip3) = 
     $comlev1_bibj_kappart_25h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappars(ip1-1+1-olx,ip2-1+1-oly,ip3) = 
     $comlev1_bibj_kappars_26h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_theta_27h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_salt_28h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_uvel_29h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_vvel_30h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do k = nr, 1, -1
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call calc_common_factors( bi,bj,imin,imax,jmin,jmax,k,xa,ya,
     $utrans,vtrans,rtrans,maskup,mythid )
            call calc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $kappart,kappars,mythid )
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
          end do
          if (implicitdiffusion) then
            if (saltstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    gs(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_gs_32h(ip1,ip2,ip3,ikey)
                  end do
                end do
              end do
              call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappars,recip_hfacc,gs,adkappars,adgs )
            endif
            if (tempstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    gt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_gt_31h(ip1,ip2,ip3,ikey)
                  end do
                end do
              end do
              call adimpldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappart,recip_hfacc,gt,adkappart,adgt )
            endif
          endif
          do k = 1, nr
            kkey = (ikey-1)*nr+k
            km1 = max(1,k-1)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call calc_common_factors( bi,bj,imin,imax,jmin,jmax,k,xa,ya,
     $utrans,vtrans,rtrans,maskup,mythid )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappart(ip1-1+1-olx,ip2-1+1-oly,k) = 
     $comlev1_bibj_k_kappart_20h(ip1,ip2,kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                kappars(ip1-1+1-olx,ip2-1+1-oly,k) = 
     $comlev1_bibj_k_kappars_21h(ip1,ip2,kkey)
              end do
            end do
            call calc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $kappart,kappars,mythid )
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
            if (allowfreezing .and. ( .not. useseaice)) then
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  gt(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_gt_22h(ip1,ip2,kkey)
                end do
              end do
              call adfreeze( bi,bj,imin,imax,jmin,jmax,k )
            endif
            if (saltstepping) then
              call adtimestep_tracer( bi,bj,imin,imax,jmin,jmax,k,
     $adsalt,adgs )
              call adcalc_gs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,kappars,myiter,mythid,adutrans,
     $advtrans,adrtrans,adkappars,adfvers )
            endif
            if (tempstepping) then
              call adtimestep_tracer( bi,bj,imin,imax,jmin,jmax,k,
     $adtheta,adgt )
              call adcalc_gt( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,kappart,mytime,myiter,mythid,
     $adutrans,advtrans,adrtrans,adkappart,adfvert )
            endif
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call adcalc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $adkappart,adkappars )
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call adcalc_common_factors( bi,bj,imin,imax,jmin,jmax,k,
     $adutrans,advtrans,adrtrans )
          end do
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_theta_9h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_salt_10h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                uvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_uvel_11h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                vvel(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_vvel_12h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          if (usekpp) then
            call adkpp_calc( bi,bj,mytime )
          else
            call adkpp_calc_dummy( bi,bj )
          endif
          if (usegmredi) then
            call adgmredi_calc_tensor( bi,bj,mythid,adsigmax,adsigmay,
     $adsigmar )
          else
            call adgmredi_calc_tensor_dummy( bi,bj,adsigmax,adsigmay,
     $adsigmar )
          endif
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          call adexternal_forcing_surf( bi,bj,imin,imax,jmin,jmax )
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                theta(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_theta_9h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                salt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj) = 
     $comlev1_bibj_salt_10h(ip1,ip2,ip3,ikey)
              end do
            end do
          end do
          do k = 1, nr
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhokm1(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_rhokm1_11h(ip1,ip2,kkey)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                rhok(ip1-1+1-olx,ip2-1+1-oly) = 
     $comlev1_bibj_k_rhok_12h(ip1,ip2,kkey)
              end do
            end do
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call find_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,rhok,mythid )
              if (k .gt. 1) then
                help_h = k-1
                call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,rhokm1,mythid )
              endif
            endif
            if (k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call adcalc_ivdc( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $adrhokm1,adrhok,adkappart,adkappars )
            endif
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call adgrad_sigma( bi,bj,k,adrhok,adrhokm1,adrhok,
     $adsigmax,adsigmay,adsigmar )
              if (k .gt. 1) then
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    theta(ip1-1+1-olx,ip2-1+1-oly,k-1,bi,bj) = 
     $comlev1_bibj_k_theta_15h(ip1,ip2,kkey)
                  end do
                end do
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    salt(ip1-1+1-olx,ip2-1+1-oly,k-1,bi,bj) = 
     $comlev1_bibj_k_salt_16h(ip1,ip2,kkey)
                  end do
                end do
                call adfind_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,adtheta,adsalt,adrhokm1 )
              endif
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  theta(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_theta_13h(ip1,ip2,kkey)
                end do
              end do
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  salt(ip1-1+1-olx,ip2-1+1-oly,k,bi,bj) = 
     $comlev1_bibj_k_salt_14h(ip1,ip2,kkey)
                end do
              end do
              call adfind_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,adtheta,adsalt,adrhok )
            endif
            call adintegrate_for_w( bi,bj,k,aduvel,advvel,adwvel )
          end do
          do k = 1, nr
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                adkvy(i,j,k,bi,bj) = 0.d0
                adkux(i,j,k,bi,bj) = 0.d0
                adgs(i,j,k,bi,bj) = 0.d0
                adgt(i,j,k,bi,bj) = 0.d0
                adkappars(i,j,k) = 0.d0
                adkappart(i,j,k) = 0.d0
                adsigmar(i,j,k) = 0.d0
                adsigmay(i,j,k) = 0.d0
                adsigmax(i,j,k) = 0.d0
              end do
            end do
          end do
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              adrhokm1(i,j) = 0.d0
              adfvers(i,j,2) = 0.d0
              adfvers(i,j,1) = 0.d0
              adfvert(i,j,2) = 0.d0
              adfvert(i,j,1) = 0.d0
            end do
          end do
        end do
      end do

      end


      subroutine mdthermodynamics( mytime, myiter, mythid )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer max_no_threads
      parameter ( max_no_threads = 32 )
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      real*4 comlev1_bibj_gs_32h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,
     $24)
      common /cadgs/ comlev1_bibj_gs_32h

      real*4 comlev1_bibj_gt_31h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),nr,
     $24)
      common /cadgt/ comlev1_bibj_gt_31h

      real*4 comlev1_bibj_k_gt_22h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $552)
      common /cadgu/ comlev1_bibj_k_gt_22h

      real*4 comlev1_bibj_k_kappars_21h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadkappars/ comlev1_bibj_k_kappars_21h

      real*4 comlev1_bibj_k_kappart_20h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadkappart/ comlev1_bibj_k_kappart_20h

      real*4 comlev1_bibj_kappars_26h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkapparu/ comlev1_bibj_kappars_26h

      real*4 comlev1_bibj_kappart_25h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkapparv/ comlev1_bibj_kappart_25h

      real*4 comlev1_bibj_kppdiffkzs_23h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppdiffkzs/ comlev1_bibj_kppdiffkzs_23h

      real*4 comlev1_bibj_kppdiffkzt_22h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppdiffkzt/ comlev1_bibj_kppdiffkzt_22h

      real*4 comlev1_bibj_kppfrac_24h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),24)
      common /cadkppfrac/ comlev1_bibj_kppfrac_24h

      real*4 comlev1_bibj_kppghat_21h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),nr,24)
      common /cadkppghat/ comlev1_bibj_kppghat_21h

      real*4 comlev1_bibj_kwx_18h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadkwx/ comlev1_bibj_kwx_18h

      real*4 comlev1_bibj_kwy_19h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadkwy/ comlev1_bibj_kwy_19h

      real*4 comlev1_bibj_kwz_20h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadkwz/ comlev1_bibj_kwz_20h

      real*4 comlev1_bibj_k_rhokm1_11h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadrhokm2/ comlev1_bibj_k_rhokm1_11h

      real*4 comlev1_bibj_k_rhok_12h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadrhol/ comlev1_bibj_k_rhok_12h

      real*4 comlev1_bibj_salt_28h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadsalw/ comlev1_bibj_salt_28h

      real*4 comlev1_bibj_salt_10h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadsalx/ comlev1_bibj_salt_10h

      real*4 comlev1_bibj_k_salt_16h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadsaly/ comlev1_bibj_k_salt_16h

      real*4 comlev1_bibj_k_salt_14h(1+snx+olx-(1-olx),1+sny+oly-(1-oly)
     $,552)
      common /cadsalz/ comlev1_bibj_k_salt_14h

      real*4 comlev1_bibj_surfacetendencys_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencys/ comlev1_bibj_surfacetendencys_1

      real*4 comlev1_bibj_surfacetendencyt_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencyt/ comlev1_bibj_surfacetendencyt_1

      real*4 comlev1_bibj_surfacetendencyu_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencyu/ comlev1_bibj_surfacetendencyu_1

      real*4 comlev1_bibj_surfacetendencyv_1(1+snx+olx-(1-olx),1+sny+
     $oly-(1-oly),24)
      common /cadsurfacetendencyv/ comlev1_bibj_surfacetendencyv_1

      real*4 comlev1_bibj_theta_27h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadthetd/ comlev1_bibj_theta_27h

      real*4 comlev1_bibj_theta_9h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadthete/ comlev1_bibj_theta_9h

      real*4 comlev1_bibj_k_theta_15h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadthetf/ comlev1_bibj_k_theta_15h

      real*4 comlev1_bibj_k_theta_13h(1+snx+olx-(1-olx),1+sny+oly-(1-
     $oly),552)
      common /cadthetg/ comlev1_bibj_k_theta_13h

      real*4 comlev1_bibj_uvel_29h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduvem/ comlev1_bibj_uvel_29h

      real*4 comlev1_bibj_uvel_11h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /caduven/ comlev1_bibj_uvel_11h

      real*4 comlev1_bibj_vvel_30h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvvem/ comlev1_bibj_vvel_30h

      real*4 comlev1_bibj_vvel_12h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadvven/ comlev1_bibj_vvel_12h

      real*4 comlev1_bibj_wvel_13h(1+snx+olx-(1-olx),1+sny+oly-(1-oly),
     $nr,24)
      common /cadwvem/ comlev1_bibj_wvel_13h

      double precision etah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision etan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision gs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision gvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision salt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision theta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision uvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision vvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision wvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /dynvars_r/ etan, etah, uvel, vvel, wvel, theta, salt, gu, 
     $gv, gt, gs, gunm1, gvnm1, gtnm1, gsnm1

      integer eedataunit
      integer errormessageunit
      integer ioerrorcount(max_no_threads)
      integer modeldataunit
      integer mybxhi(max_no_threads)
      integer mybxlo(max_no_threads)
      integer mybyhi(max_no_threads)
      integer mybylo(max_no_threads)
      integer myprocid
      integer mypx
      integer mypy
      integer myxgloballo
      integer myygloballo
      integer nthreads
      integer ntx
      integer nty
      integer numberofprocs
      integer pidio
      integer scrunit1
      integer scrunit2
      integer standardmessageunit
      common /eeparams_i/ errormessageunit, standardmessageunit, 
     $scrunit1, scrunit2, eedataunit, modeldataunit, numberofprocs, 
     $pidio, myprocid, mypx, mypy, myxgloballo, myygloballo, nthreads, 
     $mybxlo, mybxhi, mybylo, mybyhi, ntx, nty, ioerrorcount

      logical eebooterror
      logical eeenderror
      logical fatalerror
      logical usecubedsphereexchange
      common /eeparams_l/ eebooterror, fatalerror, eeenderror, 
     $usecubedsphereexchange

      double precision kux(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kvy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_hortensor/ kux, kvy

      double precision kwx(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwy(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kwz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /gm_wtensor/ kwx, kwy, kwz

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      double precision kppdiffkzs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppdiffkzt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision kppghat(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision kpphbl(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision kppviscaz(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /kpp/ kppviscaz, kppdiffkzt, kppdiffkzs, kppghat, kpphbl

      double precision kppfrac(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /kpp_short/ kppfrac

      character*(6) eostype
      double precision sbeta
      double precision talpha
      common /parm_eos_lin/ talpha, sbeta, eostype

      integer cg2dchkresfreq
      integer cg2dmaxiters
      integer cg3dchkresfreq
      integer cg3dmaxiters
      integer nchecklev
      integer nenditer
      integer niter0
      integer nonlinfreesurf
      integer ntimesteps
      integer numstepsperpickup
      integer readbinaryprec
      integer saltadvscheme
      integer tempadvscheme
      integer traceradvscheme
      integer writebinaryprec
      integer writestateprec
      common /parm_i/ cg2dmaxiters, cg2dchkresfreq, cg3dmaxiters, 
     $cg3dchkresfreq, niter0, ntimesteps, nenditer, numstepsperpickup, 
     $writestateprec, nchecklev, writebinaryprec, readbinaryprec, 
     $nonlinfreesurf, tempadvscheme, saltadvscheme, traceradvscheme

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      logical useaim
      logical useecco
      logical useflt
      logical usegmredi
      logical usegrdchk
      logical usekpp
      logical useobcs
      logical useseaice
      logical useshap_filt
      logical usezonal_filt
      common /parm_packages/ usekpp, usegmredi, useobcs, useaim, 
     $useecco, useshap_filt, usezonal_filt, usegrdchk, useflt, useseaice

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

      integer ikey_daily_1
      integer ikey_daily_2
      integer ikey_dynamics
      integer ikey_yearly
      integer iloop_daily
      common /tamc_keys_i/ ikey_dynamics, ikey_yearly, ikey_daily_1, 
     $ikey_daily_2, iloop_daily

      integer idkey
      integer ikey
      integer key
      common /tamckeys/ key, ikey, idkey

      double precision surfacetendencys(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision surfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision tempqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /tendency_forcing/ surfacetendencyu, surfacetendencyv, 
     $surfacetendencyt, surfacetendencys, tempqsw

C==============================================
C declare arguments
C==============================================
      integer myiter
      integer mythid
      double precision mytime

C==============================================
C declare local variables
C==============================================
      integer act1
      integer act2
      integer act3
      integer act4
      integer bi
      integer bj
      double precision convectcount(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision fvers(1-olx:snx+olx,1-oly:sny+oly,2)
      double precision fvert(1-olx:snx+olx,1-oly:sny+oly,2)
      integer help_h
      integer i
      integer imax
      integer imin
      integer ip1
      integer ip2
      integer ip3
      integer j
      integer jmax
      integer jmin
      integer k
      double precision kappars(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision kappart(1-olx:snx+olx,1-oly:sny+oly,nr)
      integer kdown
      integer kkey
      integer km1
      integer kup
      double precision maskup(1-olx:snx+olx,1-oly:sny+oly)
      integer max1
      integer max2
      integer max3
      double precision rhok(1-olx:snx+olx,1-oly:sny+oly)
      double precision rhokm1(1-olx:snx+olx,1-oly:sny+oly)
      double precision rtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision sigmar(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmax(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision sigmay(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision utrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision vtrans(1-olx:snx+olx,1-oly:sny+oly)
      double precision xa(1-olx:snx+olx,1-oly:sny+oly)
      double precision ya(1-olx:snx+olx,1-oly:sny+oly)

C**********************************************
C executable statements of routine
C**********************************************
      do j = 1-oly, sny+oly
        do i = 1-olx, snx+olx
          rhok(i,j) = 0.d0
        end do
      end do
      do bj = mybylo(mythid), mybyhi(mythid)
        do bi = mybxlo(mythid), mybxhi(mythid)
          act1 = bi-mybxlo(mythid)
          max1 = mybxhi(mythid)-mybxlo(mythid)+1
          act2 = bj-mybylo(mythid)
          max2 = mybyhi(mythid)-mybylo(mythid)+1
          act3 = mythid-1
          max3 = ntx*nty
          act4 = ikey_dynamics-1
          ikey = act1+1+act2*max1+act3*max1*max2+act4*max1*max2*max3
          do j = 1-oly, sny+oly
            do i = 1-olx, snx+olx
              fvert(i,j,1) = 0.d0
              fvert(i,j,2) = 0.d0
              fvers(i,j,1) = 0.d0
              fvers(i,j,2) = 0.d0
              rhokm1(i,j) = 0.d0
            end do
          end do
          do k = 1, nr
            do j = 1-oly, sny+oly
              do i = 1-olx, snx+olx
                sigmax(i,j,k) = 0.d0
                sigmay(i,j,k) = 0.d0
                sigmar(i,j,k) = 0.d0
                kappart(i,j,k) = 0.d0
                kappars(i,j,k) = 0.d0
                gt(i,j,k,bi,bj) = 0.d0
                gs(i,j,k,bi,bj) = 0.d0
                kux(i,j,k,bi,bj) = 0.d0
                kvy(i,j,k,bi,bj) = 0.d0
              end do
            end do
          end do
          imin = 1-olx+1
          imax = snx+olx
          jmin = 1-oly+1
          jmax = sny+oly
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_theta_9h(ip1,ip2,ip3,ikey) = theta(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_salt_10h(ip1,ip2,ip3,ikey) = salt(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_uvel_11h(ip1,ip2,ip3,ikey) = uvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_vvel_12h(ip1,ip2,ip3,ikey) = vvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do k = nr, 1, -1
            kkey = (ikey-1)*nr+k
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_rhokm1_11h(ip1,ip2,kkey) = rhokm1(ip1-1+
     $1-olx,ip2-1+1-oly)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_rhok_12h(ip1,ip2,kkey) = rhok(ip1-1+1-
     $olx,ip2-1+1-oly)
              end do
            end do
            call integrate_for_w( bi,bj,k,uvel,vvel,wvel,mythid )
            if (usegmredi .or. k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_k_theta_13h(ip1,ip2,kkey) = theta(ip1-1+
     $1-olx,ip2-1+1-oly,k,bi,bj)
                end do
              end do
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_k_salt_14h(ip1,ip2,kkey) = salt(ip1-1+1-
     $olx,ip2-1+1-oly,k,bi,bj)
                end do
              end do
              call find_rho( bi,bj,imin,imax,jmin,jmax,k,k,eostype,
     $theta,salt,rhok,mythid )
              if (k .gt. 1) then
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    comlev1_bibj_k_theta_15h(ip1,ip2,kkey) = theta(ip1-
     $1+1-olx,ip2-1+1-oly,k-1,bi,bj)
                  end do
                end do
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    comlev1_bibj_k_salt_16h(ip1,ip2,kkey) = salt(ip1-1+
     $1-olx,ip2-1+1-oly,k-1,bi,bj)
                  end do
                end do
                help_h = k-1
                call find_rho( bi,bj,imin,imax,jmin,jmax,help_h,k,
     $eostype,theta,salt,rhokm1,mythid )
              endif
              call grad_sigma( bi,bj,imin,imax,jmin,jmax,k,rhok,rhokm1,
     $rhok,sigmax,sigmay,sigmar,mythid )
            endif
            if (k .gt. 1 .and. ivdc_kappa .ne. 0.) then
              call calc_ivdc( bi,bj,imin,imax,jmin,jmax,k,rhokm1,rhok,
     $convectcount,kappart,kappars,mytime,myiter,mythid )
            endif
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_wvel_13h(ip1,ip2,ip3,ikey) = wvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          call external_forcing_surf( bi,bj,imin,imax,jmin,jmax,mythid )
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_surfacetendencyu_1(ip1,ip2,ikey) = 
     $surfacetendencyu(ip1-1+1-olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_surfacetendencyv_1(ip1,ip2,ikey) = 
     $surfacetendencyv(ip1-1+1-olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_surfacetendencys_1(ip1,ip2,ikey) = 
     $surfacetendencys(ip1-1+1-olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_surfacetendencyt_1(ip1,ip2,ikey) = 
     $surfacetendencyt(ip1-1+1-olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          if (usegmredi) then
            call mdgmredi_calc_tensor( bi,bj,imin,imax,jmin,jmax,sigmax,
     $sigmay,sigmar,mythid )
          else
            call gmredi_calc_tensor_dummy( bi,bj,imin,imax,jmin,jmax,
     $sigmax,sigmay,sigmar,mythid )
          endif
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kwx_18h(ip1,ip2,ip3,ikey) = kwx(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kwy_19h(ip1,ip2,ip3,ikey) = kwy(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kwz_20h(ip1,ip2,ip3,ikey) = kwz(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          if (usekpp) then
            call mdkpp_calc( bi,bj,mytime,mythid )
          else
            call kpp_calc_dummy( bi,bj,mytime,mythid )
          endif
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kppghat_21h(ip1,ip2,ip3,ikey) = 
     $kppghat(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kppdiffkzt_22h(ip1,ip2,ip3,ikey) = 
     $kppdiffkzt(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kppdiffkzs_23h(ip1,ip2,ip3,ikey) = 
     $kppdiffkzs(ip1-1+1-olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip2 = 1, 1+sny+oly-(1-oly)
            do ip1 = 1, 1+snx+olx-(1-olx)
              comlev1_bibj_kppfrac_24h(ip1,ip2,ikey) = kppfrac(ip1-1+1-
     $olx,ip2-1+1-oly,bi,bj)
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kappart_25h(ip1,ip2,ip3,ikey) = 
     $kappart(ip1-1+1-olx,ip2-1+1-oly,ip3)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_kappars_26h(ip1,ip2,ip3,ikey) = 
     $kappars(ip1-1+1-olx,ip2-1+1-oly,ip3)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_theta_27h(ip1,ip2,ip3,ikey) = theta(ip1-1+
     $1-olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_salt_28h(ip1,ip2,ip3,ikey) = salt(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_uvel_29h(ip1,ip2,ip3,ikey) = uvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do ip3 = 1, nr
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_vvel_30h(ip1,ip2,ip3,ikey) = vvel(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
              end do
            end do
          end do
          do k = nr, 1, -1
            kkey = (ikey-1)*nr+k
            km1 = max(1,k-1)
            kup = 1+mod(k+1,2)
            kdown = 1+mod(k,2)
            imin = 1-olx
            imax = snx+olx
            jmin = 1-oly
            jmax = sny+oly
            call calc_common_factors( bi,bj,imin,imax,jmin,jmax,k,xa,ya,
     $utrans,vtrans,rtrans,maskup,mythid )
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_kappart_20h(ip1,ip2,kkey) = kappart(ip1-
     $1+1-olx,ip2-1+1-oly,k)
              end do
            end do
            do ip2 = 1, 1+sny+oly-(1-oly)
              do ip1 = 1, 1+snx+olx-(1-olx)
                comlev1_bibj_k_kappars_21h(ip1,ip2,kkey) = kappars(ip1-
     $1+1-olx,ip2-1+1-oly,k)
              end do
            end do
            call calc_diffusivity( bi,bj,imin,imax,jmin,jmax,k,maskup,
     $kappart,kappars,mythid )
            imin = 1-olx+2
            imax = snx+olx-1
            jmin = 1-oly+2
            jmax = sny+oly-1
            if (tempstepping) then
              call mdcalc_gt( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,kappart,fvert,mytime,myiter,
     $mythid )
              call timestep_tracer( bi,bj,imin,imax,jmin,jmax,k,
     $tempadvscheme,theta,gt,myiter,mythid )
            endif
            if (saltstepping) then
              call mdcalc_gs( bi,bj,imin,imax,jmin,jmax,k,km1,kup,kdown,
     $xa,ya,utrans,vtrans,rtrans,maskup,kappars,fvers,mytime,myiter,
     $mythid )
              call timestep_tracer( bi,bj,imin,imax,jmin,jmax,k,
     $saltadvscheme,salt,gs,myiter,mythid )
            endif
            if (allowfreezing .and. ( .not. useseaice)) then
              do ip2 = 1, 1+sny+oly-(1-oly)
                do ip1 = 1, 1+snx+olx-(1-olx)
                  comlev1_bibj_k_gt_22h(ip1,ip2,kkey) = gt(ip1-1+1-olx,
     $ip2-1+1-oly,k,bi,bj)
                end do
              end do
              call freeze( bi,bj,imin,imax,jmin,jmax,k,mythid )
            endif
          end do
          if (implicitdiffusion) then
            if (tempstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    comlev1_bibj_gt_31h(ip1,ip2,ip3,ikey) = gt(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
                  end do
                end do
              end do
              call impldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappart,recip_hfacc,gt,mythid )
            endif
            if (saltstepping) then
              do ip3 = 1, nr
                do ip2 = 1, 1+sny+oly-(1-oly)
                  do ip1 = 1, 1+snx+olx-(1-olx)
                    comlev1_bibj_gs_32h(ip1,ip2,ip3,ikey) = gs(ip1-1+1-
     $olx,ip2-1+1-oly,ip3,bi,bj)
                  end do
                end do
              end do
              call impldiff( bi,bj,imin,imax,jmin,jmax,deltattracer,
     $kappars,recip_hfacc,gs,mythid )
            endif
          endif
        end do
      end do
      if (staggertimestep .and. usecubedsphereexchange) then
        call exch_xyz_rl( gt,mythid )
        call exch_xyz_rl( gs,mythid )
      endif
      end


      subroutine adtimestep( bi, bj, imin, imax, jmin, jmax, k, myiter, 
     $adphihyd, adphisurfx, adphisurfy )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision cosfacu(1-oly:sny+oly,nsx,nsy)
      double precision cosfacv(1-oly:sny+oly,nsx,nsy)
      double precision drc(1:nr)
      double precision drf(1:nr)
      double precision dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision masks(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision maskw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,nsy)
      double precision r_low(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision rc(1:nr)
      double precision recip_drc(1:nr)
      double precision recip_drf(1:nr)
      double precision recip_dxc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dxv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_dyu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_hfacc(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacs(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_hfacw(1-olx:snx+olx,1-oly:sny+oly,1:nr,nsx,
     $nsy)
      double precision recip_ra(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_ras(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_raz(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rcol(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision recip_rkfac
      double precision rf(1:nr+1)
      double precision rkfac
      double precision ro_surf(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision safac(1:nr)
      double precision sqcosfacu(1-oly:sny+oly,nsx,nsy)
      double precision sqcosfacv(1-oly:sny+oly,nsx,nsy)
      double precision tanphiatu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision tanphiatv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision xc0
      double precision xg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision yc0
      double precision yg(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /grid_r/ dxc, dxf, dxg, dxv, dyc, dyf, dyg, dyu, r_low, 
     $ro_surf, hfacc, hfacw, hfacs, recip_dxc, recip_dxf, recip_dxg, 
     $recip_dxv, recip_dyc, recip_dyf, recip_dyg, recip_dyu, recip_rcol,
     $ recip_hfacc, recip_hfacw, recip_hfacs, safac, xc, yc, ra, raw, 
     $ras, raz, xg, yg, maskh, maskc, maskw, masks, recip_ra, recip_raw,
     $ recip_ras, recip_raz, tanphiatu, tanphiatv, cosfacu, cosfacv, 
     $sqcosfacu, sqcosfacv, drc, drf, recip_drc, recip_drf, rc, rf, 
     $rkfac, recip_rkfac, xc0, yc0

      logical allowfreezing
      logical debugmode
      logical dosaltclimrelax
      logical dothetaclimrelax
      logical dotr1climrelax
      logical exactconserv
      logical globalfiles
      logical groundatk1
      logical implicitdiffusion
      logical implicitfreesurface
      logical implicitviscosity
      logical metricterms
      logical momadvection
      logical momforcing
      logical mompressureforcing
      logical momstepping
      logical momviscosity
      logical multidimadvection
      logical no_slip_bottom
      logical no_slip_sides
      logical nonhydrostatic
      logical periodicexternalforcing
      logical readpickupwithtracer
      logical rigidlid
      logical saltadvection
      logical saltdiffusion
      logical saltforcing
      logical saltstepping
      logical staggertimestep
      logical tempadvection
      logical tempdiffusion
      logical tempforcing
      logical tempstepping
      logical tr1stepping
      logical uniformlin_phisurf
      logical usebetaplanef
      logical useconstantf
      logical usecoriolis
      logical useenergyconservingcoriolis
      logical usejamartwetpoints
      logical usepickupbeforec35
      logical usespheref
      logical usingcartesiangrid
      logical usingcurvilineargrid
      logical usingpcoords
      logical usingsphericalpolargrid
      logical usingsphericalpolarmterms
      logical usingzcoords
      logical vectorinvariantmomentum
      logical writepickupwithtracer
      common /parm_l/ usingcartesiangrid, usingsphericalpolargrid, 
     $usingcurvilineargrid, no_slip_sides, no_slip_bottom, 
     $staggertimestep, momviscosity, momadvection, momforcing, 
     $usecoriolis, mompressureforcing, vectorinvariantmomentum, 
     $tempdiffusion, tempadvection, tempforcing, saltdiffusion, 
     $saltadvection, saltforcing, rigidlid, implicitfreesurface, 
     $exactconserv, uniformlin_phisurf, momstepping, tempstepping, 
     $saltstepping, tr1stepping, metricterms, usingsphericalpolarmterms,
     $ useconstantf, usebetaplanef, usespheref, implicitdiffusion, 
     $implicitviscosity, dothetaclimrelax, dosaltclimrelax, 
     $dotr1climrelax, periodicexternalforcing, usingpcoords, 
     $usingzcoords, nonhydrostatic, globalfiles, allowfreezing, 
     $groundatk1, usepickupbeforec35, debugmode, readpickupwithtracer, 
     $writepickupwithtracer, multidimadvection, 
     $useenergyconservingcoriolis, usejamartwetpoints

      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adphihyd(1-olx:snx+olx,1-oly:sny+oly,nr)
      double precision adphisurfx(1-olx:snx+olx,1-oly:sny+oly)
      double precision adphisurfy(1-olx:snx+olx,1-oly:sny+oly)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k
      integer myiter

C==============================================
C declare local variables
C==============================================
      double precision ab05
      double precision ab15
      double precision adgutmp(1-olx:snx+olx,1-oly:sny+oly)
      double precision adgvtmp(1-olx:snx+olx,1-oly:sny+oly)
      integer i
      integer ip1
      integer ip2
      integer j
      double precision phxfac
      double precision phyfac
      double precision psfac

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adgutmp(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1-oly, sny+oly
        do ip1 = 1-olx, snx+olx
          adgvtmp(ip1,ip2) = 0.d0
        end do
      end do

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      if (myiter .eq. 0) then
        ab15 = 1.
        ab05 = 0.
      else
        ab15 = 1.5+abeps
        ab05 = (-0.5)-abeps
      endif
      psfac = pffacmom*(1.d0-implicsurfpress)
      if (staggertimestep) then
        phyfac = pffacmom*deltatmom
        do j = jmin, jmax
          do i = imin, imax
            adphihyd(i,j-1,k) = adphihyd(i,j-1,k)+adgvnm1(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)*phyfac*masks(i,j,k,bi,bj)
            adphihyd(i,j,k) = adphihyd(i,j,k)-adgvnm1(i,j,k,bi,bj)*
     $recip_dyc(i,j,bi,bj)*phyfac*masks(i,j,k,bi,bj)
          end do
        end do
      endif
      do j = jmin, jmax
        do i = imin, imax
          adgvtmp(i,j) = adgvtmp(i,j)+adgvnm1(i,j,k,bi,bj)*deltatmom*
     $masks(i,j,k,bi,bj)
          adphisurfy(i,j) = adphisurfy(i,j)-adgvnm1(i,j,k,bi,bj)*
     $deltatmom*psfac*masks(i,j,k,bi,bj)
          advvel(i,j,k,bi,bj) = advvel(i,j,k,bi,bj)+adgvnm1(i,j,k,bi,bj)
          adgvnm1(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgv(i,j,k,bi,bj) = adgv(i,j,k,bi,bj)+adgvtmp(i,j)*ab15
          adgvcd(i,j,k,bi,bj) = adgvcd(i,j,k,bi,bj)+adgvtmp(i,j)
          adgvnm1(i,j,k,bi,bj) = adgvnm1(i,j,k,bi,bj)+adgvtmp(i,j)*ab05
          adgvtmp(i,j) = 0.d0
        end do
      end do
      if (staggertimestep) then
        phxfac = pffacmom*deltatmom
        do j = jmin, jmax
          do i = imin, imax
            adphihyd(i-1,j,k) = adphihyd(i-1,j,k)+adgunm1(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)*phxfac*maskw(i,j,k,bi,bj)
            adphihyd(i,j,k) = adphihyd(i,j,k)-adgunm1(i,j,k,bi,bj)*
     $recip_dxc(i,j,bi,bj)*phxfac*maskw(i,j,k,bi,bj)
          end do
        end do
      endif
      psfac = pffacmom*(1.d0-implicsurfpress)
      do j = jmin, jmax
        do i = imin, imax
          adgutmp(i,j) = adgutmp(i,j)+adgunm1(i,j,k,bi,bj)*deltatmom*
     $maskw(i,j,k,bi,bj)
          adphisurfx(i,j) = adphisurfx(i,j)-adgunm1(i,j,k,bi,bj)*
     $deltatmom*psfac*maskw(i,j,k,bi,bj)
          aduvel(i,j,k,bi,bj) = aduvel(i,j,k,bi,bj)+adgunm1(i,j,k,bi,bj)
          adgunm1(i,j,k,bi,bj) = 0.d0
        end do
      end do
      do j = jmin, jmax
        do i = imin, imax
          adgu(i,j,k,bi,bj) = adgu(i,j,k,bi,bj)+adgutmp(i,j)*ab15
          adgucd(i,j,k,bi,bj) = adgucd(i,j,k,bi,bj)+adgutmp(i,j)
          adgunm1(i,j,k,bi,bj) = adgunm1(i,j,k,bi,bj)+adgutmp(i,j)*ab05
          adgutmp(i,j) = 0.d0
        end do
      end do

      end


      subroutine adtimestep_tracer( bi, bj, imin, imax, jmin, jmax, k, 
     $adtracer, adgtracer )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer npx
      parameter ( npx = 1 )
      integer npy
      parameter ( npy = 1 )
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer snx
      parameter ( snx = 20 )
      integer nx
      parameter ( nx = snx*nsx*npx )
      integer sny
      parameter ( sny = 16 )
      integer ny
      parameter ( ny = sny*nsy*npy )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )

C==============================================
C declare common blocks
C==============================================
      double precision abeps
      double precision affacmom
      double precision beta
      double precision bottomdraglinear
      double precision bottomdragquadratic
      double precision cadjfreq
      double precision cffacmom
      double precision cg2dpcoffdfac
      double precision cg2dtargetresidual
      double precision cg2dtargetreswunit
      double precision cg3dtargetresidual
      double precision chkptfreq
      double precision cospower
      double precision delp(nr)
      double precision delr(nr)
      double precision delt
      double precision deltat
      double precision deltatclock
      double precision deltatmom
      double precision deltattracer
      double precision delx(nx)
      double precision dely(ny)
      double precision delz(nr)
      double precision diagfreq
      double precision diffk4s
      double precision diffk4t
      double precision diffkhs
      double precision diffkht
      double precision diffkps
      double precision diffkpt
      double precision diffkrs
      double precision diffkrt
      double precision diffkzs
      double precision diffkzt
      double precision dumpfreq
      double precision endtime
      double precision externforcingcycle
      double precision externforcingperiod
      double precision f0
      double precision fcori(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fcorig(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision fofacmom
      double precision freesurffac
      double precision gbaro
      double precision gravity
      double precision hfacinf
      double precision hfacmin
      double precision hfacmindp
      double precision hfacmindr
      double precision hfacmindz
      double precision hfacsup
      double precision horivertratio
      double precision implicdiv2dflow
      double precision implicsurfpress
      double precision ivdc_kappa
      double precision lambdasaltclimrelax
      double precision lambdathetaclimrelax
      double precision lambdatr1climrelax
      double precision monitorfreq
      double precision mtfacmom
      double precision omega
      double precision pchkptfreq
      double precision pffacmom
      double precision phimin
      double precision rcd
      double precision recip_gravity
      double precision recip_horivertratio
      double precision recip_rhoconst
      double precision recip_rhonil
      double precision recip_rsphere
      double precision rhoconst
      double precision rhonil
      double precision ro_sealevel
      double precision rsphere
      double precision specvol_s(nr)
      double precision sref(nr)
      double precision starttime
      double precision taucd
      double precision tausaltclimrelax
      double precision tauthetaclimrelax
      double precision tautr1climrelax
      double precision tavefreq
      double precision theta_s(nr)
      double precision thetamin
      double precision tref(nr)
      double precision vffacmom
      double precision visca4
      double precision viscah
      double precision viscap
      double precision viscar
      double precision viscastrain
      double precision viscatension
      double precision viscaz
      common /parm_r/ cg2dtargetresidual, cg2dtargetreswunit, 
     $cg2dpcoffdfac, cg3dtargetresidual, delp, delz, delr, delx, dely, 
     $deltat, deltatmom, deltattracer, deltatclock, abeps, starttime, 
     $phimin, thetamin, rsphere, recip_rsphere, f0, beta, fcori, fcorig,
     $ viscah, viscaz, visca4, viscar, viscastrain, viscatension, 
     $diffkht, diffkzt, diffk4t, diffkrt, diffkhs, diffkzs, diffk4s, 
     $diffkrs, delt, taucd, rcd, freesurffac, implicsurfpress, 
     $implicdiv2dflow, hfacmin, hfacmindz, hfacinf, hfacsup, gravity, 
     $recip_gravity, gbaro, rhonil, recip_rhonil, recip_rhoconst, 
     $rhoconst, tref, sref, endtime, chkptfreq, pchkptfreq, dumpfreq, 
     $diagfreq, tavefreq, monitorfreq, affacmom, vffacmom, pffacmom, 
     $cffacmom, fofacmom, mtfacmom, cospower, cadjfreq, omega, 
     $tauthetaclimrelax, lambdathetaclimrelax, tausaltclimrelax, 
     $lambdasaltclimrelax, tautr1climrelax, lambdatr1climrelax, 
     $externforcingcycle, externforcingperiod, viscap, diffkpt, diffkps,
     $ hfacmindr, hfacmindp, theta_s, specvol_s, horivertratio, 
     $recip_horivertratio, ivdc_kappa, ro_sealevel, bottomdraglinear, 
     $bottomdragquadratic

C==============================================
C declare arguments
C==============================================
      double precision adgtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtracer(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      integer bi
      integer bj
      integer imax
      integer imin
      integer jmax
      integer jmin
      integer k

C==============================================
C declare local variables
C==============================================
      integer i
      integer j

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do j = jmin, jmax
        do i = imin, imax
          adtracer(i,j,k,bi,bj) = adtracer(i,j,k,bi,bj)+adgtracer(i,j,k,
     $bi,bj)
          adgtracer(i,j,k,bi,bj) = adgtracer(i,j,k,bi,bj)*deltattracer
        end do
      end do

      end


      subroutine adwscale( sigma, hbl, ustar, bfsfc, adsigma, adhbl, 
     $adustar, adbfsfc, adwm, adws )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )
      integer imt
      parameter ( imt = (snx+2*olx)*(sny+2*oly) )
      integer nni
      parameter ( nni = 890 )
      integer nnj
      parameter ( nnj = 480 )

C==============================================
C declare common blocks
C==============================================
      double precision conam
      double precision conas
      double precision conc1
      double precision conc2
      double precision conc3
      double precision concm
      double precision concs
      double precision db_dz
      double precision epsilon
      double precision epsln
      double precision phepsi
      double precision vonk
      double precision zetam
      double precision zetas
      common /kmixcom/ epsln, phepsi, epsilon, vonk, db_dz, conc1, 
     $conam, concm, conc2, zetam, conas, concs, conc3, zetas

      double precision deltau
      double precision deltaz
      double precision umax
      double precision umin
      double precision wmt(0:nni+1,0:nnj+1)
      double precision wst(0:nni+1,0:nnj+1)
      double precision zmax
      double precision zmin
      common /kmixcws/ wmt, wst, deltaz, deltau, zmin, zmax, umin, umax

C==============================================
C declare arguments
C==============================================
      double precision adbfsfc(imt)
      double precision adhbl(imt)
      double precision adsigma(imt)
      double precision adustar(imt)
      double precision adwm(imt)
      double precision adws(imt)
      double precision bfsfc(imt)
      double precision hbl(imt)
      double precision sigma(imt)
      double precision ustar(imt)

C==============================================
C declare local variables
C==============================================
      double precision adfzfrac
      double precision adtempvar
      double precision adu3
      double precision adudiff
      double precision adufrac
      double precision adwam
      double precision adwas
      double precision adwbm
      double precision adwbs
      double precision adzdiff
      double precision adzehat
      double precision adzfrac
      double precision fzfrac
      integer i
      integer iz
      integer izp1
      integer ju
      integer jup1
      double precision tempvar
      double precision u3
      double precision udiff
      double precision ufrac
      double precision wam
      double precision was
      double precision wbm
      double precision wbs
      double precision zdiff
      double precision zehat
      double precision zfrac

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES
C----------------------------------------------
      adfzfrac = 0.d0
      adtempvar = 0.d0
      adu3 = 0.d0
      adudiff = 0.d0
      adufrac = 0.d0
      adwam = 0.d0
      adwas = 0.d0
      adwbm = 0.d0
      adwbs = 0.d0
      adzdiff = 0.d0
      adzehat = 0.d0
      adzfrac = 0.d0

C----------------------------------------------
C ROUTINE BODY
C----------------------------------------------
      do i = 1, imt
        adfzfrac = 0.d0
        adtempvar = 0.d0
        adu3 = 0.d0
        adudiff = 0.d0
        adufrac = 0.d0
        adwam = 0.d0
        adwas = 0.d0
        adwbm = 0.d0
        adwbs = 0.d0
        adzdiff = 0.d0
        adzehat = 0.d0
        adzfrac = 0.d0
        zehat = vonk*sigma(i)*hbl(i)*bfsfc(i)
        if (zehat .le. zmax) then
          zdiff = zehat-zmin
          iz = int(zdiff/deltaz)
          iz = min(iz,nni)
          iz = max(iz,0)
          izp1 = iz+1
          udiff = ustar(i)-umin
          ju = int(udiff/deltau)
          ju = min(ju,nnj)
          ju = max(ju,0)
          jup1 = ju+1
          zfrac = zdiff/deltaz-float(iz)
          ufrac = udiff/deltau-float(ju)
          fzfrac = 1.-zfrac
          wam = fzfrac*wmt(iz,jup1)+zfrac*wmt(izp1,jup1)
          wbm = fzfrac*wmt(iz,ju)+zfrac*wmt(izp1,ju)
          was = fzfrac*wst(iz,jup1)+zfrac*wst(izp1,jup1)
          wbs = fzfrac*wst(iz,ju)+zfrac*wst(izp1,ju)
          adufrac = adufrac+adws(i)*((-wbs)+was)
          adwas = adwas+adws(i)*ufrac
          adwbs = adwbs+adws(i)*(1.-ufrac)
          adws(i) = 0.d0
          adfzfrac = adfzfrac+adwbs*wst(iz,ju)
          adzfrac = adzfrac+adwbs*wst(izp1,ju)
          adwbs = 0.d0
          adfzfrac = adfzfrac+adwas*wst(iz,jup1)
          adzfrac = adzfrac+adwas*wst(izp1,jup1)
          adwas = 0.d0
          adufrac = adufrac+adwm(i)*((-wbm)+wam)
          adwam = adwam+adwm(i)*ufrac
          adwbm = adwbm+adwm(i)*(1.-ufrac)
          adwm(i) = 0.d0
          adfzfrac = adfzfrac+adwbm*wmt(iz,ju)
          adzfrac = adzfrac+adwbm*wmt(izp1,ju)
          adwbm = 0.d0
          adfzfrac = adfzfrac+adwam*wmt(iz,jup1)
          adzfrac = adzfrac+adwam*wmt(izp1,jup1)
          adwam = 0.d0
          adzfrac = adzfrac-adfzfrac
          adfzfrac = 0.d0
          adudiff = adudiff+adufrac/deltau
          adufrac = 0.d0
          adzdiff = adzdiff+adzfrac/deltaz
          adzfrac = 0.d0
          adustar(i) = adustar(i)+adudiff
          adudiff = 0.d0
          adzehat = adzehat+adzdiff
          adzdiff = 0.d0
        else
          u3 = ustar(i)*ustar(i)*ustar(i)
          tempvar = u3+conc1*zehat
          adwm(i) = adwm(i)+adws(i)
          adws(i) = 0.d0
          adtempvar = adtempvar-adwm(i)*(vonk*ustar(i)*u3/(tempvar*
     $tempvar))
          adu3 = adu3+adwm(i)*(vonk*ustar(i)/tempvar)
          adustar(i) = adustar(i)+adwm(i)*(vonk*u3/tempvar)
          adwm(i) = 0.d0
          adu3 = adu3+adtempvar
          adzehat = adzehat+adtempvar*conc1
          adtempvar = 0.d0
          adustar(i) = adustar(i)+3*adu3*ustar(i)*ustar(i)
          adu3 = 0.d0
        endif
        adbfsfc(i) = adbfsfc(i)+adzehat*vonk*sigma(i)*hbl(i)
        adhbl(i) = adhbl(i)+adzehat*vonk*sigma(i)*bfsfc(i)
        adsigma(i) = adsigma(i)+adzehat*vonk*hbl(i)*bfsfc(i)
        adzehat = 0.d0
      end do

      end


      subroutine adzero
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 1.4.20  **
C******************************************************************
C******************************************************************
C==============================================
C all entries are defined explicitly
C==============================================
      implicit none

C==============================================
C declare parameters
C==============================================
      integer nr
      parameter ( nr = 23 )
      integer nsx
      parameter ( nsx = 1 )
      integer nsy
      parameter ( nsy = 1 )
      integer olx
      parameter ( olx = 4 )
      integer oly
      parameter ( oly = 4 )
      integer snx
      parameter ( snx = 20 )
      integer sny
      parameter ( sny = 16 )

C==============================================
C declare common blocks
C==============================================
      double precision adpsbar(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtbar(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /adaverages_r/ adtbar, adsbar, adpsbar

      double precision adxx_atemp0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_atemp1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_1_r/ adxx_atemp0, adxx_atemp1

      double precision adxx_aqh0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_aqh1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_2_r/ adxx_aqh0, adxx_aqh1

      double precision adxx_uwind0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_uwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_3_r/ adxx_uwind0, adxx_uwind1

      double precision adxx_vwind0(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adxx_vwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adcontrolaux_4_r/ adxx_vwind0, adxx_vwind1

      double precision adtmpfld2d(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adtmpfld3d(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adcontrolvars_r/ adtmpfld2d, adtmpfld3d

      double precision adfc
      double precision adobjf_aqh(nsx,nsy)
      double precision adobjf_atemp(nsx,nsy)
      double precision adobjf_h(nsx,nsy)
      double precision adobjf_hmean
      double precision adobjf_salt(nsx,nsy)
      double precision adobjf_sst(nsx,nsy)
      double precision adobjf_temp(nsx,nsy)
      double precision adobjf_uwind(nsx,nsy)
      double precision adobjf_vwind(nsx,nsy)
      common /adcost_r/ adfc, adobjf_hmean, adobjf_h, adobjf_temp, 
     $adobjf_salt, adobjf_sst, adobjf_atemp, adobjf_aqh, adobjf_uwind, 
     $adobjf_vwind

      double precision adxx_aqh_dummy
      double precision adxx_atemp_dummy
      double precision adxx_psbar_mean_dummy
      double precision adxx_salt_dummy
      double precision adxx_sbar_mean_dummy
      double precision adxx_tbar_mean_dummy
      double precision adxx_theta_dummy
      double precision adxx_uwind_dummy
      double precision adxx_vwind_dummy
      common /adctrl_dummy/ adxx_theta_dummy, adxx_salt_dummy, 
     $adxx_atemp_dummy, adxx_aqh_dummy, adxx_uwind_dummy, 
     $adxx_vwind_dummy, adxx_tbar_mean_dummy, adxx_sbar_mean_dummy, 
     $adxx_psbar_mean_dummy

      double precision adetanm1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgucd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvcd(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advveld(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_cd/ aduveld, advveld, adetanm1, adunm1, advnm1, 
     $adgucd, adgvcd

      double precision adetah(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adetan(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adgs(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgsnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgtnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgu(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgunm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgv(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adgvnm1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adsalt(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adtheta(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision aduvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision advvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adwvel(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      common /addynvars_r/ adetan, adetah, aduvel, advvel, adwvel, 
     $adtheta, adsalt, adgu, adgv, adgt, adgs, adgunm1, adgvnm1, 
     $adgtnm1, adgsnm1

      double precision adhdivflow(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexact_eta_local/ adhdivflow

      double precision adaqh(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adatemp(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adlwflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_temp_r/ adatemp, adaqh, adlwflux

      double precision aduwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advwind(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_atm_wind_r/ aduwind, advwind

      double precision adevap(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_evap/ adevap

      double precision adhflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adsflux(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_hsflux_r/ adhflux, adsflux

      double precision adustress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision advstress(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adexf_stress_r/ adustress, advstress

      double precision adempmr(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfu(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adfv(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqnet(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqsw(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adffields/ adfu, adfv, adqnet, adqsw, adempmr

      double precision adgm_hortensor1(1-olx:snx+olx,1-oly:sny+oly,nr,
     $nsx,nsy)
      double precision adgm_hortensor2(1-olx:snx+olx,1-oly:sny+oly,nr,
     $nsx,nsy)
      common /adgm_hortensor/ adgm_hortensor1, adgm_hortensor2

      double precision adgm_wtensor1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adgm_wtensor2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      double precision adgm_wtensor3(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,
     $nsy)
      common /adgm_wtensor/ adgm_wtensor1, adgm_wtensor2, adgm_wtensor3

      double precision adkpp1(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp2(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp3(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp4(1-olx:snx+olx,1-oly:sny+oly,nr,nsx,nsy)
      double precision adkpp5(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adkpp/ adkpp1, adkpp2, adkpp3, adkpp4, adkpp5

      double precision adkpp_short1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adkpp_short/ adkpp_short1

      double precision admix1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision admix2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /admix/ admix1, admix2

      double precision adofl1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adofl/ adofl1

      double precision adqflux1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqflux2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adqflux4(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adqflux/ adqflux1, adqflux2, adqflux4

      double precision adrate1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adrate2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adrate3(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adrate4(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adrate/ adrate1, adrate2, adrate3, adrate4

      double precision adsalt_water1(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      common /adsalt_water/ adsalt_water1

      double precision adseaice_dynvars3(1-olx:snx+olx,1-oly:sny+oly,3,
     $nsx,nsy)
      common /adseaice_dynvars/ adseaice_dynvars3

      double precision adseaice_dynvars16(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adseaice_dynvars17(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adseaice_dynvars1/ adseaice_dynvars16, adseaice_dynvars17

      double precision adseaice_external1(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adseaice_external/ adseaice_external1

      double precision adsfp_common_r81(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      double precision adsfp_common_r82(1-olx:snx+olx,1-oly:sny+oly,nsx,
     $nsy)
      common /adsfp_common_r8/ adsfp_common_r81, adsfp_common_r82

      double precision adsurfacetendencys(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyt(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyu(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      double precision adsurfacetendencyv(1-olx:snx+olx,1-oly:sny+oly,
     $nsx,nsy)
      common /adtendency_forcing/ adsurfacetendencyu, 
     $adsurfacetendencyv, adsurfacetendencyt, adsurfacetendencys

      double precision adtrans1(1-olx:snx+olx,1-oly:sny+oly,3,nsx,nsy)
      double precision adtrans2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adtrans/ adtrans1, adtrans2

      double precision adwind1(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      double precision adwind2(1-olx:snx+olx,1-oly:sny+oly,nsx,nsy)
      common /adwind/ adwind1, adwind2

C==============================================
C declare local variables
C==============================================
      integer ip1
      integer ip2
      integer ip3
      integer ip4
      integer ip5


C----------------------------------------------
C reset adjoint common block variables
C----------------------------------------------
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtbar(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adsbar(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adpsbar(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_atemp0(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_atemp1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_aqh0(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_aqh1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_uwind0(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_uwind1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_vwind0(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adxx_vwind1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adtmpfld2d(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtmpfld3d(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      adobjf_hmean = 0.d0
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_h(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_temp(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_salt(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_sst(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_atemp(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_aqh(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_uwind(ip1,ip2) = 0.d0
        end do
      end do
      do ip2 = 1, nsy
        do ip1 = 1, nsx
          adobjf_vwind(ip1,ip2) = 0.d0
        end do
      end do
      adxx_tbar_mean_dummy = 0.d0
      adxx_sbar_mean_dummy = 0.d0
      adxx_psbar_mean_dummy = 0.d0
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                aduveld(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advveld(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetanm1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adunm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgucd(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgvcd(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetan(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adetah(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                aduvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                advvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adwvel(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtheta(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adsalt(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgu(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgv(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgt(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgs(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgunm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgvnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgtnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgsnm1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adhdivflow(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adatemp(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adaqh(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adlwflux(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              aduwind(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              advwind(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adevap(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adhflux(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsflux(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adustress(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              advstress(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adfu(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adfv(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adqnet(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adqsw(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adempmr(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_hortensor1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_hortensor2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_wtensor1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_wtensor2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adgm_wtensor3(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp2(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp3(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, nr
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adkpp4(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adkpp5(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adkpp_short1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              admix1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              admix2(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adofl1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adqflux1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adqflux2(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adqflux4(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adrate1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adrate2(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adrate3(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adrate4(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsalt_water1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adseaice_dynvars3(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adseaice_dynvars16(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adseaice_dynvars17(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adseaice_external1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsfp_common_r81(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsfp_common_r82(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencyu(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencyv(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencyt(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adsurfacetendencys(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip5 = 1, nsy
        do ip4 = 1, nsx
          do ip3 = 1, 3
            do ip2 = 1-oly, sny+oly
              do ip1 = 1-olx, snx+olx
                adtrans1(ip1,ip2,ip3,ip4,ip5) = 0.d0
              end do
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adtrans2(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adwind1(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do
      do ip4 = 1, nsy
        do ip3 = 1, nsx
          do ip2 = 1-oly, sny+oly
            do ip1 = 1-olx, snx+olx
              adwind2(ip1,ip2,ip3,ip4) = 0.d0
            end do
          end do
        end do
      end do

      end


