C $Header: /home/jahn/src/cvs2git/MITgcm/20170915-2/gcmpack-all-patch/MITgcm/pkg/diagnostics/Attic/diag_readparms.F,v 1.8 2004/07/05 04:44:51 edhill Exp $
C $Name:  $

      subroutine diag_readparms (myThid)
C***********************************************************************
C  Purpose
C  -------
C     Read Diagnostics Namelists to specify output sequence
C
C  Arguments  Description
C  ----------------------
C     myThid ... Process(or) number
C***********************************************************************
      implicit none

#include "CPP_EEOPTIONS.h"
#include "CPP_OPTIONS.h"
#include "SIZE.h"
#include "diagnostics_SIZE.h"
#include "diagnostics.h"
#include "EEPARAMS.h"

      integer myThid

c Declare Local Variables
c -----------------------
      character*(MAX_LEN_MBUF) msgBuf
      integer ku
      integer l,n,m,ndim
      _RL undef, getcon
      parameter ( ndim = 100 )       ! Max Number of Levels,Fields,Lists
      integer frequency(ndim)        ! Frequency of Output (hhmmss)
      _RL levels (ndim,ndim)         ! List Output Levels
      character*8 fields(ndim,ndim)  ! List Output Fields
      character*8 filename(ndim)     ! List Output Filename
      character*8 blank
      INTEGER ioUnit
      LOGICAL use_mdsio, use_mnc

      namelist / diagnostics_list /
     &     frequency, levels, fields, filename,
     &     use_mdsio, use_mnc

C **********************************************************************
C ****           Initialize and Read Diagnostics Namelist           ****
C **********************************************************************
      _BEGIN_MASTER(myThid)

      undef = getcon('UNDEF')
      blank  = '        '

      do n = 1,ndim
        frequency(n) = 0
        do m = 1,ndim
          levels (n,m) = undef
          fields (n,m) = blank
        enddo
      enddo

      use_mdsio = .true.
      use_mnc   = .false.

      WRITE(msgBuf,'(A)') ' DIAG_READPARMS: opening data.diagnostics'
      CALL PRINT_MESSAGE( msgBuf, standardMessageUnit,SQUEEZE_RIGHT,1)
                                                                                        
      CALL OPEN_COPY_DATA_FILE('data.diagnostics', 'DIAG_READPARMS',
     .                          ku,myThid )
      read  (ku,NML=diagnostics_list)
      close (ku)

C **********************************************************************
C ****         Initialise diag_choices common block                 ****
C **********************************************************************

      nlists = 0
      do n = 1,numlists
       freq(n) = 0
       nlevels(n) = 0
       nfields(n) = 0
       fnames(n) = blank
       do m = 1,numperlist
        levs(m,n) = 0
        flds(m,n) = '        '
       enddo
      enddo

C **********************************************************************
C ****         Fill Diagnostics Common Block with Namelist Info     ****
C **********************************************************************

      do n = 1,numlists
        if( frequency(n).ne.0 ) then
          nlists = nlists + 1
          freq(n)   = frequency(n)
          fnames(n)    = filename (n)
          nlevels(n) = 0
          nfields(n) = 0
          do m=1,ndim
            if( levels(m,n).ne.undef ) nlevels(n) = nlevels(n) + 1
            if( fields(m,n).ne.blank ) nfields(n) = nfields(n) + 1
          enddo
          do m=1,nlevels(n)
            levs(m,n) = levels(m,n)
          enddo
          do m=1,nfields(n)
            flds(m,n) = fields(m,n)
          enddo
        endif
      enddo

CEH3  PLEASE ADD WARNING HERE !
C     
C     Since numlists is not necessarily equal to ndim, users should be
C     warned when the number of diagnostics they have specified (or is
C     it requested?) exceeds the available space.

      diag_use_mdsio = use_mdsio
      diag_use_mnc   = use_mnc

C **********************************************************************
C ****               Echo History List Data Structure               ****
C **********************************************************************

      ioUnit = standardMessageUnit
      do n=1,nlists
         WRITE(ioUnit,*) 'Creating Output Stream: ',fnames(n)
         WRITE(ioUnit,*) 'Frequency: ',freq(n)
         WRITE(ioUnit,*) 'Levels:    ',(levs(l,n),l=1,nlevels(n))
         WRITE(ioUnit,'(8(1X,A))') 'Fields:   ',
     &                                 (flds(l,n),l=1,nfields(n))
         WRITE(ioUnit,*)
      enddo

      _END_MASTER(myThid)

      return
      end
